{
  "hash": "eaf5e3c9f69bda8bafaa3618b332e37b",
  "result": {
    "markdown": "---\ntitle: 'Transition from dplyr to data.table'\ndate: \"2020-06-25\"\ncategories: [\"R\", \"data wrangle\"]\noutput: \n  blogdown::html_page:\n          toc: false\n---\n\n\n\n\n`dplyr` and `tidyr` have totally changed the way we code in R. I particularly love the pipe `%>%` which comes from `magrittr` package and makes the code easy to read and understand. While I am obessed with simplicity of `dplyr` coding style, I am also fascinated with how fast `data.table` wrangles data. Below is an example showing the speed difference using `dplyr` and `data.table` in a user function `gene_lookup` for one of my shiny app. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr version\nsystem.time({\n        old_result = gene_lookup_old(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)\n})\n# user  system elapsed \n# 2.727   0.122   2.898  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# data.table version\nsystem.time({\n        new_result = gene_lookup(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)\n})\n# user  system elapsed \n# 0.505   0.054   0.293 \n```\n:::\n\n\nLast year, Hadley Wickham and  his team launched a hybrid package [`dtplyr`](https://github.com/tidyverse/dtplyr) which uses the syntax of `dplyr` but runs `data.table` on the backend. It is a brilliant idea and I believe a lot of dplyr fan would love it, but dtplyr is still slower than data.table. Considering speed is the highest priority in some applications, I would like to switch to data.table completely. It took me only half day to get used to data.table syntax anyway. Plus, [this post](https://martinctc.github.io/blog/using-data.table-with-magrittr-pipes-best-of-both-worlds/), which shows using pipe in data.table, makes this transition more smooth and pleasant.\n\nIn this blog, I will list `data.table` and `dplyr`/`tidyr` syntax back to back, providing an easy reference for dplyr users who want to quickly pick up `data.table`.\n\n### read file\n`read_delim` and `read_csv` are the two functions commonly used to read-in data from `dplyr`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_mtcars_df = read_delim(\"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv\", delim=\",\")\nuntidy_mtcars_df = read_csv(\"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv\")\nclass(untidy_mtcars_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n:::\n:::\n\n\nThe equivalent command in `data.table` is `fread`. Like \"read_delim\", `fread` automatically searches for header and defines column data type, but it is faster and automatically searches for separators as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_mtcars_dt = fread(\"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv\")\nclass(untidy_mtcars_dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.table\" \"data.frame\"\n```\n:::\n:::\n\n\nTo switch between tibble and data.table class, use `tbl_df` to convert data.table to tibble, and `as.data.table()` to convert tibble/data.frame to data.table.\n\n### subset rows\nSubsetting rows is done by the function `filter` from `dplyr`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset Merc cars \nuntidy_mtcars_df %>% \n  filter(grepl(\"Merc\",model))\n```\n:::\n\n\nSubsetting rows in `data.table` is very similar to the base R, placing boolean vector at row index. The index separator `,` can even be omitted. Also if boolean expression contains column variables, we can use the variable names directly instead of using df$var.\n\nPipe can be used in the format of ` %>% .[]` to connect the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset Merc cars \nuntidy_mtcars_dt %>% \n  .[grepl(\"Merc\",model)]\n```\n:::\n\n\n### subset columns\nSubsetting columns is done by the function `select` from `dplyr`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset columns -- model, mpg, cyl\nuntidy_mtcars_df %>% \n  select(model, mpg, cyl)\n\n# de-select columns with partial names \"ar\"\nuntidy_mtcars_df %>% \n  select(-contains(\"ar\"))\n```\n:::\n\n\n`data.table` uses variable names to subset columns. Like base R, the variable name vector is a character class placed at column index position. Index separator `,` cannot be omitted here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset columns -- model, mpg, cyl\nuntidy_mtcars_dt %>% \n  .[,c(\"model\",\"mpg\",\"cyl\")]\n\n# de-select columns with partial names \"ar\"\ncol_ar = colnames(untidy_mtcars_dt)[grepl(\"ar\",colnames(untidy_mtcars_dt))]\nuntidy_mtcars_dt %>% \n  .[,-..col_ar]\n```\n:::\n\n\n### add new variable\n`dplyr` uses `mutate` to add column.\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign car size based on the weight\nuntidy_mtcars_df %>% \n  mutate(size=case_when(\n    wt < 3 ~ \"small\",\n    wt > 3 & wt < 5 ~ \"median\",\n    wt > 5 ~ \"large\"\n  ))\n```\n:::\n\n\n`data.table` uses `:=` to assign values to column variables. Be aware that, different from `mutate` which returns the updated data frame without assignment, data.table is modified by reference and returned invisibly when `:=` or any `set*` functions are used. If you do not want to change the original data.table, take a copy first `DT2 = copy(DT)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_mtcars_dt2=copy(untidy_mtcars_dt)\nuntidy_mtcars_dt2 %>% \n  .[,size:=case_when(wt < 3 ~ \"small\",\n    wt > 3 & wt < 5 ~ \"median\",\n    wt > 5 ~ \"large\")]\n```\n:::\n\n\n`:=` can also be used for multiple column assignment and functional form. More details refer to the [usage manual](https://www.rdocumentation.org/packages/data.table/versions/1.12.8/topics/%3A%3D)\n\n### pivot \nTable pivoting is done by the functions `spread` and `gather` (or  `pivot_wider` and `pivot_longer`) from `tidyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wide to long (gather) -- combine automatic, manual two columns into transmission\ntidy_mtcars_df = untidy_mtcars_df %>% \n  gather(key=\"transmission\",value=\"tmp\",automatic,manual) %>% \n  filter(tmp==1) %>% \n  select(-tmp)\n\n# wide to long (pivot_longer) -- combine automatic, manual two columns into transmission\nuntidy_mtcars_df %>% \n  pivot_longer(cols=c(\"automatic\",\"manual\"),names_to=\"transmission\",values_to=\"tmp\") %>% \n  filter(tmp==1) %>% \n  select(-tmp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 12\n   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb trans…¹\n   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  \n 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     4     4 manual \n 2 Mazda RX…  21       6  160    110  3.9   2.88  17.0     0     4     4 manual \n 3 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     4     1 manual \n 4 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1 automa…\n 5 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2 automa…\n 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1 automa…\n 7 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4 automa…\n 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2 automa…\n 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2 automa…\n10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4 automa…\n# … with 22 more rows, and abbreviated variable name ¹​transmission\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\n# long to wide (spread) -- make transmission to group automatic and manual\ntidy_mtcars_df %>% \n  mutate(tmp=1) %>% \n  spread(transmission, tmp) %>% \n  mutate_if(function(x){any(is.na(x))}, function(x){ifelse(is.na(x),0,1)})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 13\n   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹\n   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1\n 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1\n 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1\n 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1\n 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1\n 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1\n 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1\n 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1\n 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1\n10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1\n# … with 22 more rows, 1 more variable: manual <dbl>, and abbreviated variable\n#   name ¹​automatic\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n```{.r .cell-code}\n# long to wide (pivot_wider) -- \ntidy_mtcars_df %>% \n  mutate(tmp=1) %>% \n  pivot_wider(names_from=transmission, values_from=tmp) %>% \n  mutate_if(function(x){any(is.na(x))}, function(x){ifelse(is.na(x),0,1)})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 13\n   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹\n   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1\n 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1\n 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1\n 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1\n 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1\n 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1\n 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1\n 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1\n 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1\n10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1\n# … with 22 more rows, 1 more variable: manual <dbl>, and abbreviated variable\n#   name ¹​automatic\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nThe `data.table` uses `dcast` for long-to-wide and `melt` for wide-to-long pivoting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wide to long (melt) -- combine automatic, manual two columns into transmission\ntidy_mtcars_dt = untidy_mtcars_dt %>% \n  melt(measure.vars=c(\"automatic\",\"manual\"), variable.name=\"transmission\", value.name=\"tmp\") %>% \n  .[tmp==1] %>% \n  .[,-c(\"tmp\")]\n\n# long to wide (dcast) -- split transmission column to automatic manual\ntidy_mtcars_dt %>% \n  .[, tmp:=1]\n\nuntidy_mtcars_dt = tidy_mtcars_dt %>%   \n  dcast(model + mpg + cyl + disp + hp + drat + wt + qsec + vs + gear + carb ~transmission, value.var=\"tmp\")\n\nuntidy_mtcars_dt %>% \n  .[, c(\"manual\",\"automatic\") := replace(.SD,is.na(.SD),0), .SDcols=c(\"manual\",\"automatic\")]\n```\n:::\n\n\n\n### merge\n`dplyr` uses SQL-like join functions to merge two or more tables together. There are `inner_join`, `full_join`, `left_join`, `right_join`, `semi_join` and `anti_join`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate two tables\ntidy_mtcars_df_engine = tidy_mtcars_df %>% \n  select(model, mpg, cyl, hp, vs)\ntidy_mtcars_df_other = tidy_mtcars_df %>% \n  select(model, disp, qsec, transmission, gear, carb)\n\n# left_join\nleft_join(\n  tidy_mtcars_df_engine,\n  tidy_mtcars_df_other\n)\n```\n:::\n\n\n`data.table`, from the other end, use `merge` for all the joins. By default, `merge` is `inner_join`, but we can adjust `by` variables to fulfill other join functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_mtcars_dt_engine = tidy_mtcars_df_engine %>% as.data.table()\ntidy_mtcars_df_other = tidy_mtcars_df_other %>% as.data.table()\n\n# inner_join\nmerge(\n  tidy_mtcars_dt_engine,\n  tidy_mtcars_df_other,\n  all=FALSE\n)\n\n# left_join\nmerge(\n  tidy_mtcars_dt_engine,\n  tidy_mtcars_df_other,\n  all.x=T\n)\n\n# right_join\nmerge(\n  tidy_mtcars_dt_engine,\n  tidy_mtcars_df_other,\n  all.y=T\n)\n\n# full_join\nmerge(\n  tidy_mtcars_dt_engine,\n  tidy_mtcars_df_other,\n  all=T\n)\n```\n:::\n\n\n### group and summarize\n`dplyr` uses `group_by` and `summarize` to calculate the new variable based on the group.\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate weight mean for each group of differrent cylinder number\nuntidy_mtcars_df %>% \n  group_by(cyl) %>% \n  summarise(wt_mean=mean(wt)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl wt_mean\n  <dbl>   <dbl>\n1     4    2.29\n2     6    3.12\n3     8    4.00\n```\n:::\n:::\n\n\n`data.table` uses `by` to specify the group, and `=` to summarize.\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_mtcars_dt %>% \n  .[,.(wt_mean=mean(wt)),by=cyl]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   cyl  wt_mean\n1:   8 3.999214\n2:   4 2.285727\n3:   6 3.117143\n```\n:::\n:::\n\n\n### group and subsetting\n`dplyr` uses `group_by` and `slice` to subset rows within the group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# choose the heaviest cart for each cylinder group\nuntidy_mtcars_df %>% \n  group_by(cyl) %>% \n  slice(which.max(wt)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 13\n  model        mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹\n  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 Merc 240D   24.4     4  147.    62  3.69  3.19  20       1     4     2       1\n2 Valiant     18.1     6  225    105  2.76  3.46  20.2     1     3     1       1\n3 Lincoln C…  10.4     8  460    215  3     5.42  17.8     0     3     4       1\n# … with 1 more variable: manual <dbl>, and abbreviated variable name\n#   ¹​automatic\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\n`data.table` uses `.SD` and `by` to subset within the group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# choose the heaviest cart for each cylinder group\nuntidy_mtcars_dt %>% \n  .[,.SD[which.max(wt)], by=cyl]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   cyl               model  mpg  disp  hp drat    wt  qsec vs gear carb\n1:   8 Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0    3    4\n2:   4           Merc 240D 24.4 146.7  62 3.69 3.190 20.00  1    4    2\n3:   6             Valiant 18.1 225.0 105 2.76 3.460 20.22  1    3    1\n   automatic manual\n1:         1      0\n2:         1      0\n3:         1      0\n```\n:::\n:::\n\n\nFor more `.SD` reading, refer to https://cran.r-project.org/web/packages/data.table/vignettes/datatable-sd-usage.html\n\n### last bits\nThere are other accessory functions useful in `dplyr` and some of them have corresponding functions in `data.table` too.\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> usage </th>\n   <th style=\"text-align:left;\"> dplyr </th>\n   <th style=\"text-align:left;\"> data.table </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> get unique rows </td>\n   <td style=\"text-align:left;\"> distinct() </td>\n   <td style=\"text-align:left;\"> unique() </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sort by column(s) </td>\n   <td style=\"text-align:left;\"> arrange() </td>\n   <td style=\"text-align:left;\"> setorder()/setorderv() </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> change column names </td>\n   <td style=\"text-align:left;\"> rename(new=old) </td>\n   <td style=\"text-align:left;\"> setnames(old, new) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
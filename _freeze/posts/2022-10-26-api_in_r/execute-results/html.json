{
  "hash": "851f96624f8826efdcb6aae23af1cdc3",
  "result": {
    "markdown": "---\ntitle: \"Use API in R and solve common errors\"\ndate: '2022-10-26'\ncategories: [\"R\", \"API\"]\nimage: 'https://www.elemental.co.za/cms/resources/uploads/blog/86/926f6aaba773.png'\n---\n\n\n\n\nAn API (Application Programming Interface) is an intermediary between a large dataset and the applications at user end. It provides an accessible way to request data from a dataset by URL.\n\nThere are several methods to communicate with API server, including `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD` and `OPTIONS`[^1]. Here we will focus on GET requests which is the most common and widely used methods in APIs.\n\n[^1]: https://assertible.com/blog/7-http-methods-every-web-developer-should-know-and-how-to-test-them\n\nIn R, the {`httr`} package is used to access API using URL.\n\n## `GET` data\n\nThe steps to convert retrieved API data to standard R object, include\n\n1.  determine request URL. Usually this is database specific. It requires to read database API page\n2.  construct GET URL using `paste` or `glue` string conjugation functions in R\n3.  exact raw type data and convert raw to character `rawToChar(raw_data$content)`\n4.  convert character to R objects. Depends on character format, the usual format include table (aka, separator are \\t and \\n) or [json](https://www.json.org/json-en.html). If it is json, using `jsonlite::fromJSON` to convert to `list`. If it is table, use `read.table(text = char_data)` to convert to `data.frame`.\n\nHere I used protein interaction database (STRING) as example to access API. The methods for STRING API can be found at [STING help page](https://string-db.org/help/api/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nstring_url <- 'https://string-db.org'\n\ngenelist <- c(\"PRMT5\", \"PRMT1\", \"MTAP\")\n        \nraw_data <- GET(\n        paste0(\n                string_url,\n                '/api/tsv/ppi_enrichment?identifiers=',\n                paste(genelist, collapse = \"%0d\"),\n                \"&species=9606\"\n        ) # create complete url\n)\n```\n:::\n\n\n`raw` class data is like\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 6e 75 6d 62 65 72 5f 6f 66 5f 6e 6f 64 65 73 09 6e 75 6d 62 65 72 5f 6f 66\n [26] 5f 65 64 67 65 73 09 61 76 65 72 61 67 65 5f 6e 6f 64 65 5f 64 65 67 72 65\n [51] 65 09 6c 6f 63 61 6c 5f 63 6c 75 73 74 65 72 69 6e 67 5f 63 6f 65 66 66 69\n [76] 63 69 65 6e 74 09 65 78 70 65 63 74 65 64 5f 6e 75 6d 62 65 72 5f 6f 66 5f\n[101] 65 64 67 65 73 09 70 5f 76 61 6c 75 65 0a 33 09 32 09 31 2e 33 33 09 30 2e\n[126] 36 36 37 09 30 09 30 2e 30 30 38 0a\n```\n:::\n:::\n\n\nConvert raw data to R object `data.frame`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar_data <- rawToChar(raw_data$content) # using raw_data$content exact raw type data and convert raw to character\n\nchar_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"number_of_nodes\\tnumber_of_edges\\taverage_node_degree\\tlocal_clustering_coefficient\\texpected_number_of_edges\\tp_value\\n3\\t2\\t1.33\\t0.667\\t0\\t0.008\\n\"\n```\n:::\n\n```{.r .cell-code}\nif (!grepl(\"Error|error\", char_data)) { # to filter error out\n        read.table(text = char_data, header = T)  # convert raw data into data.frame\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  number_of_nodes number_of_edges average_node_degree\n1               3               2                1.33\n  local_clustering_coefficient expected_number_of_edges p_value\n1                        0.667                        0   0.008\n```\n:::\n:::\n\n\nFor the json example, refer to Joachim Schork's blog post on time series COVID data [^2].\n\n[^2]: https://statisticsglobe.com/api-in-r\n\n## common issues\n\n### unable to get local issuer certificate\n\n> Error in curl::curl_fetch_memory(url, handle = handle) : SSL peer certificate or SSH remote key was not OK: \\[string-db.org\\] SSL certificate problem: unable to get local issuer certificate.\n\nIt is due to no libcurl or right version of libcurl in `LD_LIBRARY_PATH`. By default, LD should point to `LD_LIBRARY_PATH` then `/usr/lib:/usr/lib64`. Try `ldconfig -v | grep libcurl` or `ls /usr/lib64/libcurl*` in terminal, it points whether libcurl is available in your OS. If no found, install by `sudo yum install libcurl-devel` in RedHat7\n\nIn my case, `LD_LIBRARY_PATH` point to conda lib `/home/csu03/miniconda3/lib` which is based on Python 3.9, while OS system default Python 2.7. I solved the above issue by `export LD_LIBRARY_PATH=/usr/lib:/usr/lib64:$LD_LIBRARY_PATH` before enter R.[^3]\n\n[^3]: https://stackoverflow.com/questions/45591298/crypto-num-locks-error-occurs-due-to-two-versions-of-libcurl-on-centos-7\n\nIn the above reference, it also solve the `yum update` error like below\n\n> here was a problem importing one of the Python modules required to run yum. The error leading to this problem was:\n>\n> /usr/lib64/python2.7/site-packages/pycurl.so: undefined symbol: CRYPTO_num_locks.\n>\n> Please install a package which provides this module, or verify that the module is installed correctly.\n>\n> It's possible that the above module doesn't match the current version of Python, which is: 2.7.5 (default, Aug 13 2020, 02:51:10) \\[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)\\]\n>\n> If you cannot solve this problem yourself, please go to the yum faq at: http://yum.baseurl.org/wiki/Faq\n\n### Peer's Certificate issuer is not recognized.\n\n> Error in curl::curl_fetch_memory(url, handle = handle) : Peer certificate cannot be authenticated with given CA certificates: \\[string-db.org\\] Peer's Certificate issuer is not recognized.\n\nIt could be firewall and proxy issue. Based on this post[^4], adding following in R code\n\n[^4]: https://www.r-bloggers.com/2016/09/fixing-peer-certificate-cannot-be-authenticated/\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_config(config(ssl_verifypeer = 0L))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
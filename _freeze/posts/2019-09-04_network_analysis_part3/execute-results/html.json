{
  "hash": "01bf992103f207e5e427191f3f06c679",
  "result": {
    "markdown": "---\ntitle: \"Network visualization - Part 3\"\nauthor: \"Sckinta\"\ndate: \"2019-09-04\"\ncategories: [\"R\", \"network\", \"visualization\"]\nexecute:\n  echo: true\n  warning: false\n  message: false\n  code-overflow: wrap\nimage: \"https://raw.githubusercontent.com/thomasp85/ggraph/febab71076d7cf277cdb79b823f262b626651703/man/figures/logo.png\"\n---\n\n\n\n::: {.cell}\n\n:::\n\n\nIn the previous two posts, we discussed about IGRAPH object and how to manipulate, measure and cluster it. In this final post of network analysis series, I will focus on the network work visualization.\n\nNetwork visualization are supported by two aspects --- the aesthetics of network elements (aka, vertices and edges) and layout of network. There are multiple packages available for these aspects. I will focus on the basic igraph plot which is base R plot and the application of `ggraph` which use similar syntax comparable to ggplot2.\n\n# Aesthetics of network elements\n\nThe aesthetics of both vertices and edges can be manipulated at color, transparency. Specially for vertices, we can also manipulate its shape, size and fill. For edges, we can manipulate its width/thickness, linetype, arrow and so on. Here, use simple example \"actors\" to show you how to present aesthetics using `igraph` default plot and `ggraph`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactors <- data.frame(\n  name=c(\"Alice\", \"Bob\", \"Cecil\", \"David\",\"Esmeralda\"),\n  age=c(48,33,45,34,21),\n  gender=c(\"F\",\"M\",\"F\",\"M\",\"F\"))\nrelations <- data.frame(\n  from=c(\"Bob\", \"Cecil\", \"Cecil\", \"David\",\"David\", \"Esmeralda\"),\n  to=c(\"Alice\", \"Bob\", \"Alice\", \"Alice\", \"Bob\", \"Alice\"),\n  same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),\n  friendship=c(4,5,5,2,1,1), \n  advice=c(4,5,5,4,2,3)\n  )\ng <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)\n```\n:::\n\n\n## Vertex aesthetics\n\nSpecify aesthetics in vertex attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make female and male color different\nv = as_data_frame(g, what=\"vertice\") %>% as_tibble %>% \n  mutate(color=case_when(gender==\"F\" ~ \"red\", gender==\"M\" ~ \"blue\"))\ng = g %>% set_vertex_attr(\"color\", value=v$color)\nplot(g)\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# make age as size\nv = v %>% \n  mutate(size=case_when(age < 30 ~ 10, age < 40 & age >30 ~ 20, age > 40 ~ 30))\ng = g %>% set_vertex_attr(\"size\", value=v$size)\nplot(g)\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-2.png){width=672}\n:::\n:::\n\n\nThe methods mentioned above can also be done by specify in `plot()`. One quick example below show the shape aesthetics. Check igraph valid shape names by `names(igraph:::.igraph.shapes)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make gender as shape\nv = v %>% \n  mutate(shape=case_when(gender==\"F\" ~ \"circle\", gender==\"M\" ~ \"rectangle\"))\n\nplot(g, vertex.shape=v$shape)\nlegend('topleft',legend=unique(v$gender),pch=c(21, 22),pt.bg=c(\"red\",\"blue\"))\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph2-1.png){width=672}\n:::\n:::\n\n\nBe aware that the aesthetics specified by attributes can be overwritten by specifying in `plot()`. In addition, those aesthetics can also be used to apply to all vertices like `plot(g, vertex.shape=\"rectangle\")`. The attributes to be manipulated in igraph (using base R) are limited. To find all the plotting attributes, try `?plot.igraph` or go to https://igraph.org/r/doc/plot.common.html\n\nWe can also draw attention to certain nodes by `mark.groups` in plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mark dept\ng = g %>% set_vertex_attr(\"dept\",value=c(\"sale\",\"IT\",\"sale\",\"IT\",\"sale\")) %>% \n  set_edge_attr(\"same.dept\",value=c(F,F,T,F,T,T))\nv = as_data_frame(g, \"vertices\")\nplot(g, \n     mark.groups=list(\n       unlist(v %>% filter(dept==\"sale\") %>% select(name)),\n       unlist(v %>% filter(dept==\"IT\") %>% select(name))\n       ), \n     mark.col=c(\"#C5E5E7\",\"#ECD89A\"), mark.border=NA)\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/mark.groups-1.png){width=672}\n:::\n:::\n\n\n`ggraph` is a ggplot version of graph plotting. Using graph object as input, it can convert vertice attributes to plot attribute automatically or manually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv = v %>% \n  mutate(age_range=case_when(age < 30 ~ 20, age < 40 & age >30 ~ 30, age > 40 ~ 40))\ng = g %>% set_vertex_attr(\"age_range\", value=v$age_range)\nggraph(g, layout = \"kk\") +\n  geom_node_point(aes(size=age_range, color=gender), alpha=0.5) +\n  geom_node_text(aes(label=name)) + \n  geom_edge_link() +\n  scale_size_continuous(breaks=c(20,30,40), range = c(2, 6)) +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_ggraph-1.png){width=672}\n:::\n:::\n\n\nAlmost all the {`ggplots`} theme, scale functions are available for {`ggraph`}. Refer to [rdocumentation](https://www.rdocumentation.org/packages/ggraph/versions/1.0.2) for more details.\n\n## Edge aesthetics\n\nSimilar to vertex aesthetics, edge plotting aesthetics can be manipulated both {`igraph`} default plotting and {`ggraph`} plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use linetype present whether come from same department, and line width presents friendship\ne = as_data_frame(g, what=\"edges\") %>% as_tibble %>% \n  mutate(width=friendship) %>% \n  mutate(lty=ifelse(same.dept,1,2))\nplot(\n  g %>% set_edge_attr(\"width\",value=e$width) %>% set_edge_attr(\"lty\",value=e$lty),\n  edge.arrow.size=0.8,\n  edge.curved=T\n)\nlegend(\"topleft\", legend=unique(v$gender),pch=21,pt.bg=c(\"red\",\"blue\"), title=\"gender\", box.lty=0)\nlegend(\"left\",legend=unique(e$same.dept),lty=c(1,2), title = \"same.dept\",box.lty=0)\nlegend(\"topright\", legend=sort(unique(e$friendship)), lwd=sort(unique(e$friendship)), title=\"friendship\", box.lty=0)\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_igraph-1.png){width=672}\n:::\n:::\n\n\nUsing {`ggraph`} to show edges attribute is much easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, layout=\"kk\") +\n  geom_edge_link(aes(edge_width=friendship, edge_linetype=same.dept), arrow = arrow(angle=5, length = unit(0.3, \"inches\"))) +\n  geom_node_point(aes(color=gender), size=6) +\n  geom_node_text(aes(label=name), nudge_y = -0.1, nudge_x = -0.1) +\n  scale_edge_width(range = c(1, 2)) +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_ggraph-1.png){width=672}\n:::\n:::\n\n\n## Facet\n\nOne big advantage of {`ggraph`} is to use facet. It can be `facet_edges` or `facet_nodes` or `facet_graph`. Here I will only show example of `facet_nodes`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = g %>% set_vertex_attr(\"dept\",value=c(\"sale\",\"IT\",\"sale\",\"IT\",\"sale\")) %>% \n  set_edge_attr(\"same.dept\",value=c(F,F,T,F,T,T))\n\n#  facet based on the dept\nggraph(g, layout=\"kk\") +\n  facet_nodes(~dept, drop = F) +\n  geom_edge_link(aes(edge_width=friendship, linetype=same.dept), arrow = arrow(angle=5, length = unit(0.3, \"inches\"))) +\n  geom_node_point(aes(color=gender), size=6) +\n  geom_node_text(aes(label=name), nudge_y = -0.1, nudge_x = -0.1) +\n  scale_edge_width(range = c(1, 2))\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/facet_nodes-1.png){width=672}\n:::\n:::\n\n\n# Layout\n\nThere are many layouts available for both igraph and ggraph pacakges. Igraph provides a huge amount of layouts. https://igraph.org/r/doc/layout\\_.html\n\n-   **Standard layouts**\n    -   **bipartite**: minimize edge-crossings in a simple two-row (or column) layout for bipartite graphs.\n    -   **star**: place one node in the center and the rest equidistantly around it. `as_star()`\n    -   **circle**: place nodes in a circle in the order of their index. Consider using layout_igraph_linear with circular=TRUE for more control. `in_circle()`\n    -   **nicely**: default, tries to pick an appropriate layout. `nicely`\n    -   **dh**: uses Davidson and Harels simulated annealing algorithm to place nodes. `with_dh()`\n    -   **gem**: place nodes on the plane using the GEM force-directed layout algorithm. `with_gem`\n    -   **graphopt**: uses the Graphopt algorithm based on alternating attraction and repulsion to place nodes. `with_graphopt()`\n    -   **grid**:place nodes on a rectangular grid. `on_grid()`\n    -   **mds**: perform a multidimensional scaling of nodes using either the shortest path or a user supplied distance. `with_mds()`\n    -   **sphere**: place nodes uniformly on a sphere - less relevant for 2D visualizations of networks. `with_sphere()`\n    -   **randomly**: places nodes uniformly random. `randomly`\n    -   **fr**: places nodes according to the force-directed algorithm of Fruchterman and Reingold. `with_fr()`\n    -   **kk**: uses the spring-based algorithm by Kamada and Kawai to place nodes. `with_kk()`\n    -   **drl**: uses the force directed algorithm from the DrL toolbox to place nodes. `with_drl()`\n    -   **lgl**: uses the algorithm from Large Graph Layout to place nodes. See with_lgl `with_lgl()`\n-   **Hierarchical layouts**\n    -   **tree**: uses the Reingold-Tilford algorithm to place the nodes below their parent with the parent centered above its children. `as_tree()`\n    -   **sugiyama**: designed for directed acyclic graphs (that is, hierarchies where multiple parents are allowed) it minimizes the number of crossing edges.\n\nHere we are going to show an example how to switch standard layout using the same data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,3))\n# star layout -- help determine center\ncoords <- layout_(g, as_star())\nplot(g, layout = coords, edge.arrow.size=0.4)\ntitle(\"start\")\n\n# circle layout\ncoords <- layout_(g, in_circle())\nplot(g, layout = coords, edge.arrow.size=0.4)\ntitle(\"circle\")\n\n# grid\ncoords <- layout_(g, on_grid())\nplot(g, layout = coords, edge.arrow.size=0.4)\ntitle(\"grid\")\n\n# nicely\ncoords <- layout_(g, nicely())\nplot(g, layout = coords, edge.arrow.size=0.4)\ntitle(\"nicely\")\n\n# kk\ncoords <- layout_(g, with_kk())\nplot(g, layout = coords, edge.arrow.size=0.4)\ntitle(\"Kamada and Kawai(kk)\")\n\n# fr\ncoords <- layout_(g, with_fr())\nplot(g, layout = coords, edge.arrow.size=0.4)\ntitle(\"force-directed(fr)\")\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/layout_igraph-1.png){width=672}\n:::\n:::\n\n\nHierarchical layouts can plot data in layer. Here show example how to use sugiyama layout\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make different dept nodes at different node\ng = g %>% set_vertex_attr(\"dept\",value=c(\"sale\",\"IT\",\"sale\",\"IT\",\"sale\")) %>% \n  set_edge_attr(\"same.dept\",value=c(F,F,T,F,T,T))\n\nv = as_data_frame(g, \"vertices\") %>% as_tibble %>% \n  mutate(layer=ifelse(dept==\"sale\",1,2))\n\ne = as_data_frame(g, what=\"edges\") %>% as_tibble %>% \n  mutate(width=friendship) %>% \n  mutate(lty=ifelse(same.dept,1,2))\n\ng = g %>% set_edge_attr(\"width\",value=e$width) %>% set_edge_attr(\"lty\",value=e$lty)\n\nlay1 <-  layout_with_sugiyama(g, layers=v$layer, attributes=\"all\")\n\nplot(lay1$extd_graph, edge.curved=T)\nlegend(\"topleft\", legend=unique(v$gender),pch=21,pt.bg=c(\"red\",\"blue\"), title=\"gender\", box.lty=0)\nlegend(\"left\",legend=unique(e$same.dept),lty=c(1,2), title = \"same.dept\",box.lty=0)\nlegend(\"topright\", legend=sort(unique(e$friendship)), lwd=sort(unique(e$friendship)), title=\"friendship\", box.lty=0)\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/sugiyama_layout-1.png){width=672}\n:::\n:::\n\n\n`ggraph` can use all the layout mentioned above by specifying it in `ggraph(g, layout=...)`. Besides, ggraph has addtional useful layout.\n\n-   dendrogram: dendrogram layout not only take in graph object but also dendrogram object (`as.dendrogram(hclust(dist(...)))`). ggraph will automatically convert dendrogram to igraph by `den_to_igraph`. It ususally plots using `geom_edge_diagonal()` or `geom_edge_elbow()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nden <- as.dendrogram(hclust(dist(mtcars)))\np1 = ggraph(den, 'dendrogram') + \n    geom_edge_diagonal() +\n    geom_node_text(aes(label=label), angle=90, nudge_y=-30, size=3) +\n  theme_void()\np2 = ggraph(den, 'dendrogram', circular = TRUE) + \n    geom_edge_elbow() +\n    geom_node_text(aes(label=label), angle=45, size=2) +\n  coord_fixed()+\n  theme_void()\ngrid.arrange(p1,p2,ncol=2)\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/dendrogram-1.png){width=672}\n:::\n:::\n\n\n-   hive: make nodes group into a axis and connecting axis instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(g)$age_range = factor(V(g)$age_range)\n\nggraph(g, 'hive', axis = age_range, sort.by = age) + \n    geom_edge_hive(aes(color = factor(same.dept), edge_width=friendship)) + \n    geom_axis_hive(aes(color = age_range), size = 3, label = FALSE) + \n    coord_fixed() +\n  scale_edge_width(range=c(1,3))\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/hive-1.png){width=672}\n:::\n:::\n\n\n-   linear: make nodes only the same line so that arc connections were made\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(g, layout = 'linear', sort.by = age) + \n    geom_edge_arc(aes(colour = factor(same.dept), edge_alpha=friendship)) +\n  geom_node_point(aes(color=gender), size=4, alpha=0.5) +\n  geom_node_text(aes(label=name), angle=45) +\n  theme_void() +\n  scale_edge_alpha(range=c(0.3,1))\n```\n\n::: {.cell-output-display}\n![](2019-09-04_network_analysis_part3_files/figure-html/linear_arc-1.png){width=672}\n:::\n:::\n\n\nMore functions about ggraph refer to https://www.rdocumentation.org/packages/ggraph/versions/1.0.2\n\n# other packages for graph visualization\n\nThere are many other packages available for graph visualization and network analysis. In this series, I will only list the link here for the further reference. I may come back to further this topic in the future when necessary.\n\n**Network analysis tool**: Statnet[^1]  \n\n\n\n**Network visualization**: ggnet[^2] \n\n**Interactive network** :\n\n- visNetwork[^3]\n\n- jstree[^4]\n\n- Ndtv[^5]\n\n[^1]:  https://statnet.org/trac/wiki\n\n[^2]: https://briatte.github.io/ggnet/\n\n[^3]: https://datastorm-open.github.io/visNetwork/\n\n[^4]: https://bwlewis.github.io/rthreejs/\n\n[^5]: http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html",
    "supporting": [
      "2019-09-04_network_analysis_part3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
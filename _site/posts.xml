<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Learning with sckinta</title>
<link>https://learniningwithsckinta.netlify.app/posts.html</link>
<atom:link href="https://learniningwithsckinta.netlify.app/posts.xml" rel="self" type="application/rss+xml"/>
<description>This is Chun Su's personal blog</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Mon, 28 Feb 2022 05:00:00 GMT</lastBuildDate>
<item>
  <title>Interpreting the coefficients of Generalized Linear Model</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</link>
  <description><![CDATA[ 



<p>Linear model is the most popular model used in various of fields, due to its simple execution and interpretation. It can be not only used to predict like all other machine learning models. but also widely used for statistical inference due to its simplicity.</p>
<p><a href="https://en.wikipedia.org/wiki/Generalized_linear_model">Generalized Linear Model (GLM)</a>, as named indicated, is generalized from linear regression model, and extends linear model default assumptions to include outcome variables following exponential family distribution. It used <a href="https://www.statisticshowto.com/link-function/#:~:text=A%20link%20function%20in%20a,variable%20in%20a%20linear%20way.">link function</a> to transform the outcome so that the transformed Y can be represented by linear combination of predictors. Due to this transformation, it makes coefficients interpretation a little confusing. In this blog, I will use four classical examples (<code>Boston</code>, <code>Default</code>, <code>BrainCancer</code>, and <code>Bikeshare</code> from <a href="https://cran.r-project.org/web/packages/ISLR2/ISLR2.pdf"><code>ISLR2</code></a> package) to illustrate how to interpret the coefficients of GLM from <code>tidymodels</code> fit tidy outcome in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ISLR2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<section id="linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression">Linear regression</h2>
<p>Modeling linear regression in R is simple. The following example used <code>dis</code> (weighted mean of distances to five Boston employment centers) as single predictor to predict <code>medv</code> (median value of house in $1000s) in Boston.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(Boston)</span>
<span id="cb2-2">lm_m1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis, <span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">summary</span>(lm_m1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = medv ~ dis, data = Boston)

Residuals:
    Min      1Q  Median      3Q     Max 
-15.016  -5.556  -1.865   2.288  30.377 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  18.3901     0.8174  22.499  &lt; 2e-16 ***
dis           1.0916     0.1884   5.795 1.21e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 8.914 on 504 degrees of freedom
Multiple R-squared:  0.06246,   Adjusted R-squared:  0.0606 
F-statistic: 33.58 on 1 and 504 DF,  p-value: 1.207e-08</code></pre>
</div>
</div>
<p>Based on coefficients summary, <code>dis</code> is significantly (p-value = 1.21e-08) positively correlated with <code>medv</code>. With 1 unit increase in term of distances to Boston employment centers, the median value of house increase $1091.6 = 1.0916 * 1000.</p>
<section id="multivariate-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="multivariate-linear-regression">Multivariate linear regression</h3>
<p>In multivariate linear regression, when we interpret the coefficients, there are two components taken into account - whether the variables are independent - how to interpret the interaction term</p>
<p>In the following example, we model the <code>medv</code> with <code>dis</code> (weighted mean of distances to five Boston employment centers), <code>rm</code> (average number of rooms per dwelling), <code>crim</code> (per capita crime rate by town) and <code>chas</code> (tract bounds river).</p>
<p>For practice purpose, I will use <code>tidymodels</code> to build linear model in the multivariate linear regression example.</p>
<section id="no-interaction-term" class="level4">
<h4 class="anchored" data-anchor-id="no-interaction-term">No interaction term</h4>
<p>We starts with no interactions among the predictors.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_spec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">lm_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis <span class="sc" style="color: #5E5E5E;">+</span> rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb4-8"></span>
<span id="cb4-9">lm_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb4-11"></span>
<span id="cb4-12"></span>
<span id="cb4-13">lm_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)  -29.1      2.57      -11.3  1.20e-26
2 dis            0.201    0.144       1.40 1.62e- 1
3 rm             8.19     0.406      20.2  9.12e-67
4 crim          -0.243    0.0350     -6.94 1.19e-11
5 chas           3.98     1.10        3.63 3.10e- 4</code></pre>
</div>
</div>
<p>In this model, all predictors except <code>dis</code> show significant correlation with <code>medv</code> (p-value &lt; 0.05). <code>rm</code> and <code>chas</code> are positively while <code>crim</code> is negatively associated with <code>medv</code>. - <code>rm</code>: <strong>when keeping all other variables the same</strong>, increase 1 room per dwelling on average results in $8,194.4 (<code>8.1944 * 1000</code>) increase in median house value. - <code>chas</code>: <strong>when keeping all other variables the same</strong>, having tracts bounds to the Charles river increase median house value $3,982.5 (<code>3.9825 * 1000</code>). <code>chas</code> is a dummy variable where = 1 if tract bounds river and =0 otherwise. Thus =0 (tract do not bound to river) is a baseline here. We will discuss more about baseline in later example. - <code>crim</code>: <strong>when keeping all other variables the same</strong>, 1 unit increase in per capita crime rate will result a decrease of $243.2 (<code>-0.24318 * 1000</code>) in median house value.</p>
</section>
</section>
<section id="with-interaction-term" class="level3">
<h3 class="anchored" data-anchor-id="with-interaction-term">With interaction term</h3>
<p>Based on common sense, usually the house is smaller when it is closer to city center. Adding interaction term between <code>rm</code> and <code>dis</code> we assumed that the number of room and the distance to business center are not independent. We are testing the hypothesis that the linear relationship between <code>dis</code> and <code>medv</code> was affected by the the <code>rm</code>. This affect can be linear or non-linear, can be negative or positive.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(rm)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">geom_histogram</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean number of room per dwelling'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rm =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(rm)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>dis, <span class="at" style="color: #657422;">y=</span>medv, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(rm))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="at" style="color: #657422;">se =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean of distances to five Boston employment centers'</span>, <span class="at" style="color: #657422;">y=</span> <span class="st" style="color: #20794D;">'median value of owner-occupied homes'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"mean number of room per dwelling"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'bottom'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Thus, we added interaction term between <code>dis</code> and <code>rm</code>. The thumb of rule to use interaction term is hierarchical principle, which means, if we include an interaction in a model, we should also include the main effects, even if the p-values associated with main effect coefficients are not significant. Thus we should always use <code>*</code> instead of <code>:</code> when adding the interaction term. <code>dis*rm</code> means <code>dis + rm + dis:rm</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">lm_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis<span class="sc" style="color: #5E5E5E;">*</span>rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb10-4"></span>
<span id="cb10-5">lm_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb10-7"></span>
<span id="cb10-8"></span>
<span id="cb10-9">lm_fit3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)   -5.03     4.70       -1.07 2.85e- 1
2 dis           -7.43     1.27       -5.84 9.30e- 9
3 rm             4.38     0.744       5.89 7.11e- 9
4 crim          -0.270    0.0341     -7.90 1.80e-14
5 chas           3.99     1.06        3.77 1.83e- 4
6 `dis:rm`       1.20     0.198       6.04 3.08e- 9</code></pre>
</div>
</div>
<p>In this example, all predictors including interaction terms are significant. Interestingly, by adding the interaction between <code>dis</code> and <code>rm</code>, the coefficients associated with <code>dis</code> turn negative from positive when using simple single variable model. To interpret the interaction term,</p>
<ul>
<li><code>dis:rm</code>: since interaction term is significant (p-value = 3.077938e-09), thus linear relationship between <code>dis</code> and <code>medv</code> was significantly dependent on the <code>rm</code>, justifying the inclusion of the interaction term in the model.</li>
<li><code>dis</code>: when there are 3 ~ 6 rooms in dwelling, one unit further away from five Boston employment centers, it results in $3,835 to $244 (<code>(-7.426 + range(3,6) * 1.197) * 1000</code>) decrease in median value of house. when there are more than 6 (<code>7.426/1.197</code>) rooms in dwelling, one unit further away from five Boston employment centers, it results in at least $953 (<code>(-7.426 + 7 * 1.197) * 1000</code>) increase in median value of house.</li>
<li><code>rm</code>: <em>keeping the mean distance to five Boston employment centers as constant <code>dis</code></em>, one more room in dwelling will increase <code>1000 * (1.197 * dis + 4.380)</code> in the median value of house. Because the interaction term is positive (<code>1.197</code>), the rate of <code>medv</code> increase in terms of the room number will increase when it is further away from Boston employment centers.</li>
</ul>
<section id="when-to-use-interaction-term" class="level5">
<h5 class="anchored" data-anchor-id="when-to-use-interaction-term">When to use interaction term</h5>
<p>The frequently asked question about interaction term is “when should we include interaction term”. The conventional answer is when two predictors are not independent. However, in reality, unless we have very strong prior knowledge about the predictors, it is hard to determine whether two predictors are dependent or not without exploring the data. From the articles/blogs about interaction term I read so far, two methods are generally used to determine whether add interaction term</p>
<ol type="1">
<li><p>try both with and without adding interaction term, if adding interaction term results in significance on interaction term, then use interaction term.</p></li>
<li><p>like what I did above, plot Y against X1 with X2 as nominal variable (if X2 is not nominal variable itself). If the lines from different X2 levels are parallel, then X1 and X2 are independent and no interaction terms are needed. Otherwise, add interaction term.</p></li>
</ol>
</section>
</section>
</section>
<section id="logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="logistic-regression">Logistic regression</h2>
<p>In the regular linear regression mentioned above, the Y is numeric (aka. quantitative). However, when Y is nominal (aka, qualitative), logistic regression will be used. To make Y still represented by linear combination of predictors, we used logit function (link function) to transform Y (the probability) to <img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)"> (the log odds).</p>
<p><img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)%20=%20%5Csum%5Cbeta%20X"> <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> represents log odds ratio. thus, odds ratio <img src="https://latex.codecogs.com/png.latex?OR%20=%20e%5E%5Cbeta">.</p>
<section id="when-y-is-binomial" class="level3">
<h3 class="anchored" data-anchor-id="when-y-is-binomial">When Y is binomial</h3>
<p>To evaluate whether a customer will default the credit card <code>default</code>, we build a logistic model with three predictors – whether the customer is a <code>student</code>, the <code>balance</code> on the account and the customer <code>income</code>.</p>
<p>Again, for practice purpose, I used <code>tidymodels</code> syntax for demonstration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"Default"</span>)</span>
<span id="cb12-2">lr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6">default_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">add_formula</span>(default <span class="sc" style="color: #5E5E5E;">~</span> .)</span>
<span id="cb12-9"></span>
<span id="cb12-10">default_fit <span class="ot" style="color: #003B4F;">&lt;-</span> default_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-11">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Default)</span>
<span id="cb12-12"></span>
<span id="cb12-13">default_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
  term            estimate  std.error statistic   p.value
  &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept) -10.9        0.492        -22.1   4.91e-108
2 studentYes   -0.647      0.236         -2.74  6.19e-  3
3 balance       0.00574    0.000232      24.7   4.22e-135
4 income        0.00000303 0.00000820     0.370 7.12e-  1</code></pre>
</div>
</div>
<p>In this model, two predictors (<code>student</code> and <code>balance</code>) are significantly associated with <code>default</code>. To interpret coefficients, we first need to know which is the baseline of <code>default</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Default<span class="sc" style="color: #5E5E5E;">$</span>default)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>    Yes
No    0
Yes   1</code></pre>
</div>
</div>
<p>Based on the <code>contrasts</code> output, the baseline of <code>default</code> is <code>No</code>. Thus,</p>
<ul>
<li><p><code>student</code>: <strong>When keeping all other variable constant</strong>, compared to non-student (<code>student = 0</code>), a student (<code>student = 1</code>) is less likely to default credit card. The odds ratio is 0.524 (<code>exp(-6.467758e-01)</code>). In other words, if the odds of defaulting credit card as non-student is 1, the odds of defaulting credit card as a student is 0.524 (<code>exp(-6.467758e-01)</code>).</p></li>
<li><p><code>balance</code>: <strong>When keeping all other variable constant</strong>, 1 dollar increase in account balance will result in increasing odds of 1.005 (<code>exp(5.736505e-03)</code>) to default credit card.</p></li>
</ul>
<p>Note: above modeling is a bad model since there are high correlation between the predictors (<a href="https://www.britannica.com/topic/collinearity-statistics">collinearity</a>). I just used it as an example to interpret the coefficients.</p>
</section>
<section id="multinominal-predictors" class="level3">
<h3 class="anchored" data-anchor-id="multinominal-predictors">Multinominal predictors</h3>
<p>Using multi-nominal predictor <code>diagnosis</code> and other predictors like <code>sex</code> and age <code>time</code> to predict whether the patient survived the brain cancer or not <code>status</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'BrainCancer'</span>)</span>
<span id="cb16-2">BrainCancer <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;">contrasts</span>(BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>           LG glioma HG glioma Other
Meningioma         0         0     0
LG glioma          1         0     0
HG glioma          0         1     0
Other              0         0     1</code></pre>
</div>
</div>
<p>In this example, <code>Meningioma</code> is the baseline for multi-nominal predictor <code>diagnosis</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">BrainCancer_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb18-4">    </span>
<span id="cb18-5">BrainCancer_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec)</span>
<span id="cb18-8"></span>
<span id="cb18-9">BrainCancer_fit <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb18-11"></span>
<span id="cb18-12">BrainCancer_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-13">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term                estimate std.error statistic p.value
   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)           3.56      2.57       1.39  0.166  
 2 sexMale               0.369     0.576      0.640 0.522  
 3 locSupratentorial     1.09      0.901      1.21  0.227  
 4 ki                   -0.0695    0.0326    -2.13  0.0332 
 5 gtv                   0.0382    0.0366     1.04  0.296  
 6 stereoSRT             0.253     0.771      0.328 0.743  
 7 time                 -0.0339    0.0155    -2.18  0.0291 
 8 diagnosis_LG.glioma   1.31      0.844      1.55  0.122  
 9 diagnosis_HG.glioma   2.37      0.778      3.05  0.00231
10 diagnosis_Other       0.765     0.940      0.814 0.416  </code></pre>
</div>
</div>
<p>For multi-nominal predictor <code>diagnosis</code>, the levels (<code>LG glioma</code>, <code>HG glioma</code> and <code>Other</code>) are compared to the baseline <code>Meningioma</code>, and it ends with three terms for coefficient estimation.</p>
<p>Based on above model, only <code>HG glioma</code> show significant association with survival (p-value &lt; 0.05) when choose <code>Meningioma</code> as baseline. <strong>When keeping all other variable constant</strong>, compare to <code>Meningioma</code>, the patient with <code>HG glioma</code> are 10 times more (<code>exp(2.37027243)</code>) likely to survive. If we want to compare <code>HG glioma</code> with <code>Other</code> cancer type, simply use <code>exp(2.37027243-0.76482440)</code> to get odds ratio between <code>HG glioma</code> and <code>Other</code>, in which compare to <code>Other</code>, the patient with <code>HG glioma</code> are 5 times more (<code>exp(2.37027243-0.76482440)</code>) likely to survive. However, in this case, we do not know whether this comparison is statistically significant. We can get p-value for this comparison by switching <code>Other</code> as baseline.</p>
</section>
<section id="contrasts-matrix" class="level3">
<h3 class="anchored" data-anchor-id="contrasts-matrix">Contrasts matrix</h3>
<p>Another baseline assignment is using the global average as baseline. To do that, we need to change the <code>contrasts</code> matrix. The following code replace the default contrasts <code>contr.treatment</code> with <code>contr.sum</code> on <code>globalOptions</code>, then use <code>step_dummy</code> from <code>recipe</code> to realize it</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">BrainCancer_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_LG.glioma diagnosis_HG.glioma diagnosis_Other diagnosis_orginal
                &lt;dbl&gt;               &lt;dbl&gt;           &lt;dbl&gt; &lt;fct&gt;            
1                   0                   0               0 Meningioma       
2                   0                   1               0 HG glioma        
3                   1                   0               0 LG glioma        
4                   0                   0               1 Other            </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">contr_opt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"contrasts"</span>)</span>
<span id="cb22-2">contr_opt</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>        unordered           ordered 
"contr.treatment"      "contr.poly" </code></pre>
</div>
</div>
<p>The original baseline is <code>Meningioma</code>, each <code>diagnosis_</code> is compared to the <code>Meningioma</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">contr_sum_opt <span class="ot" style="color: #003B4F;">&lt;-</span> contr_opt</span>
<span id="cb24-2">contr_sum_opt[<span class="st" style="color: #20794D;">'unordered'</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'contr.sum'</span></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_sum_opt)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># my_naming &lt;- function(var, lvl, ordinal = FALSE, sep = "_"){</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;">#     paste(var, levels(BrainCancer$diagnosis)[lvl])</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;"># }</span></span>
<span id="cb24-8"></span>
<span id="cb24-9">BrainCancer_rec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-11">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb24-12">    </span>
<span id="cb24-13">BrainCancer_rec2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-17">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_X1 diagnosis_X2 diagnosis_X3 diagnosis_orginal
         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt; &lt;fct&gt;            
1            1            0            0 Meningioma       
2            0            0            1 HG glioma        
3            0            1            0 LG glioma        
4           -1           -1           -1 Other            </code></pre>
</div>
</div>
<p>Thus <code>diagnosis_X1</code>, <code>diagnosis_X2</code> and <code>diagnosis_X3</code> now represents <code>Meningioma</code>, <code>HG glioma</code> and <code>LG glioma</code> compared to average baseline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">BrainCancer_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec)</span>
<span id="cb26-4"></span>
<span id="cb26-5">BrainCancer_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb26-7"></span>
<span id="cb26-8">BrainCancer_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-9">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term         estimate std.error statistic p.value
   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)    5.52      2.66       2.07   0.0380
 2 sex1          -0.184     0.288     -0.640  0.522 
 3 loc1          -0.545     0.451     -1.21   0.227 
 4 ki            -0.0695    0.0326    -2.13   0.0332
 5 gtv            0.0382    0.0366     1.04   0.296 
 6 stereo1       -0.127     0.386     -0.328  0.743 
 7 time          -0.0339    0.0155    -2.18   0.0291
 8 diagnosis_X1  -1.11      0.468     -2.37   0.0177
 9 diagnosis_X2   0.195     0.594      0.329  0.742 
10 diagnosis_X3   1.26      0.542      2.33   0.0200</code></pre>
</div>
</div>
<p>Based on the newly trained model <code>BrainCancer_fit2</code>, only <code>Meningioma</code> and <code>LG glioma</code> show significant association with survival (p-value &lt; 0.05) when compared to global average. <strong>When keeping all other variable constant</strong>, <strong>compare to global average</strong>, the patient with <code>Meningioma</code> has only 32.9% (<code>exp(-1.11018843)</code>) average survive rate, while the patient with <code>LG glioma</code> are 3.5 times (<code>exp(1.26008400)</code>) more likely to survive.</p>
<p>More about coding contrasts in base R syntax can be found at this <a href="https://marissabarlaz.github.io/portfolio/contrastcoding/">article</a>.</p>
</section>
<section id="multinomial-outcome" class="level3">
<h3 class="anchored" data-anchor-id="multinomial-outcome">Multinomial outcome</h3>
<p>Using the same dataset <code>BrainCancer</code>, now I try to predict the <code>diagnosis</code> based on the tumor location (<code>loc</code>), Karnofsky index (<code>ki</code>), Gross tumor volume (<code>gtv</code>) and Stereotactic method (<code>stereo</code>). Here we used <code>multinom_reg()</code> to model multinomial regression</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_opt) <span class="co" style="color: #5E5E5E;"># reset contrasts options back to `contr.treatment`</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">ml_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">multinom_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'nnet'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-5">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb28-6"></span>
<span id="cb28-7">BrainCancer_rec3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(diagnosis <span class="sc" style="color: #5E5E5E;">~</span> loc <span class="sc" style="color: #5E5E5E;">+</span> ki <span class="sc" style="color: #5E5E5E;">+</span> gtv <span class="sc" style="color: #5E5E5E;">+</span> stereo, <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-8">    <span class="fu" style="color: #4758AB;">update_role</span>(diagnosis, <span class="at" style="color: #657422;">new_role =</span> <span class="st" style="color: #20794D;">'outcome'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-9">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-10">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span>
<span id="cb28-11"></span>
<span id="cb28-12">BrainCancer_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-13">    <span class="fu" style="color: #4758AB;">add_model</span>(ml_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-14">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec3)</span>
<span id="cb28-15"></span>
<span id="cb28-16">BrainCancer_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-17">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb28-18"></span>
<span id="cb28-19">BrainCancer_fit3</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: multinom_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
2 Recipe Steps

• step_normalize()
• step_dummy()

── Model ───────────────────────────────────────────────────────────────────────
Call:
nnet::multinom(formula = ..y ~ ., data = data, trace = FALSE)

Coefficients:
          (Intercept)          ki         gtv loc_Supratentorial stereo_SRT
LG glioma  -2.3035689  0.23860763 -0.02596393          0.3998414  0.5444269
HG glioma  -2.5894735  0.03684929  0.15897113          0.9417737  1.3658683
Other      -0.4158848 -0.29780559  0.14203552         -2.7892771  1.4289732

Residual Deviance: 187.5196 
AIC: 217.5196 </code></pre>
</div>
</div>
<p>In the multinomial regression, no p-value were reported. The coefficients represent log odds ratio.</p>
<p>Each row in the coefficient table corresponds to the model equation. eg. the first row represents the coefficients for <code>LG glioma</code> in comparison to our baseline <code>Meningioma</code>. Each column in the coefficient table corresponds to specific coefficient estimate. Thus, compared to <code>Meningioma</code>, using <code>SRT</code> Stereotactic method is about 4 times (<code>exp(1.3658683)</code>) more likely diagnose <code>HG glioma</code>. A tumor is only 6% (<code>exp(-2.7892771)</code>) chance to be diagnosed as <code>Other</code> instead of <code>Meningioma</code> if it is located at <code>Supratentorial</code> area.</p>
<p>To perform above model in base R syntax, please refer to the <a href="https://datasciencebeginners.com/2018/12/20/multinomial-logistic-regression-using-r/#:~:text=Multinomial%20regression%20is%20an%20extension,one%20or%20more%20independent%20variable.">blog post</a> by Mohit Sharma.</p>
</section>
</section>
<section id="poisson-regression" class="level2">
<h2 class="anchored" data-anchor-id="poisson-regression">Poisson regression</h2>
<p>Poisson regression is used to model count outcome. Unlike regular linear regression, count outcome is not real continuous variable. Instead, it must be positive integer and usually modeled by Poisson distribution rather than normal distribution.</p>
<p>The link function for Poisson regression is log function <img src="https://latex.codecogs.com/png.latex?%5Cln%5Clambda"> where <img src="https://latex.codecogs.com/png.latex?%5Clambda"> represents the mean of outcome.</p>
<p>In the following example, we use <code>Bikeshare</code> data to predict <code>bikers</code> outcome which represents the <em>count</em> of rental bikers</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'Bikeshare'</span>)</span>
<span id="cb30-2"></span>
<span id="cb30-3">Bikeshare_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(bikers <span class="sc" style="color: #5E5E5E;">~</span> season <span class="sc" style="color: #5E5E5E;">+</span> weekday <span class="sc" style="color: #5E5E5E;">+</span> weathersit <span class="sc" style="color: #5E5E5E;">+</span> temp <span class="sc" style="color: #5E5E5E;">+</span> hum <span class="sc" style="color: #5E5E5E;">+</span> windspeed, <span class="at" style="color: #657422;">data =</span> Bikeshare) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(season, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"winter"</span>,<span class="st" style="color: #20794D;">'spring'</span>,<span class="st" style="color: #20794D;">'summer'</span>,<span class="st" style="color: #20794D;">'fall'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(weekday, <span class="at" style="color: #657422;">transform =</span> <span class="cf" style="color: #003B4F;">function</span>(x) {x<span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>}, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'sunday'</span>,<span class="st" style="color: #20794D;">'monday'</span>,<span class="st" style="color: #20794D;">'tuesday'</span>,<span class="st" style="color: #20794D;">'wednesday'</span>,<span class="st" style="color: #20794D;">'thursday'</span>,<span class="st" style="color: #20794D;">'friday'</span>,<span class="st" style="color: #20794D;">'saturday'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-6">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-8">    <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;"># Bikeshare_rec %&gt;% prep() %&gt;% bake(new_data = NULL)</span></span>
<span id="cb30-11"><span class="fu" style="color: #4758AB;">library</span>(poissonreg)</span>
<span id="cb30-12">pr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">poisson_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-13">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-14">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb30-15"></span>
<span id="cb30-16">Bikeshare_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-17">    <span class="fu" style="color: #4758AB;">add_recipe</span>(Bikeshare_rec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-18">    <span class="fu" style="color: #4758AB;">add_model</span>(pr_spec)</span>
<span id="cb30-19"></span>
<span id="cb30-20">Bikeshare_fit <span class="ot" style="color: #003B4F;">&lt;-</span> Bikeshare_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-21">     parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fit</span>(Bikeshare)</span>
<span id="cb30-22"></span>
<span id="cb30-23">Bikeshare_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-24">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 16 × 5
   term                       estimate std.error statistic   p.value
   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1 (Intercept)                  4.58    0.00385   1191.    0        
 2 temp                         0.426   0.00149    285.    0        
 3 hum                         -0.256   0.00108   -238.    0        
 4 windspeed                    0.0404  0.000949    42.6   0        
 5 season_spring                0.302   0.00384     78.7   0        
 6 season_summer                0.144   0.00449     32.1   1.12e-226
 7 season_fall                  0.613   0.00345    177.    0        
 8 weekday_monday              -0.0464  0.00336    -13.8   1.82e- 43
 9 weekday_tuesday             -0.0405  0.00336    -12.1   1.42e- 33
10 weekday_wednesday           -0.0524  0.00342    -15.3   4.88e- 53
11 weekday_thursday            -0.0804  0.00339    -23.7   2.70e-124
12 weekday_friday              -0.0151  0.00335     -4.51  6.47e-  6
13 weekday_saturday            -0.0187  0.00336     -5.58  2.36e-  8
14 weathersit_cloudy.misty      0.106   0.00223     47.4   0        
15 weathersit_light.rain.snow  -0.163   0.00425    -38.4   0        
16 weathersit_heavy.rain.snow  -0.0368  0.167       -0.221 8.25e-  1</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Bikeshare<span class="sc" style="color: #5E5E5E;">$</span>weathersit)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                cloudy/misty light rain/snow heavy rain/snow
clear                      0               0               0
cloudy/misty               1               0               0
light rain/snow            0               1               0
heavy rain/snow            0               0               1</code></pre>
</div>
</div>
<p>All terms except <code>weathersit_heavy.rain.snow</code> are significantly associated with rental bikers number. - when keeping all other variables constant, compared to <code>season_winter</code>, <code>season_spring</code> will increase the mean of rental biker count by 1.35 <code>exp(0.30234965)</code>. In other words, there will be 135% bikers rental a bike in spring than winter. - when keeping all other variables constant, every unit increase in temperature will result in on average 1.53 (<code>exp(0.42588059)</code>) rental biker customer.</p>
<p><em>note:above model is not optimal model to predict rental bikers. We use the model without interactions to simplify the question and emphasize interpretation of coefficients in the context of poisson regression . To interpret the coefficients with interaction term, refer to previous regular linear regression example</em></p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, I focus on interpret the coefficients in three GLM, and show the examples of coefficients associated with both quantitative and qualitative predictors. I also include the examples to interpret coefficients when 1) add interaction term, 2) with multi-nominal outcome and 3) with alternative contrast matrix.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>GLM</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</guid>
  <pubDate>Mon, 28 Feb 2022 05:00:00 GMT</pubDate>
  <media:content url="https://thumbs.dreamstime.com/b/cartoon-cottage-seamless-pattern-hand-drawn-home-facade-street-townhouse-family-house-countryside-urban-border-decor-202493554.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict chocolate rating with xgboost</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># library(lubridate)</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<section id="clean-data" class="level2">
<h2 class="anchored" data-anchor-id="clean-data">Clean Data</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>chocolate</span>
<span id="cb2-2">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cocoa_percent =</span> <span class="fu" style="color: #4758AB;">parse_number</span>(cocoa_percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">separate</span>(ingredients, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ingredient_num"</span>,<span class="st" style="color: #20794D;">"ingredients"</span>), <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"-"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-6">        <span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">parse_number</span>(ingredient_num),</span>
<span id="cb2-7">        <span class="at" style="color: #657422;">ingredients=</span><span class="fu" style="color: #4758AB;">str_trim</span>(ingredients)</span>
<span id="cb2-8">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">map</span>(ingredients, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x,<span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-11">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_trim</span>(.x))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># select(cocoa_percent, ingredient_num, ingredients, most_memorable_characteristics) %&gt;%</span></span>
<span id="cb2-13">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert gredients to boolean columns</li>
</ul>
<p>using <code>unnest</code> to spread out the list column <code>ingredients</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">gredients <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, ingredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>ingredients, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="st" style="color: #20794D;">"NA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-8">    janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert most_memorable_characteristics to boolean columns</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(most_memorable_characteristics)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># distinct(most_memorable_characteristics) %&gt;% </span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;"># pivot_wider(names_from=most_memorable_characteristics, values_from=tmp) %&gt;% </span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<p>There are 972 most_memorable_characteristics in total</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># mutate(most_memorable_characteristics = fct_lump_min(most_memorable_characteristics, min=100)) %&gt;% </span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">group_by</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort=</span>T) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">20</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>n, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics,n))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>n), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">hjust=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"# of chocolates"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most memorable characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Pick top 12 most_memorable_characteristics to convert to boolean column</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics =</span> <span class="fu" style="color: #4758AB;">fct_lump_min</span>(most_memorable_characteristics, <span class="at" style="color: #657422;">min=</span><span class="dv" style="color: #AD0000;">100</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>most_memorable_characteristics, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x))</span></code></pre></div>
</details>
</div>
<ul>
<li>create chocolate_clean data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb7-2">    chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n=</span><span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>ingredients, <span class="sc" style="color: #5E5E5E;">-</span>most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">left_join</span>(gredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">left_join</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
</section>
<section id="explore-data" class="level2">
<h2 class="anchored" data-anchor-id="explore-data">Explore Data</h2>
<p>Several features are explored in terms of their association with rating.</p>
<ul>
<li><code>country_of_bean_origin</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(country_of_bean_origin, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">10</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Blend and non-blend on <code>country_of_bean_origin</code> shows big difference, thus we convert <code>country_of_bean_origin</code> to <code>country_of_bean_origin_blend</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin_blend =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(country_of_bean_origin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Blend"</span>, country_of_bean_origin, <span class="st" style="color: #20794D;">"Non-blend"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li><code>company_manufacturer</code> and <code>company_location</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_manufacturer =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_manufacturer, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.01</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_manufacturer, rating, median))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_manufacturer)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_manufacturer"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_location =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_location, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_location, rating))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_location)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_location"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>cocoa_percent</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>rating</code> is not as continuous as what i originally imagined. Thus, I convert <code>rating</code> to nominal variable <code>rating_bl</code> using 3 as threshold</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rating_bl =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(rating <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">"&gt;=3"</span>, <span class="st" style="color: #20794D;">"&lt; 3"</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">group_by</span>(rating_bl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">count</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
# Groups:   rating_bl [2]
  rating_bl     n
  &lt;chr&gt;     &lt;int&gt;
1 &lt; 3         566
2 &gt;=3        1964</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating_bl)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"rating"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>most_memorable_characteristics</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(Other<span class="sc" style="color: #5E5E5E;">:</span>creamy), as.factor)</span></code></pre></div>
</details>
</div>
<p>most_memorable_characteristics like <code>cocoa</code> and <code>creamy</code> positive effect rating, while <code>fatty</code>, <code>earthy</code>, <code>sandy</code>, <code>sour</code> and <code>sweet</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, fatty<span class="sc" style="color: #5E5E5E;">:</span>creamy) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-7">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb17-9">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-10">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-11">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"is most_memorable_characteristics?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-12">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>ingredients</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb18-2">    chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">igrdt_beans=</span>b, <span class="at" style="color: #657422;">igrdt_sugar=</span>s, <span class="at" style="color: #657422;">igrdt_cocoa=</span>c, <span class="at" style="color: #657422;">igrdt_lecithin=</span>l, <span class="at" style="color: #657422;">igrdt_vanilla=</span>v, <span class="at" style="color: #657422;">igrdt_salt=</span>sa, <span class="at" style="color: #657422;">igrdt_sweeter=</span>s_2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)), as.factor)</span></code></pre></div>
</details>
</div>
<p>ingredient number <code>ingredient_num</code> between 2-3 are associated with higher rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">as.factor</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ingredient_num, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>ingrediants like <code>beans</code> and <code>sugar</code> positively effect rating, while <code>vanilla</code>, <code>sweeter</code> and <code>salt</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>,<span class="st" style="color: #20794D;">""</span>,ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(ingredients, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-8">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb20-9">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb20-10">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-11">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"contain the ingredient?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-13">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="ml" class="level2">
<h2 class="anchored" data-anchor-id="ml">ML</h2>
<p>Based on the exploratory analysis, to study the effect on overall rating of chocolates, the following features are selected for building ML models. Plus, using nominal feature <code>rating_bl</code> instead of numeric feature <code>rating</code> as outcome.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">chocolate_df <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">    <span class="fu" style="color: #4758AB;">select</span>(rating_bl, company_manufacturer, country_of_bean_origin_blend, cocoa_percent, ingredient_num, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">'igrdt_'</span>), cocoa, creamy, fatty, earthy, sandy, sour, sweet) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>igrdt_cocoa, <span class="sc" style="color: #5E5E5E;">-</span>igrdt_lecithin) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span></code></pre></div>
</details>
</div>
<section id="split-samples" class="level3">
<h3 class="anchored" data-anchor-id="split-samples">split samples</h3>
<ul>
<li><code>initial_split</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb22-2">chocolate_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(chocolate_df, <span class="at" style="color: #657422;">strata =</span> rating_bl)</span>
<span id="cb22-3">chocolate_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(chocolate_split)</span>
<span id="cb22-4">chocolate_testing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(chocolate_split)</span></code></pre></div>
</details>
</div>
<ul>
<li>resample</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb23-2">folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(chocolate_train, <span class="at" style="color: #657422;">v =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb23-3">folds</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>#  10-fold cross-validation 
# A tibble: 10 × 2
   splits             id    
   &lt;list&gt;             &lt;chr&gt; 
 1 &lt;split [1647/184]&gt; Fold01
 2 &lt;split [1648/183]&gt; Fold02
 3 &lt;split [1648/183]&gt; Fold03
 4 &lt;split [1648/183]&gt; Fold04
 5 &lt;split [1648/183]&gt; Fold05
 6 &lt;split [1648/183]&gt; Fold06
 7 &lt;split [1648/183]&gt; Fold07
 8 &lt;split [1648/183]&gt; Fold08
 9 &lt;split [1648/183]&gt; Fold09
10 &lt;split [1648/183]&gt; Fold10</code></pre>
</div>
</div>
</section>
<section id="recipe" class="level3">
<h3 class="anchored" data-anchor-id="recipe">recipe</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">chocolate_rec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb25-2">    <span class="fu" style="color: #4758AB;">recipe</span>(rating_bl <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> chocolate_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">step_other</span>(company_manufacturer, <span class="at" style="color: #657422;">threshold=</span><span class="fl" style="color: #AD0000;">0.01</span>, <span class="at" style="color: #657422;">other=</span><span class="st" style="color: #20794D;">"otherCompany"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;"># step_mutate_at(c("company_manufacturer","country_of_bean_origin_blend", "rating_bl"), fn = ~as.factor(.x)) %&gt;% </span></span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span>
<span id="cb25-7"></span>
<span id="cb25-8">chocolate_rec</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
<p>check preprocessed data.frame</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">chocolate_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">    <span class="fu" style="color: #4758AB;">prep</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;">juice</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,831 × 20
   cocoa_percent ingre…¹ ratin…² compa…³ compa…⁴ compa…⁵ compa…⁶ compa…⁷ count…⁸
           &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1            70       4 &lt; 3           0       0       0       0       0       1
 2            70       4 &lt; 3           0       0       0       0       0       1
 3            60       3 &lt; 3           0       0       0       0       1       1
 4            70       2 &lt; 3           0       0       0       0       1       1
 5            70       2 &lt; 3           0       0       0       0       1       1
 6            75       4 &lt; 3           0       0       0       0       1       1
 7            75       4 &lt; 3           0       0       0       0       1       1
 8            75       5 &lt; 3           0       0       0       0       1       1
 9            75       5 &lt; 3           0       0       0       0       1       1
10            65       6 &lt; 3           0       0       0       0       1       1
# … with 1,821 more rows, 11 more variables: igrdt_sugar_X1 &lt;dbl&gt;,
#   igrdt_vanilla_X1 &lt;dbl&gt;, igrdt_salt_X1 &lt;dbl&gt;, igrdt_sweeter_X1 &lt;dbl&gt;,
#   cocoa_X1 &lt;dbl&gt;, creamy_X1 &lt;dbl&gt;, fatty_X1 &lt;dbl&gt;, earthy_X1 &lt;dbl&gt;,
#   sandy_X1 &lt;dbl&gt;, sour_X1 &lt;dbl&gt;, sweet_X1 &lt;dbl&gt;, and abbreviated variable
#   names ¹​ingredient_num, ²​rating_bl, ³​company_manufacturer_Arete,
#   ⁴​company_manufacturer_Bonnat, ⁵​company_manufacturer_Fresco,
#   ⁶​company_manufacturer_Soma, ⁷​company_manufacturer_otherCompany, …
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
</section>
<section id="grid-tune-xgboost" class="level3">
<h3 class="anchored" data-anchor-id="grid-tune-xgboost">grid tune xgboost</h3>
<ul>
<li>create model <code>boost_tree</code></li>
</ul>
<p>Details about <code>boost_tree</code> can be found https://parsnip.tidymodels.org/reference/details_boost_tree_xgboost.html</p>
<p><em>require library <code>xgboost</code> installed.</em></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">xg_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb29-2">    <span class="fu" style="color: #4758AB;">boost_tree</span>(</span>
<span id="cb29-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), <span class="co" style="color: #5E5E5E;"># the number (or proportion) of predictors that will be randomly sampled</span></span>
<span id="cb29-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>() <span class="co" style="color: #5E5E5E;"># minimum number of data points in a node</span></span>
<span id="cb29-5">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"xgboost"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># importance="permutation"</span></span>
<span id="cb29-7">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>define grid</li>
</ul>
<p><code>grid_max_entropy</code>, <code>grid_regular</code>, <code>grid_random</code> can be used for quickly specify levels for tuned hyperparameters.</p>
<p>be aware that <code>mtry</code> usually requires <code>range</code> parameters, it usually contains the <code>sqrt(predictor_num)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">xg_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">grid_regular</span>(</span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;">mtry</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;">min_n</span>(),</span>
<span id="cb30-4">    <span class="at" style="color: #657422;">levels =</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># each tune how many levels</span></span>
<span id="cb30-5">)</span>
<span id="cb30-6"></span>
<span id="cb30-7">xg_grid</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 2
    mtry min_n
   &lt;int&gt; &lt;int&gt;
 1     3     2
 2     4     2
 3     6     2
 4     8     2
 5    10     2
 6     3    11
 7     4    11
 8     6    11
 9     8    11
10    10    11
# … with 15 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li>create workflow</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">xg_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">    <span class="fu" style="color: #4758AB;">add_model</span>(xg_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-3">    <span class="fu" style="color: #4758AB;">add_recipe</span>(chocolate_rec)</span>
<span id="cb32-4"></span>
<span id="cb32-5">xg_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = tune()
  min_n = tune()

Computational engine: xgboost </code></pre>
</div>
</div>
<ul>
<li>tune model to get result</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">system.time</span>(</span>
<span id="cb34-2">    xg_res <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb34-3">        xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-4">        <span class="fu" style="color: #4758AB;">tune_grid</span>(</span>
<span id="cb34-5">            <span class="at" style="color: #657422;">resamples =</span> folds,</span>
<span id="cb34-6">            <span class="at" style="color: #657422;">grid =</span> xg_grid</span>
<span id="cb34-7">            )</span>
<span id="cb34-8">    )</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 30.965   0.215  31.417 </code></pre>
</div>
</div>
<ul>
<li>evaluate models</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> min_n, <span class="at" style="color: #657422;">y=</span>mean, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-4">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>.metric, <span class="at" style="color: #657422;">scales=</span><span class="st" style="color: #20794D;">"free"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-5">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-6">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-8">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"metrics estimate"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">'minimum number of data points in a node (min_n)'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">'the number of predictors that will be randomly sampled (mtry)'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-9">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>select hyperparameters and finalize wf</li>
</ul>
<p><code>show_best(metric = )</code> allows to see the top 5 from <code>xg_res %&gt;% collect_metrics()</code></p>
<p><code>select_best</code>, <code>select_by_pct_loss</code>, <code>select_by_one_std_err</code> select hyperparameters and corresponding <code>.config</code> to a tibble.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">xg_tune_hy <span class="ot" style="color: #003B4F;">&lt;-</span> xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">    <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"accuracy"</span>)</span>
<span id="cb37-3"></span>
<span id="cb37-4">xg_tune_hy</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
   mtry min_n .config              
  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                
1    10    11 Preprocessor1_Model10</code></pre>
</div>
</div>
<p>finalize model using selected hyperparameters</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb39-2">  xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(xg_tune_hy)</span>
<span id="cb39-4"></span>
<span id="cb39-5">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = 10
  min_n = 11

Computational engine: xgboost </code></pre>
</div>
</div>
</section>
<section id="last_fit-model" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-model"><code>last_fit</code> model</h3>
<ul>
<li>use <code>last_fit(split)</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">final_fit <span class="ot" style="color: #003B4F;">&lt;-</span> final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">    <span class="fu" style="color: #4758AB;">last_fit</span>(chocolate_split)</span>
<span id="cb41-3"></span>
<span id="cb41-4">final_fit</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># Resampling results
# Manual resampling 
# A tibble: 1 × 6
  splits             id               .metrics .notes   .predictions .workflow 
  &lt;list&gt;             &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    
1 &lt;split [1831/612]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;</code></pre>
</div>
</div>
<ul>
<li><code>collect_metrics</code> for overall data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric  .estimator .estimate .config             
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy binary         0.786 Preprocessor1_Model1
2 roc_auc  binary         0.668 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>metrics are comparable to training data, so not overfiting.</p>
<ul>
<li><code>collect_predictions</code> for test data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb45-2">    <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 612 × 7
   id               `.pred_&lt; 3` `.pred_&gt;=3`  .row .pred_class rating_bl .config 
   &lt;chr&gt;                  &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;     &lt;chr&gt;   
 1 train/test split      0.141        0.859     3 &gt;=3         &gt;=3       Preproc…
 2 train/test split      0.125        0.875    10 &gt;=3         &lt; 3       Preproc…
 3 train/test split      0.0668       0.933    11 &gt;=3         &lt; 3       Preproc…
 4 train/test split      0.156        0.844    17 &gt;=3         &gt;=3       Preproc…
 5 train/test split      0.0668       0.933    24 &gt;=3         &gt;=3       Preproc…
 6 train/test split      0.0668       0.933    25 &gt;=3         &gt;=3       Preproc…
 7 train/test split      0.0711       0.929    32 &gt;=3         &gt;=3       Preproc…
 8 train/test split      0.236        0.764    42 &gt;=3         &lt; 3       Preproc…
 9 train/test split      0.491        0.509    46 &gt;=3         &lt; 3       Preproc…
10 train/test split      0.385        0.615    55 &gt;=3         &lt; 3       Preproc…
# … with 602 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li><code>roc_auc</code> and <code>roc_curve</code> on test data</li>
</ul>
<p>calculate <code>roc_auc</code> manually on test data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;">roc_auc</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric .estimator .estimate
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
1 roc_auc binary         0.668</code></pre>
</div>
</div>
<p>plot <code>roc_curve</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;">autoplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>extract_workflow()</code> to save <code>final_trained_wf</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">final_trained_wf <span class="ot" style="color: #003B4F;">&lt;-</span> final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">    <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb50-3"></span>
<span id="cb50-4">final_trained_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><p><code>extract_*</code> information from <code>final_trained_wf</code></p>
<ul>
<li><code>extract_fit_engine()</code> is engine-specific model</li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;">extract_fit_engine</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_fit_parsnip()</code> is parsnip model object</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>parsnip model object

##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_recipe</code> or <code>extract_preprocessing</code> to get recipe/preprocessing</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">extract_preprocessor</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
</section>
<section id="feature-importance" class="level3">
<h3 class="anchored" data-anchor-id="feature-importance">feature importance</h3>
<ul>
<li><code>vip()</code> plot top 10</li>
<li><code>vi_model()</code> return tibble</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;">vip</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="final-notes" class="level2">
<h2 class="anchored" data-anchor-id="final-notes">Final notes</h2>
<ul>
<li>I convert numeric <code>rating</code> to categorical rating using threshold because, based on the exploratory analysis, the <code>rating</code> values are not continuous.</li>
<li>The <code>boost_tree</code> did not produce good estimate for the data.
<ul>
<li>Other models, like <code>rand_forest()</code>, <code>logistic_reg</code> and <code>svm_linear</code> are worth to try.</li>
<li>Tuning other hyperparameters <code>tree_depth</code>, <code>learning_rate</code> and <code>trees</code> are worth to try. <em>I don’t know which tune-able hyperparameter corresponds to regularization <code>gamma</code></em>.</li>
</ul></li>
<li>Julia Silge posted a <a href="https://www.youtube.com/watch?v=w-lF65hKtrQ">screencast</a> and <a href="https://juliasilge.com/blog/chocolate-ratings/">blog</a> of using <code>rand_forest()</code> and <code>svm_linear</code> training rating as linear model on the same dataset.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</guid>
  <pubDate>Sun, 23 Jan 2022 05:00:00 GMT</pubDate>
  <media:content url="https://www.history.com/.image/ar_4:3%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTc3OTk5Njc1MTU5MjI1OTY1/valentines-day-chocolate-gettyimages-923430892.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict ultra race time</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span></code></pre></div>
</details>
</div>
<section id="data-skim" class="level2">
<h2 class="anchored" data-anchor-id="data-skim">data skim</h2>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ultra_rankings <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>ultra_rankings</span>
<span id="cb2-2">race <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>race</span>
<span id="cb2-3"></span>
<span id="cb2-4">ultra_join <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb2-5">    ultra_rankings <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">left_join</span>(race, <span class="at" style="color: #657422;">by=</span><span class="st" style="color: #20794D;">"race_year_id"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">skimr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">skim</span>(ultra_join)</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">ultra_join</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">137803</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">20</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Date</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">difftime</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="even">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">runner</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">73629</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">time</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">72840</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gender</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">nationality</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">133</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">event</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">57</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">435</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">race</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">63</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">371</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">city</td>
<td style="text-align: right;">15599</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">308</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">country</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">60</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participation</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: Date</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">date</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">2012-01-14</td>
<td style="text-align: left;">2021-09-03</td>
<td style="text-align: left;">2017-10-13</td>
<td style="text-align: right;">711</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: difftime</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 18%">
<col style="width: 13%">
<col style="width: 18%">
<col style="width: 9%">
<col style="width: 14%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">start_time</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">0 secs</td>
<td style="text-align: left;">82800 secs</td>
<td style="text-align: left;">05:00:00</td>
<td style="text-align: right;">39</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 15%">
<col style="width: 9%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">race_year_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">26678.70</td>
<td style="text-align: right;">20156.18</td>
<td style="text-align: right;">2320</td>
<td style="text-align: right;">8670.0</td>
<td style="text-align: right;">21795.0</td>
<td style="text-align: right;">40621</td>
<td style="text-align: right;">72496.0</td>
<td style="text-align: left;">▇▃▃▂▂</td>
</tr>
<tr class="even">
<td style="text-align: left;">rank</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">253.56</td>
<td style="text-align: right;">390.80</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">31.0</td>
<td style="text-align: right;">87.0</td>
<td style="text-align: right;">235</td>
<td style="text-align: right;">1962.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">age</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">46.25</td>
<td style="text-align: right;">10.11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">40.0</td>
<td style="text-align: right;">46.0</td>
<td style="text-align: right;">53</td>
<td style="text-align: right;">133.0</td>
<td style="text-align: left;">▁▇▂▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">time_in_seconds</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">122358.26</td>
<td style="text-align: right;">37234.38</td>
<td style="text-align: right;">3600</td>
<td style="text-align: right;">96566.0</td>
<td style="text-align: right;">114167.0</td>
<td style="text-align: right;">148020</td>
<td style="text-align: right;">296806.0</td>
<td style="text-align: left;">▁▇▆▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">distance</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">154.08</td>
<td style="text-align: right;">39.22</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">160.9</td>
<td style="text-align: right;">162.6</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">179.1</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">elevation_gain</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">6473.94</td>
<td style="text-align: right;">3293.50</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3910.0</td>
<td style="text-align: right;">6640.0</td>
<td style="text-align: right;">9618</td>
<td style="text-align: right;">14430.0</td>
<td style="text-align: left;">▅▆▆▇▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">elevation_loss</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">-6512.20</td>
<td style="text-align: right;">3305.73</td>
<td style="text-align: right;">-14440</td>
<td style="text-align: right;">-9618.0</td>
<td style="text-align: right;">-6810.0</td>
<td style="text-align: right;">-3950</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: left;">▁▇▆▅▅</td>
</tr>
<tr class="even">
<td style="text-align: left;">aid_stations</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">9.58</td>
<td style="text-align: right;">7.56</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">12.0</td>
<td style="text-align: right;">16</td>
<td style="text-align: right;">56.0</td>
<td style="text-align: left;">▇▇▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participants</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">510.75</td>
<td style="text-align: right;">881.25</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">65.0</td>
<td style="text-align: right;">400</td>
<td style="text-align: right;">2900.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<p>We want to estimate the time (time_in_seconds) for runner to finish based on the features.</p>
<section id="the-effect-of-gender-and-age" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-gender-and-age">the effect of gender and age</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_decade =</span> <span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">*</span> (age <span class="sc" style="color: #5E5E5E;">%/%</span> <span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, gender, age, age_decade) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">group_by</span>(age_decade, gender) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb4-9">        <span class="at" style="color: #657422;">time_in_seconds_sd =</span> <span class="fu" style="color: #4758AB;">sd</span>(time_in_seconds),</span>
<span id="cb4-10">         <span class="at" style="color: #657422;">time_in_seconds =</span> <span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb4-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age_decade, <span class="at" style="color: #657422;">color=</span>gender, <span class="at" style="color: #657422;">group=</span>gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.2</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;">scale_color_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"age"</span>, <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-18">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="the-effect-of-nationality-age-gender" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-nationality-age-gender">the effect of nationality, age, gender</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">count</span>(nationality, <span class="at" style="color: #657422;">sort=</span><span class="cn" style="color: #8f5902;">TRUE</span>) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  nationality     n
  &lt;fct&gt;       &lt;int&gt;
1 Other       50563
2 USA         47259
3 FRA         28905
4 GBR         11076</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age, <span class="at" style="color: #657422;">fill=</span>nationality), <span class="at" style="color: #657422;">group=</span>nationality) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat=</span><span class="st" style="color: #20794D;">"density"</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>nationality</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(nationality, time_in_seconds), <span class="at" style="color: #657422;">y=</span>time_in_seconds, <span class="at" style="color: #657422;">fill=</span>nationality)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-8">    <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"runner's nationality"</span>, <span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-10">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-distance" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-distance">effect of distance</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>distance, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-elevation" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-elevation">effect of elevation</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb10-5">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), elevation_gain,  <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb10-6">        )) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>elevation , <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-9">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-date" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-date">effect of date</h3>
<p>The year of the race</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb11-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb11-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb11-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb11-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb11-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb11-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_year, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The month of race can be the proxy to estimate the season when race was hosted. However, here I did not take the geographic information (hemisphere) into consideration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb12-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb12-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_month) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb12-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb12-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb12-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_month, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="learning-models" class="level2">
<h2 class="anchored" data-anchor-id="learning-models">learning models</h2>
<p>Here I will perform two distinct models – linear regression and random forest to predict the race time using runner’s gender, age, nationality, elevation and distance of race.</p>
<section id="data-budget" class="level3">
<h3 class="anchored" data-anchor-id="data-budget">data budget</h3>
<p>inistal split to train and test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">ultra_df <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb13-7">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), </span>
<span id="cb13-8">        elevation_gain,</span>
<span id="cb13-9">        <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb13-10">        )</span>
<span id="cb13-11">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, age, gender, nationality, distance, elevation)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">2021</span>)</span>
<span id="cb13-15">ultra_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(ultra_df, <span class="at" style="color: #657422;">strata =</span> time_in_seconds)</span>
<span id="cb13-16">ultra_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(ultra_split)</span>
<span id="cb13-17">ultra_test <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<p>create resamples for cross validation</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">124</span>)</span>
<span id="cb14-2">ultra_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(ultra_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="recipes-for-feature-engineer" class="level3">
<h3 class="anchored" data-anchor-id="recipes-for-feature-engineer">recipes for feature engineer</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ultra_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(time_in_seconds <span class="sc" style="color: #5E5E5E;">~</span>., <span class="at" style="color: #657422;">data =</span> ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">step_other</span>(nationality) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">step_string2factor</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="co" style="color: #5E5E5E;"># step_dummy(all_nominal_predictors()) %&gt;% </span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># want to test whether dummy variables affect the model behave</span></span>
<span id="cb15-9">ind_rec <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-linear-model" class="level3">
<h3 class="anchored" data-anchor-id="fit-linear-model">fit linear model</h3>
<p>specify models</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lm_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span></code></pre></div>
</details>
</div>
<p>Does linear model need dummy variable? Using <code>workflow_set</code> to test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">lm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_set</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;">preproc =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="st" style="color: #20794D;">"nodummy"</span><span class="ot" style="color: #003B4F;">=</span>ultra_rec, <span class="st" style="color: #20794D;">"dummy"</span><span class="ot" style="color: #003B4F;">=</span>ind_rec),</span>
<span id="cb17-3">  <span class="at" style="color: #657422;">models =</span> <span class="fu" style="color: #4758AB;">list</span>(lm_spec)</span>
<span id="cb17-4">)</span>
<span id="cb17-5"></span>
<span id="cb17-6">lm_rs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_map</span>(</span>
<span id="cb17-7">  lm_wf, <span class="st" style="color: #20794D;">'fit_resamples'</span>, <span class="at" style="color: #657422;">resamples=</span>ultra_folds</span>
<span id="cb17-8">  )</span>
<span id="cb17-9"></span>
<span id="cb17-10">lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 9
  wflow_id           .config preproc model .metric .esti…¹    mean     n std_err
  &lt;chr&gt;              &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
1 nodummy_linear_reg Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
2 nodummy_linear_reg Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
3 dummy_linear_reg   Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
4 dummy_linear_reg   Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
# … with abbreviated variable name ¹​.estimator</code></pre>
</div>
</div>
<p>Based on the r-square value, the linear model with age, distance, elevation, gender and nationality explained ~57% variance of time_in_seconds.</p>
<p>Using dummy variable or not does not change the metrics. In fact, the number of coefficients will be exactly same no matter whether using dummy or not. Below shows coefficients of linear regression by fitting the “nodummy_linear_reg” workflow to the training data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">lm_coef <span class="ot" style="color: #003B4F;">&lt;-</span> lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">fit</span>(ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">tidy</span>()</span>
<span id="cb19-5"></span>
<span id="cb19-6">lm_coef</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 5
  term             estimate std.error statistic   p.value
  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept)       142711.     217.      658.  0        
2 age                 4220.      83.3      50.6 0        
3 genderW             6315.     236.       26.8 1.82e-157
4 nationalityGBR    -25432.     389.      -65.3 0        
5 nationalityJPN    -20211.     406.      -49.8 0        
6 nationalityUSA    -30025.     302.      -99.6 0        
7 nationalityother  -19682.     254.      -77.6 0        
8 distance            2630.      99.2      26.5 2.65e-154
9 elevation          17421.     117.      149.  0        </code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lm_coef <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">filter</span>(term<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"(Intercept)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> estimate, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(term, estimate))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>(estimate <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>)), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xmin=</span>estimate <span class="sc" style="color: #5E5E5E;">-</span> std.error, <span class="at" style="color: #657422;">xmax =</span> estimate <span class="sc" style="color: #5E5E5E;">+</span> std.error), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Elevation, being a women (compare to being a men), age and distance positively affect race time, while racers from JPN/GBR/USA/other (compare to racers from FRA) finish the race in shorter time.</p>
</section>
<section id="fit-random-forest-model-using-workflow" class="level3">
<h3 class="anchored" data-anchor-id="fit-random-forest-model-using-workflow">fit random forest model using workflow</h3>
<p>Using random forest as model to get Resampling results</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">rf_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'ranger'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb22-4"></span>
<span id="cb22-5">rf_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">add_model</span>(rf_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;">add_recipe</span>(ultra_rec)</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;"># resample evaluate </span></span>
<span id="cb22-10">rf_rs  <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-11">  <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb22-12">    <span class="at" style="color: #657422;">resamples =</span> ultra_folds</span>
<span id="cb22-13">  )</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 6
  .metric .estimator      mean     n  std_err .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18535.       10 57.2     Preprocessor1_Model1
2 rsq     standard       0.738    10  0.00219 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Compared to linear model shown above, random forest with same predictors can explain more variance of Y (74% vs.&nbsp;56%) and show smaller rmse (1.8e4 vs.&nbsp;2.4e4).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb25-2">  rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"random forest"</span>),</span>
<span id="cb25-6">  lm_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-7">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;">filter</span>(wflow_id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-9">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"linear reg"</span>)</span>
<span id="cb25-11">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> model, <span class="at" style="color: #657422;">y =</span> mean)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(.metric), <span class="at" style="color: #657422;">scales =</span> <span class="st" style="color: #20794D;">'free'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>mean <span class="sc" style="color: #5E5E5E;">-</span> std_err, <span class="at" style="color: #657422;">ymax=</span>mean <span class="sc" style="color: #5E5E5E;">+</span> std_err), <span class="at" style="color: #657422;">width=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notes: above plot can also be done by autoplot if we perform the comparison between linear regression and random forest models using <code>workflow_set</code>.</p>
</section>
<section id="last_fit-test-data-using-random-forest-result" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-test-data-using-random-forest-result"><code>last_fit</code> test data using random forest result</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_final_rs <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">last_fit</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric .estimator .estimate .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18558.    Preprocessor1_Model1
2 rsq     standard       0.737 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Different from <code>fit_resample</code> results, these metrics are calculated on the test data. The value is very close to the values done on training data (resample data), thus the model is not over-fitted.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb29-3"></span>
<span id="cb29-4">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: rand_forest()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_normalize()
• step_string2factor()

── Model ───────────────────────────────────────────────────────────────────────
Ranger result

Call:
 ranger::ranger(x = maybe_data_frame(x), y = y, num.threads = 1,      verbose = FALSE, seed = sample.int(10^5, 1)) 

Type:                             Regression 
Number of trees:                  500 
Sample size:                      83042 
Number of independent variables:  5 
Mtry:                             2 
Target node size:                 5 
Variable importance mode:         none 
Splitrule:                        variance 
OOB prediction error (MSE):       342750489 
R squared (OOB):                  0.7386915 </code></pre>
</div>
</div>
<p>The above <strong>trained</strong> workflow from <code>last_fit</code> can be saved in <code>.rda</code> for future prediction</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># using final_wf for prediction</span></span>
<span id="cb31-2">final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">predict</span>(<span class="at" style="color: #657422;">new_data =</span> ultra_train <span class="sc" style="color: #5E5E5E;">%&gt;%</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>)) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
    .pred
    &lt;dbl&gt;
1 108741.</code></pre>
</div>
</div>
</section>
</section>
<section id="what-techniques-i-learned" class="level2">
<h2 class="anchored" data-anchor-id="what-techniques-i-learned">what techniques i learned</h2>
<ul>
<li>deal with high-levels nominal features (<code>fct_lump</code> and <code>step_other</code>) in EDA and modeling</li>
<li><code>workflow_set</code> and <code>map_workflow</code> to create multiple workflows for model and/or recipes comparison.</li>
<li><code>fit_resample</code> for cross-validation. The metrics collected from cross-validation results are used for workflow comparison.</li>
<li><code>last_fit</code> model and save <strong>trained</strong> workflow for future use</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</guid>
  <pubDate>Tue, 02 Nov 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Taking options from command line</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</link>
  <description><![CDATA[ 



<p>Taking in options from command line is an essential step towards generalized usage of scripts. However, it is a chapter I skipped in almost all language textbooks since my primary goal was to code for a specific problem and did not mind re-writing the scripts in different situations.</p>
<p>Usually the options following the scripts have two types</p>
<ul>
<li>direct inputs (with default definition within the script).</li>
<li>the “true”” options with “-” or “–” to allow optional manipulation</li>
</ul>
<p>For the second type of options, it becomes a little bit complicated. First, this type options can be further grouped based whether there is argument value followed specified option (“options with argument” vs “options without argument”). In addition, it can also be classified by whether this option is mandatory or optional (although all mandatory options can be converted to optional by specifying the default value).</p>
<p>In this post, I will catch up on the options taken-in scripting in Bash, R and Perl.</p>
<section id="Bash" class="level3">
<h3 class="anchored" data-anchor-id="Bash">Bash</h3>
<p>Bash script takes in first type of options using special variables based on the input orders <code>$1</code>, <code>$2</code>, … For the unknown number of inputs, <code>$@</code> array is used to represents all arguments after script file (<code>$0</code>).</p>
<p>For the second type of options, there are two methods to take in options. One method is to use <code>while :; do; done</code> to read through all arguments (<code>$@</code>) after scripts by considering <code>--option</code> as an argument itself and <code>shift</code> it off in the loop. For each <code>--option</code>, we can use <a href="https://www.tutorialspoint.com/unix/case-esac-statement.htm"><code>case; esac</code></a> matching to specify what exact value should be.</p>
<p>In the following script, I listed the examples of “mandatory non-empty option argument”, “optional empty option argument” and “optional non-empty option argument”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">## specifiy usage function</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">usage()</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-6">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> [-h] -p p1 [-v] [-o output_file] bam1 bam2"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">## setting defaults</span></span>
<span id="cb1-10"><span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span>0 <span class="co" style="color: #5E5E5E;"># default for optional empty option argument</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># p1=0 # all mandatory options can be converted to optional by specifying the default value</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">:</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">$1</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb1-15">        <span class="ss" style="color: #20794D;">-p</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--para</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># mandatory non-empty option argument (mandatory enforced later, or we can set default to make it optional)</span></span>
<span id="cb1-16">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;">!</span> <span class="va" style="color: #111111;">$2</span> <span class="ot" style="color: #003B4F;">=~</span> <span class="st" style="color: #20794D;">"-"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-17">                        <span class="va" style="color: #111111;">p1</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-18">                        <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-19">                <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-20">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para requires non-empty option argument'</span></span>
<span id="cb1-21">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-22">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-24">        <span class="ss" style="color: #20794D;">-v</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--verbose</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional empty option argument (with default)</span></span>
<span id="cb1-25">                <span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$((verbose</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-27">        <span class="ss" style="color: #20794D;">-o</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--output</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional non-empty option argument</span></span>
<span id="cb1-28">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-f</span> <span class="va" style="color: #111111;">$2</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span> <span class="co" style="color: #5E5E5E;"># prevent overwrite into a file exist in directory</span></span>
<span id="cb1-29">                        <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARNING: --output argument %s is a file existing in directory\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-30">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Are you sure about overwriting?"</span></span>
<span id="cb1-31">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Press any key to continue"</span></span>
<span id="cb1-32">                        <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">[</span> true <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-33">                                <span class="bu" style="color: null;">read</span> <span class="at" style="color: #657422;">-n</span> 1</span>
<span id="cb1-34">                                <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">=</span> 0 <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-35">                                        <span class="cf" style="color: #003B4F;">break</span> <span class="ex" style="color: null;">1</span> <span class="co" style="color: #5E5E5E;"># break the while [ true ] loop</span></span>
<span id="cb1-36">                                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-37">                        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-38">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-39">                <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-40">                <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-41">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-42">        <span class="ss" style="color: #20794D;">-h</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--help</span> <span class="kw" style="color: #003B4F;">)</span>           </span>
<span id="cb1-43">                <span class="ex" style="color: null;">usage</span></span>
<span id="cb1-44">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-46">        <span class="ss" style="color: #20794D;">-</span><span class="pp" style="color: #AD0000;">?*</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb1-47">                <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARN: Unknown option (ignored): %s\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$1</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-48">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-50">        <span class="pp" style="color: #AD0000;">*</span><span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># Default case: No more options, so break out of the loop.</span></span>
<span id="cb1-51">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb1-53">    <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;"># mandatory argument</span></span>
<span id="cb1-57"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$p1</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-58">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para is mandatory argument'</span></span>
<span id="cb1-59">        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-60"><span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;"># input after options are put into $@</span></span>
<span id="cb1-63"><span class="va" style="color: #111111;">bams</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span>
<span id="cb1-64"></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;"># a simple function to execute </span></span>
<span id="cb1-66"><span class="fu" style="color: #4758AB;">print_out()</span></span>
<span id="cb1-67"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;">for</span> bam <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">${bams</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-69">                <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$bam</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-70">        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-71"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;"># show what --para take in</span></span>
<span id="cb1-74"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$p1</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-75"></span>
<span id="cb1-76"><span class="co" style="color: #5E5E5E;"># execute function output</span></span>
<span id="cb1-77"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">!</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$output</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-78">        <span class="ex" style="color: null;">print_out</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="va" style="color: #111111;">$output</span></span>
<span id="cb1-79"><span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-80">        <span class="ex" style="color: null;">print_out</span></span>
<span id="cb1-81"><span class="cf" style="color: #003B4F;">fi</span></span></code></pre></div>
</details>
</div>
<p>The second method is to use <code>getopts</code> function with function-specific variables <code>$OPTARG</code> and <code>$OPTIND</code> to track the option value and option number. It can only take in the short format “-” options. The <code>:</code> following the <code>-o</code> will be passed to $OPTARG, thus, the different between “options with argument” and “options without argument” are shown in <code>o:</code> and <code>o</code> in <code>getopts</code> format.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">getopts</span> <span class="st" style="color: #20794D;">":ho:"</span> <span class="va" style="color: #111111;">opt</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb2-2">        <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">${opt}</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb2-3">                <span class="ss" style="color: #20794D;">h</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-4">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> -o output_file folder1 folder2 ..."</span></span>
<span id="cb2-5">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-6">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-7">                <span class="ss" style="color: #20794D;">o</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-8">                        <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$OPTARG</span></span>
<span id="cb2-9">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-10">                <span class="dt" style="color: #AD0000;">\?</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-11">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;">"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-12">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-13">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-14">                <span class="ss" style="color: #20794D;">:</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-15">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;"> requires an argument"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-16">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb2-19"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb2-20"><span class="bu" style="color: null;">shift</span> <span class="va" style="color: #111111;">$((OPTIND</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb2-21"><span class="va" style="color: #111111;">dirs</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span></code></pre></div>
</details>
</div>
<p>Personally, I would recommend the first method. The additional reading can be found http://mywiki.wooledge.org/BashFAQ/035</p>
</section>
<section id="R" class="level3">
<h3 class="anchored" data-anchor-id="R">R</h3>
<p>Most R users execute the R script in Rstudio or R Console, and may never need to take in options. However, to execute R script in HPC environment, we submit <code>Rscript script.R</code> to the cluster for the jobs requiring high resources from command line.</p>
<p>For first type of options, <code>commandArgs</code> is all you need. It parses all arguments after script.R to the arguments vector.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">args <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">commandArgs</span>(<span class="at" style="color: #657422;">trailingOnly=</span><span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-2">file1<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-3">file2<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
</details>
</div>
<p>For the second type of options, package <code>optparse</code> is useful. Function <code>make_option</code> is used to specify each option type (matching pattern, option type, default value, …). To distinguish “options with argument” and “options without argument”, we can specify <code>action</code> argument in <code>make_option</code> function.</p>
<ul>
<li>options with argument: <code>action="store", type="character"</code> (# this is default)</li>
<li>options without argument: <code>action="store_true"</code> (# by default, <code>type="logical"</code>)</li>
</ul>
<p>After making option list, we use <code>parse_args(OptionParser(option_list))</code> to assign options to a list value (with long flag option as list element name).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(optparse)</span>
<span id="cb4-2"></span>
<span id="cb4-3">option_list <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;"># parameter 1 </span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-p"</span>,<span class="st" style="color: #20794D;">"--para"</span>),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"integer"</span>, </span>
<span id="cb4-8">    <span class="at" style="color: #657422;">default=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb4-9">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"parameter 1 [default= %default]"</span></span>
<span id="cb4-10">    ),</span>
<span id="cb4-11">  <span class="co" style="color: #5E5E5E;"># optional output</span></span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-o"</span>, <span class="st" style="color: #20794D;">"--out"</span>), </span>
<span id="cb4-14">      <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"character"</span>, </span>
<span id="cb4-15">      <span class="at" style="color: #657422;">default=</span><span class="fu" style="color: #4758AB;">stdout</span>(), </span>
<span id="cb4-16">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"output file name [default= STDOUT]"</span>, </span>
<span id="cb4-17">      <span class="at" style="color: #657422;">metavar=</span><span class="st" style="color: #20794D;">"character"</span></span>
<span id="cb4-18">     ),</span>
<span id="cb4-19">  <span class="co" style="color: #5E5E5E;"># verbose</span></span>
<span id="cb4-20">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-v"</span>, <span class="st" style="color: #20794D;">"--verbose"</span>), </span>
<span id="cb4-22">      <span class="at" style="color: #657422;">action=</span><span class="st" style="color: #20794D;">"store_true"</span>,</span>
<span id="cb4-23">      <span class="at" style="color: #657422;">default=</span>F</span>
<span id="cb4-24">     )</span>
<span id="cb4-25">)</span>
<span id="cb4-26"> </span>
<span id="cb4-27">opts <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list))</span>
<span id="cb4-28">opts</span></code></pre></div>
</details>
</div>
<p>Things need to be cautious</p>
<ul>
<li>final list, by default, have help function, thus no need to specify <code>-h</code>. To visualize the help page</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list), <span class="at" style="color: #657422;">args =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"--help"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li>long flag option is required.</li>
<li><code>default</code> argument in function <code>make_option</code> must not be NULL, otherwise, the option will not be included in the final list.</li>
<li>There are other useful arguments including <code>dest</code>, <code>callback</code> and <code>metavar</code>. Learn more from</li>
</ul>
<p>Besides package <code>optparse</code>, <code>argparser</code> is another popular package. Please read <a href="https://blog.sellorm.com/2017/12/30/command-line-utilities-in-r-pt-6/">this blog</a> for tutorial.</p>
</section>
<section id="Perl" class="level3">
<h3 class="anchored" data-anchor-id="Perl">Perl</h3>
<p>Perl script takes every argument (after script) from command line into a special array <code>@ARGV</code>. We can easily read first type of options by parsing through <code>@ARGV</code>. This is very similar to <code>commandArgs</code> in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb6-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> file1 [file2 file3...]</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;">This script is to print out first column of each file</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;">It requires at least one input file </span></span>
<span id="cb6-5"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>; <span class="co" style="color: #5E5E5E;"># ensure there are arguments following the script</span></span>
<span id="cb6-9">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb6-10">  <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){ <span class="co" style="color: #5E5E5E;"># go through each input file</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span><span class="st" style="color: #20794D;">[</span><span class="dt" style="color: #AD0000;">$i</span><span class="st" style="color: #20794D;">]</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb6-13">      <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb6-14">      <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@items</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/\t/</span>,<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb6-15">      <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$items</span><span class="st" style="color: #20794D;">[0]</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-16">    }</span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb6-18">  }</span>
<span id="cb6-19">}</span></code></pre></div>
</details>
</div>
<p>In above script, another special variable <code>$0</code> was used. It represents the script name itself (for example we can save above script as “print_col1.pl”). Thus, when the script is not followed by an input file, it will print usage</p>
<blockquote class="blockquote">
<p>print_col1.pl file1 [file2 file3…]<br>
This script is to print out first column of each file It requires at least one input file</p>
</blockquote>
<p>For the second type of options, perl uses a module <code>Getopt</code> to parse options. The following script shows an example to print sequence length based on file format (<a href="https://compgenomr.github.io/book/fasta-and-fastq-formats.html">fasta vs fastq</a>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb7-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">use</span> <span class="fu" style="color: #4758AB;">Getopt::Long</span>;</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> [--format fasta] [--seqN] [--header] file [file2 file3 ...]</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;">this script is to calculate sequence file from fastq/fasta file</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;">--format fasta|fastq # default is fasta</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;">--seqN integer # default is everything</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;">--header # default no header added</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;">output directly to STDOUT as seq_name[tab]length</span></span>
<span id="cb7-10"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$format</span>=<span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>; <span class="co" style="color: #5E5E5E;"># set default as fasta format.</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seqN</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># set default for number of sequence to print (0 here means print all sequences)</span></span>
<span id="cb7-14"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span> = <span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># option variable with default value (false)</span></span>
<span id="cb7-15">GetOptions(</span>
<span id="cb7-16">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">format=s</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$format</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as string (s)</span></span>
<span id="cb7-17">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seqN=i</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$seqN</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as numeric (i)</span></span>
<span id="cb7-18">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">header</span><span class="ot" style="color: #003B4F;">"</span>  =&gt; \<span class="dt" style="color: #AD0000;">$header</span>  <span class="co" style="color: #5E5E5E;"># flag: if --header specified, it will become true</span></span>
<span id="cb7-19">);</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$n</span>;</span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-23">  <span class="dt" style="color: #AD0000;">$n</span>=<span class="dv" style="color: #AD0000;">0</span>;</span>
<span id="cb7-24">}</span>
<span id="cb7-25"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-26">        <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>;</span>
<span id="cb7-27">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-28">        OUTER: <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){</span>
<span id="cb7-29">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$header</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-30">                  <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seq_name</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">seq_len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-31">                }</span>
<span id="cb7-32">                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$file</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span>[<span class="dt" style="color: #AD0000;">$i</span>];</span>
<span id="cb7-33">                <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="dt" style="color: #AD0000;">$file</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-34">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-35">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-36">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-37">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-38">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-39">                                <span class="kw" style="color: #003B4F;">if</span>(<span class="ot" style="color: #003B4F;">/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;/</span>){</span>
<span id="cb7-40">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-41">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-42">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-43">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-44">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-45">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-46">                                                }</span>
<span id="cb7-47">                                        }</span>
<span id="cb7-48">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;//</span>;</span>
<span id="cb7-49">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-50">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-51">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="ot" style="color: #003B4F;">""</span>;</span>
<span id="cb7-52">                                }<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-53">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="dt" style="color: #AD0000;">$seq</span>.<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-54">                                }</span>
<span id="cb7-55">                        }</span>
<span id="cb7-56">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-57">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-58">                }</span>
<span id="cb7-59">                <span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fastq</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-60">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-61">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-62">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$line</span>;</span>
<span id="cb7-63">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-64">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-65">                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-66">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-67">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-68">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-69">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-70">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-71">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-72">                                                }</span>
<span id="cb7-73">                                        }</span>
<span id="cb7-74">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="dt" style="color: #AD0000;">@</span><span class="ot" style="color: #003B4F;">//</span>;</span>
<span id="cb7-75">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-76">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-77">                                        </span>
<span id="cb7-78">                                }<span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-79">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-80">                                }</span>
<span id="cb7-81">                                <span class="dt" style="color: #AD0000;">$line</span>++;</span>
<span id="cb7-82">                        }</span>
<span id="cb7-83">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-84">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-85">                }</span>
<span id="cb7-86">                <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb7-87">        }</span>
<span id="cb7-88">}</span></code></pre></div>
</details>
</div>
<p>For more usage example of <code>Getopt</code>, please refer to its <a href="https://perldoc.perl.org/Getopt/Long.html">perldoc</a> page.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>bash</category>
  <category>perl</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</guid>
  <pubDate>Sat, 22 Aug 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.source-data.com/wp-content/uploads/2019/11/options_0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transition from dplyr to data.table</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</link>
  <description><![CDATA[ 



<p><code>dplyr</code> and <code>tidyr</code> have totally changed the way we code in R. I particularly love the pipe <code>%&gt;%</code> which comes from <code>magrittr</code> package and makes the code easy to read and understand. While I am obessed with simplicity of <code>dplyr</code> coding style, I am also fascinated with how fast <code>data.table</code> wrangles data. Below is an example showing the speed difference using <code>dplyr</code> and <code>data.table</code> in a user function <code>gene_lookup</code> for one of my shiny app.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># dplyr version</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb1-3">        old_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup_old</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb1-4">})</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># 2.727   0.122   2.898  </span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># data.table version</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb2-3">        new_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb2-4">})</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># 0.505   0.054   0.293 </span></span></code></pre></div>
</details>
</div>
<p>Last year, Hadley Wickham and his team launched a hybrid package <a href="https://github.com/tidyverse/dtplyr"><code>dtplyr</code></a> which uses the syntax of <code>dplyr</code> but runs <code>data.table</code> on the backend. It is a brilliant idea and I believe a lot of dplyr fan would love it, but dtplyr is still slower than data.table. Considering speed is the highest priority in some applications, I would like to switch to data.table completely. It took me only half day to get used to data.table syntax anyway. Plus, <a href="https://martinctc.github.io/blog/using-data.table-with-magrittr-pipes-best-of-both-worlds/">this post</a>, which shows using pipe in data.table, makes this transition more smooth and pleasant.</p>
<p>In this blog, I will list <code>data.table</code> and <code>dplyr</code>/<code>tidyr</code> syntax back to back, providing an easy reference for dplyr users who want to quickly pick up <code>data.table</code>.</p>
<section id="read-file" class="level3">
<h3 class="anchored" data-anchor-id="read-file">read file</h3>
<p><code>read_delim</code> and <code>read_csv</code> are the two functions commonly used to read-in data from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_delim</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>, <span class="at" style="color: #657422;">delim=</span><span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb3-2">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_df)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "spec_tbl_df" "tbl_df"      "tbl"         "data.frame" </code></pre>
</div>
</div>
<p>The equivalent command in <code>data.table</code> is <code>fread</code>. Like “read_delim”, <code>fread</code> automatically searches for header and defines column data type, but it is faster and automatically searches for separators as well.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_dt)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.table" "data.frame"</code></pre>
</div>
</div>
<p>To switch between tibble and data.table class, use <code>tbl_df</code> to convert data.table to tibble, and <code>as.data.table()</code> to convert tibble/data.frame to data.table.</p>
</section>
<section id="subset-rows" class="level3">
<h3 class="anchored" data-anchor-id="subset-rows">subset rows</h3>
<p>Subsetting rows is done by the function <code>filter</code> from <code>dplyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb7-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model))</span></code></pre></div>
</details>
</div>
<p>Subsetting rows in <code>data.table</code> is very similar to the base R, placing boolean vector at row index. The index separator <code>,</code> can even be omitted. Also if boolean expression contains column variables, we can use the variable names directly instead of using df$var.</p>
<p>Pipe can be used in the format of <code>%&gt;% .[]</code> to connect the code.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb8-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  .[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model)]</span></code></pre></div>
</details>
</div>
</section>
<section id="subset-columns" class="level3">
<h3 class="anchored" data-anchor-id="subset-columns">subset columns</h3>
<p>Subsetting columns is done by the function <code>select</code> from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb9-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb9-6">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"ar"</span>))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses variable names to subset columns. Like base R, the variable name vector is a character class placed at column index position. Index separator <code>,</code> cannot be omitted here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb10-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  .[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"model"</span>,<span class="st" style="color: #20794D;">"mpg"</span>,<span class="st" style="color: #20794D;">"cyl"</span>)]</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb10-6">col_ar <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt)[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"ar"</span>,<span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt))]</span>
<span id="cb10-7">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-8">  .[,<span class="sc" style="color: #5E5E5E;">-</span>..col_ar]</span></code></pre></div>
</details>
</div>
</section>
<section id="add-new-variable" class="level3">
<h3 class="anchored" data-anchor-id="add-new-variable">add new variable</h3>
<p><code>dplyr</code> uses <code>mutate</code> to add column.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># assign car size based on the weight</span></span>
<span id="cb11-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb11-4">    wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb11-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb11-6">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span></span>
<span id="cb11-7">  ))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses <code>:=</code> to assign values to column variables. Be aware that, different from <code>mutate</code> which returns the updated data frame without assignment, data.table is modified by reference and returned invisibly when <code>:=</code> or any <code>set*</code> functions are used. If you do not want to change the original data.table, take a copy first <code>DT2 = copy(DT)</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">untidy_mtcars_dt2<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">copy</span>(untidy_mtcars_dt)</span>
<span id="cb12-2">untidy_mtcars_dt2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">  .[,size<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="fu" style="color: #4758AB;">case_when</span>(wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb12-4">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb12-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span>)]</span></code></pre></div>
</details>
</div>
<p><code>:=</code> can also be used for multiple column assignment and functional form. More details refer to the <a href="https://www.rdocumentation.org/packages/data.table/versions/1.12.8/topics/%3A%3D">usage manual</a></p>
</section>
<section id="pivot" class="level3">
<h3 class="anchored" data-anchor-id="pivot">pivot</h3>
<p>Table pivoting is done by the functions <code>spread</code> and <code>gather</code> (or <code>pivot_wider</code> and <code>pivot_longer</code>) from <code>tidyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># wide to long (gather) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-2">tidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">value=</span><span class="st" style="color: #20794D;">"tmp"</span>,automatic,manual) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># wide to long (pivot_longer) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-8">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>),<span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 12
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb trans…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     4     4 manual 
 2 Mazda RX…  21       6  160    110  3.9   2.88  17.0     0     4     4 manual 
 3 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     4     1 manual 
 4 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1 automa…
 5 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2 automa…
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1 automa…
 7 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4 automa…
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2 automa…
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2 automa…
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4 automa…
# … with 22 more rows, and abbreviated variable name ¹​transmission
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># long to wide (spread) -- make transmission to group automatic and manual</span></span>
<span id="cb15-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">spread</span>(transmission, tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># long to wide (pivot_wider) -- </span></span>
<span id="cb17-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>transmission, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
<p>The <code>data.table</code> uses <code>dcast</code> for long-to-wide and <code>melt</code> for wide-to-long pivoting.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># wide to long (melt) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb19-2">tidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">melt</span>(<span class="at" style="color: #657422;">measure.vars=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>), <span class="at" style="color: #657422;">variable.name=</span><span class="st" style="color: #20794D;">"transmission"</span>, <span class="at" style="color: #657422;">value.name=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  .[tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-5">  .[,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"tmp"</span>)]</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># long to wide (dcast) -- split transmission column to automatic manual</span></span>
<span id="cb19-8">tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-9">  .[, tmp<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb19-10"></span>
<span id="cb19-11">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span>   </span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;">dcast</span>(model <span class="sc" style="color: #5E5E5E;">+</span> mpg <span class="sc" style="color: #5E5E5E;">+</span> cyl <span class="sc" style="color: #5E5E5E;">+</span> disp <span class="sc" style="color: #5E5E5E;">+</span> hp <span class="sc" style="color: #5E5E5E;">+</span> drat <span class="sc" style="color: #5E5E5E;">+</span> wt <span class="sc" style="color: #5E5E5E;">+</span> qsec <span class="sc" style="color: #5E5E5E;">+</span> vs <span class="sc" style="color: #5E5E5E;">+</span> gear <span class="sc" style="color: #5E5E5E;">+</span> carb <span class="sc" style="color: #5E5E5E;">~</span>transmission, <span class="at" style="color: #657422;">value.var=</span><span class="st" style="color: #20794D;">"tmp"</span>)</span>
<span id="cb19-13"></span>
<span id="cb19-14">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-15">  .[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>) <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">replace</span>(.SD,<span class="fu" style="color: #4758AB;">is.na</span>(.SD),<span class="dv" style="color: #AD0000;">0</span>), .SDcols<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>)]</span></code></pre></div>
</details>
</div>
</section>
<section id="merge" class="level3">
<h3 class="anchored" data-anchor-id="merge">merge</h3>
<p><code>dplyr</code> uses SQL-like join functions to merge two or more tables together. There are <code>inner_join</code>, <code>full_join</code>, <code>left_join</code>, <code>right_join</code>, <code>semi_join</code> and <code>anti_join</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># generate two tables</span></span>
<span id="cb20-2">tidy_mtcars_df_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl, hp, vs)</span>
<span id="cb20-4">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">select</span>(model, disp, qsec, transmission, gear, carb)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb20-8"><span class="fu" style="color: #4758AB;">left_join</span>(</span>
<span id="cb20-9">  tidy_mtcars_df_engine,</span>
<span id="cb20-10">  tidy_mtcars_df_other</span>
<span id="cb20-11">)</span></code></pre></div>
</details>
</div>
<p><code>data.table</code>, from the other end, use <code>merge</code> for all the joins. By default, <code>merge</code> is <code>inner_join</code>, but we can adjust <code>by</code> variables to fulfill other join functions.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tidy_mtcars_dt_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_engine <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-2">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_other <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># inner_join</span></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-6">  tidy_mtcars_dt_engine,</span>
<span id="cb21-7">  tidy_mtcars_df_other,</span>
<span id="cb21-8">  <span class="at" style="color: #657422;">all=</span><span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb21-9">)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb21-12"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-13">  tidy_mtcars_dt_engine,</span>
<span id="cb21-14">  tidy_mtcars_df_other,</span>
<span id="cb21-15">  <span class="at" style="color: #657422;">all.x=</span>T</span>
<span id="cb21-16">)</span>
<span id="cb21-17"></span>
<span id="cb21-18"><span class="co" style="color: #5E5E5E;"># right_join</span></span>
<span id="cb21-19"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-20">  tidy_mtcars_dt_engine,</span>
<span id="cb21-21">  tidy_mtcars_df_other,</span>
<span id="cb21-22">  <span class="at" style="color: #657422;">all.y=</span>T</span>
<span id="cb21-23">)</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;"># full_join</span></span>
<span id="cb21-26"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-27">  tidy_mtcars_dt_engine,</span>
<span id="cb21-28">  tidy_mtcars_df_other,</span>
<span id="cb21-29">  <span class="at" style="color: #657422;">all=</span>T</span>
<span id="cb21-30">)</span></code></pre></div>
</details>
</div>
</section>
<section id="group-and-summarize" class="level3">
<h3 class="anchored" data-anchor-id="group-and-summarize">group and summarize</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>summarize</code> to calculate the new variable based on the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># calculate weight mean for each group of differrent cylinder number</span></span>
<span id="cb22-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
    cyl wt_mean
  &lt;dbl&gt;   &lt;dbl&gt;
1     4    2.29
2     6    3.12
3     8    4.00</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>by</code> to specify the group, and <code>=</code> to summarize.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  .[,.(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)),by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl  wt_mean
1:   8 3.999214
2:   4 2.285727
3:   6 3.117143</code></pre>
</div>
</div>
</section>
<section id="group-and-subsetting" class="level3">
<h3 class="anchored" data-anchor-id="group-and-subsetting">group and subsetting</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>slice</code> to subset rows within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb26-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 13
  model        mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
1 Merc 240D   24.4     4  147.    62  3.69  3.19  20       1     4     2       1
2 Valiant     18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
3 Lincoln C…  10.4     8  460    215  3     5.42  17.8     0     3     4       1
# … with 1 more variable: manual &lt;dbl&gt;, and abbreviated variable name
#   ¹​automatic
# ℹ Use `colnames()` to see all variable names</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>.SD</code> and <code>by</code> to subset within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb28-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-3">  .[,.SD[<span class="fu" style="color: #4758AB;">which.max</span>(wt)], by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl               model  mpg  disp  hp drat    wt  qsec vs gear carb
1:   8 Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0    3    4
2:   4           Merc 240D 24.4 146.7  62 3.69 3.190 20.00  1    4    2
3:   6             Valiant 18.1 225.0 105 2.76 3.460 20.22  1    3    1
   automatic manual
1:         1      0
2:         1      0
3:         1      0</code></pre>
</div>
</div>
<p>For more <code>.SD</code> reading, refer to https://cran.r-project.org/web/packages/data.table/vignettes/datatable-sd-usage.html</p>
</section>
<section id="last-bits" class="level3">
<h3 class="anchored" data-anchor-id="last-bits">last bits</h3>
<p>There are other accessory functions useful in <code>dplyr</code> and some of them have corresponding functions in <code>data.table</code> too.</p>
<div class="cell">
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> usage </th>
   <th style="text-align:left;"> dplyr </th>
   <th style="text-align:left;"> data.table </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> get unique rows </td>
   <td style="text-align:left;"> distinct() </td>
   <td style="text-align:left;"> unique() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> sort by column(s) </td>
   <td style="text-align:left;"> arrange() </td>
   <td style="text-align:left;"> setorder()/setorderv() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> change column names </td>
   <td style="text-align:left;"> rename(new=old) </td>
   <td style="text-align:left;"> setnames(old, new) </td>
  </tr>
</tbody>
</table>

</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>data wrangle</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</guid>
  <pubDate>Thu, 25 Jun 2020 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Rdatatable/data.table/master/.graphics/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>ML pipeline with tidymodels vs. caret</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</link>
  <description><![CDATA[ 



<p>As a DS beginner, I first came across ML in R by studying the book <a href="https://bradleyboehmke.github.io/HOML/">Hands-On Machine Learning with R</a>. The book mainly focuses on the package <code>caret</code> with general introductions to packages like <code>recipe</code> and <code>h2o</code>. Most examples use the workflow in which feature engineering is performed by <code>recipe</code> and the modeling/learning part is done using <code>caret</code>.</p>
<p>It was a great pleasure to take the <a href="https://www.tidymodels.org/">tidymodels</a> workshop hosted by <a href="https://twitter.com/apreshill">Dr.&nbsp;Alison Hill</a> last week. <code>tidymodels</code> was recently launched as a collection of packages for ML using tidyverse principles. It is built on <code>recipes</code> for feature engineering and <code>parsnip</code> as the major modeling package, and links ML steps together with <code>workflow</code>.</p>
<p>In this post, I am going to present the general ML frameworks using <code>caret</code> and <code>tidymodels</code>, independently. The data used as an example is “Watson churn data” from <a href="https://modeldata.tidymodels.org/reference/index.html">modeldata</a></p>
<section id="required-libraries-and-data" class="level2">
<h2 class="anchored" data-anchor-id="required-libraries-and-data">0. required libraries and data</h2>
<p>Since tidymodels is a collection of packages like <code>tidyverse</code>, we can just use <code>library(tidymodels)</code> to load all the required libraries for the tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<p>For the <code>caret</code> pipeline, additional helper pacakges, like <code>recipes</code> and <code>rsample</code>, were needed to process the data. Most of those packages are already collected in the <code>tidymodels</code> pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(caret)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>For the data, I used “Watson churn data” from modeldata which is also a part of <code>tidymodels</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(modeldata)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">data</span>(wa_churn)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># quick view and summarize data</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">glimpse</span>(wa_churn)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># visdat::vis_miss(wa_churn)</span></span>
<span id="cb4-6">Hmisc<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">describe</span>(wa_churn)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># relevel factors</span></span>
<span id="cb4-9">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">churn=</span><span class="fu" style="color: #4758AB;">relevel</span>(churn, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-11">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">multiple_lines=</span><span class="fu" style="color: #4758AB;">relevel</span>(multiple_lines, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No phone service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">internet_service=</span><span class="fu" style="color: #4758AB;">relevel</span>(internet_service, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-13">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_security=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_security, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_backup=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_backup, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-15">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">device_protection=</span><span class="fu" style="color: #4758AB;">relevel</span>(device_protection, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-16">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tech_support=</span><span class="fu" style="color: #4758AB;">relevel</span>(tech_support, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_tv=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_tv, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_movies=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_movies, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-19">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">contract=</span><span class="fu" style="color: #4758AB;">relevel</span>(contract, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"Month-to-month"</span>))</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;"># to simplify the case here, we are going to remove missing variable</span></span>
<span id="cb4-22">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-23">        na.omit      </span></code></pre></div>
</details>
</div>
</section>
<section id="data-split" class="level2">
<h2 class="anchored" data-anchor-id="data-split">1. data split</h2>
<p>Both frameworks use <code>rsample::initial_split</code> to split the data into training and testing data. Here, we choose the standard 7:3 split between training and testing, with stratification on the target variable “churn”</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># split</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb5-3">data_splits <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"churn"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb5-4">data_train<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">training</span>(data_splits)</span>
<span id="cb5-5">data_test<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">testing</span>(data_splits)</span></code></pre></div>
</details>
</div>
<p>To stratify on the numeric variables, we can add the <code>breaks</code> parameter.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"tenure"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">breaks=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="feature-engineer" class="level2">
<h2 class="anchored" data-anchor-id="feature-engineer">2. feature engineer</h2>
<p>General <a href="http://www.feat.engineering/">feature engineering</a> steps include</p>
<ul>
<li>removing variables with zero variance or near zero variance: <code>step_zv</code>, <code>step_nzv</code></li>
<li>lumping nominal variables: <code>step_other</code></li>
<li>normalizing (scale + center) numeric variables (specific for regression-based models): <code>step_scale</code>, <code>step_center</code>, <code>step_normalize</code></li>
<li>encoding nominal variables to dummy features: <code>step_novel</code> + <code>step_dummy</code>, <code>step_integer</code></li>
<li>value transformation to fit normal distribution: <code>step_log</code>, <code>step_YeoJohnson</code>, <code>step_BoxCox</code></li>
<li>feature dimension reduction: <code>step_pca</code></li>
<li>dealing with missing values with imputation: <code>step_medianimpute</code>, <code>step_knnimpute</code>, <code>step_bagimpute</code></li>
</ul>
<p>Feature engineering is done by <code>recipes</code> in both <code>tidymodels</code> and <code>caret</code>. The functions in <code>recipes</code> starts with <code>step_*</code> and create a blueprint for feature engineering. The complete list of step is at https://tidymodels.github.io/recipes/reference/index.html</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(churn <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">        <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">        <span class="fu" style="color: #4758AB;">step_nzv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())  <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-4">        <span class="fu" style="color: #4758AB;">step_novel</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span></code></pre></div>
</details>
</div>
<p>The blueprint will not change the data until it is <code>fit</code> in the modeling step. We can use <code>prep</code> and <code>bake</code> to see “transformed” data in data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">        <span class="fu" style="color: #4758AB;">prep</span>(wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">        <span class="fu" style="color: #4758AB;">bake</span>(wa_churn)</span></code></pre></div>
</details>
</div>
<p>One reason to use <code>recipe</code> is to avoid <a href="https://www.quora.com/Whats-data-leakage-in-data-science">data leakage</a>. Data leakage is when information from outside the training data set is used to create the model.</p>
</section>
<section id="resample" class="level2">
<h2 class="anchored" data-anchor-id="resample">3. resample</h2>
<p>Resampling methods split the training data into additional sets. It will generate train set and validation set. Typical resampling method include cross-validation (cv), repeated cross-validation (repeated cv), leave-one-out and bootstrapping (with replacement).</p>
<p>We can use <code>rsample::vfold_cv</code> for both caret and tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># 10 fold cross validation stratified on target variable churn</span></span>
<span id="cb9-2">cv_folds <span class="ot" style="color: #003B4F;">=</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vfold_cv</span>(<span class="at" style="color: #657422;">data=</span>data_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">strata=</span>churn)</span></code></pre></div>
</details>
</div>
<p>However to make above <code>cv_folds</code> compatible with <code>caret</code>, we need to used <code>rsample2caret</code> to convert a <code>trainControl</code> list</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cv_folds_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rsample2caret</span>(cv_folds)</span>
<span id="cb10-2">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(</span>
<span id="cb10-3">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>,</span>
<span id="cb10-4">        <span class="at" style="color: #657422;">verboseIter =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb10-5">        <span class="at" style="color: #657422;">classProbs =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-6">        <span class="at" style="color: #657422;">summaryFunction =</span> twoClassSummary,</span>
<span id="cb10-7">        <span class="at" style="color: #657422;">returnResamp =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-8">        <span class="at" style="color: #657422;">savePredictions =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-9">        <span class="at" style="color: #657422;">index =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>index,</span>
<span id="cb10-10">        <span class="at" style="color: #657422;">indexOut =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>indexOut</span>
<span id="cb10-11">  )</span></code></pre></div>
</details>
</div>
<p>Or we can simply use caret function <code>trainControl</code> function to generate split. However, no stratify option is available here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>, <span class="at" style="color: #657422;">number=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="hyperparameters-grid" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameters-grid">4. hyperparameters grid</h2>
<p>A hyperparameter is a parameter whose value is set before the learning process begins. It is distinguished from other parameters by the fact that it is not used for fitting the machine to the training set. For different models, there are a different number of hyperparameters you can tune. Here I choose to use random forest to model the data. The hyperparameters for random forest from <code>ranger</code> include</p>
<ol type="1">
<li>the number of trees – <code>num.trees</code> or <code>trees</code></li>
<li>depth of tree – <code>max.depth</code></li>
<li>number of features to consider at every split – <code>mtry</code></li>
<li>minimum number of samples required to split a node – <code>min.node.size</code> or <code>min_n</code></li>
<li>whether using boostrapping to select samples for training – <code>replace</code>.</li>
<li>fraction of observation to sample – <code>sample.fraction</code>. Specifying <code>sample.fraction</code> requires <code>replace</code> being set as TRUE</li>
</ol>
<p>A rule of thumb to start is</p>
<ul>
<li><code>num.trees</code> start with 10x p (p means number of features).</li>
<li><code>max.depth</code></li>
<li><code>mtry</code>: sqrt(p) for classification and p/3 for regression</li>
<li><code>min.node.size</code> default values of 1 for classification and 5 for regression</li>
<li><code>replace</code> and <code>sample.fraction</code>: Default is 1 for sampling with replacement and 0.632 for sampling without replacement.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">hyp_grid <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb12-2">        <span class="at" style="color: #657422;">trees =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">500</span>,<span class="dv" style="color: #AD0000;">1000</span>),</span>
<span id="cb12-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb12-5">)</span></code></pre></div>
</details>
</div>
<p>The hyperparameters can be checked by function <code>args(rand_forest)</code></p>
<p><code>rf</code> method (from RandomForest) for <code>caret</code> has only one hyperparameter (mtry) by default.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">hyp_grid_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">mtry=</span><span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-3">)</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-model" class="level2">
<h2 class="anchored" data-anchor-id="fit-model">5. fit model</h2>
<p>Here is the step where tidymodel and caret start to diverge in syntax. Typically, tidymodel builds a model using <code>workflow</code> pipe which specifies formular/recipe and model, while caret uses <code>train</code> to fit model.</p>
<p><strong>tidymodel</strong></p>
<p>default version of model fit <code>fit_resamples</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># without grid_tune -&gt; fit_resamples() at train</span></span>
<span id="cb14-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-3">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"permutation"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-4">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-7">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb14-11">default_tm_fit<span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-12">        <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb14-13">                <span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb14-14">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_resamples</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb14-15">                )</span></code></pre></div>
</details>
</div>
<p>grid version of model fit <code>grid_tune</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># with grid_tune -&gt; set tune() at model, use tune_grid() at train</span></span>
<span id="cb15-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>(</span>
<span id="cb15-3">                <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-4">                <span class="at" style="color: #657422;">trees=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-5">                <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>()</span>
<span id="cb15-6">        ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-7">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"impurity"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-8">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-11">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-12">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb15-15">grid_tm_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-16">        <span class="fu" style="color: #4758AB;">tune_grid</span>(<span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb15-17">            <span class="at" style="color: #657422;">grid =</span> hyp_grid,</span>
<span id="cb15-18">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_grid</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb15-19">            )</span></code></pre></div>
</details>
</div>
<p>Notes: 1. <code>control</code> specification will be <code>control_grid()</code> in <code>grid_tune()</code> 2. <code>grid</code> parameter here can also be a integer which test for top N parameters.</p>
<p>Follow the thread https://github.com/tidymodels/parsnip/issues/235 to find how to print out default hyperparameters.</p>
<p><strong>caret</strong></p>
<p>default version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># without hyp grid</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb16-3">default_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb16-4">        rec,</span>
<span id="cb16-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb16-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb16-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb16-8">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb16-9">)</span></code></pre></div>
</details>
</div>
<p>grid version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># with grid --- tuneGrid</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb17-3">grid_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb17-4">        rec,</span>
<span id="cb17-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb17-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb17-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">tuneGrid =</span> hyp_grid_cr,</span>
<span id="cb17-9">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb17-10">)</span></code></pre></div>
</details>
</div>
</section>
<section id="collect-metrics" class="level2">
<h2 class="anchored" data-anchor-id="collect-metrics">6. collect metrics</h2>
<p>Metrics are used to determine how good the model fit. For classification problem, accuracy and ROC/AUC are commonly used. For regression problem, RSEM is the most commonly used approach.</p>
<p>We used <code>collect_metrics</code> in <code>tidymodels</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># for default model</span></span>
<span id="cb18-2">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># for grid tune model</span></span>
<span id="cb18-5">grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
</div>
<p>list <code>results</code> stores metrics for <code>caret</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results</span></code></pre></div>
</details>
</div>
<p>From the results, we can tell that <code>train</code> fit 3 hyperparameters by default.</p>
</section>
<section id="collect-prediction-for-training-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-training-data">7. collect prediction for training data</h2>
<p>Besides model metrics, we also care about what predicted value of target variable is in training data.</p>
<p><strong>tidymodels</strong></p>
<p>To see predicted target value for data_train, we can use <code>collect_predictions</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb20-6">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb20-7">                default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_predictions</span>(), churn, .pred_Yes</span>
<span id="cb20-8">        )</span>
<span id="cb20-9">)</span></code></pre></div>
</details>
</div>
<p><em>Notes: collect_predictions() only works when specifying <code>save_pred = TRUE</code> in control.</em></p>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb21-5">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb21-6">                default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df, </span>
<span id="cb21-7">                obs, Yes</span>
<span id="cb21-8">        )</span>
<span id="cb21-9">)</span></code></pre></div>
</details>
</div>
<p><em>For both caret and tidymodels, it is possible that each row of the original data point might be represented multiple times per tuning paramete if boostrap or repeated cv is used</em></p>
</section>
<section id="collect-prediction-for-testing-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-testing-data">8. collect prediction for testing data</h2>
<p>For default fit, only one set of hyperparameters is specified, thus we can just apply the fitted model to <code>data_test</code>. However, for grid fit, we end up with multiple sets of hyperparameters. Thus, before fitting the model, we need to pick the best set of hyperparameters based on metrics on training data (which is summarized using specified rsample method), then apply the best model to test_data</p>
<p><strong>tidymodels</strong></p>
<p><code>last_fit</code> is a function that is applied to workflow and fits to test data. By default, it generates predictions that can be reported by <code>collect_prediction</code> (no need to specify <code>control</code> in the fit). We can also use <code>collect_metrics</code> to check the metrics in testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb22-2">default_last_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">        <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb22-4"></span>
<span id="cb22-5">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb22-7"></span>
<span id="cb22-8">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-9">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p>To select best set of hyperparameters from <code>grid_tune</code>, we use <code>select_best</code> by specifying which metrics to use. Then we apply this set of hyperparameters to original workflow by <code>finalize_workflow</code>. Finally, like default, apply <code>last_fit</code> to the best workflow and get predictions and metrics for the testing data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># grid tune</span></span>
<span id="cb23-2">best_hyp <span class="ot" style="color: #003B4F;">&lt;-</span> grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-3">        <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"roc_auc"</span>)</span>
<span id="cb23-4"></span>
<span id="cb23-5">best_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-6">        <span class="fu" style="color: #4758AB;">finalize_workflow</span>(best_hyp)</span>
<span id="cb23-7"></span>
<span id="cb23-8">grid_last_fit <span class="ot" style="color: #003B4F;">&lt;-</span> best_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-9">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb23-10"></span>
<span id="cb23-11">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-12">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb23-13"></span>
<span id="cb23-14">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-15">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<p>The <code>predict</code> function can be directly applied to fitted model to test data. For grid fit, it will automatically detect the best hyperparameters (here mtry=5) and apply it to the testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb24-2">test_prediction <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb24-3">    default_cr_fit,</span>
<span id="cb24-4">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb24-5">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb24-11"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb24-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb24-13">test_prediction <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># best hyp</span></span>
<span id="cb25-3">grid_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">        <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(ROC))</span>
<span id="cb25-5"></span>
<span id="cb25-6">test_prediction2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb25-7">    grid_cr_fit,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb25-9">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-11">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb25-15"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction2, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb25-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb25-17">test_prediction2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-19">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-20">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
</section>
<section id="importance-of-variables" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-variables">9. importance of variables</h2>
<p>Lastly, we can use fit result to find most important variables by <code>vip</code> package or caret function <code>varImp</code>. Be aware that, for <code>tidymodels</code> different <code>importance</code> specified in the model will result in different ranks</p>
<p><strong>tidymodels</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pull_workflow_fit</span>(default_last_fit<span class="sc" style="color: #5E5E5E;">$</span>.workflow[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb26-2">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit)<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb26-3">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit, <span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"point"</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;"># model-specific variable importance scores are currently not available for objects of class "_rangermodel_fit"</span></span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">varImp</span>(default_cr_fit, <span class="at" style="color: #657422;">scale =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)<span class="sc" style="color: #5E5E5E;">$</span>importance <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span></code></pre></div>
</details>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The following table summarizes the ML workflow using caret versus tidymodels:</p>
</section>
<section id="thank-you" class="level2">
<h2 class="anchored" data-anchor-id="thank-you">Thank you</h2>
<p>Special thanks to <a href="https://www.linkedin.com/in/amygoodwindavies/">Amy Goodwin Davies</a> who helped editing and proof-reading this post!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>ML</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</guid>
  <pubDate>Thu, 30 Apr 2020 04:00:00 GMT</pubDate>
</item>
<item>
  <title>External persistent data I/O using ShinyApp</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</link>
  <description><![CDATA[ 



<p>Shiny App is a fantastic application in Rstudio and makes the data processing more accessible (and fun!). Most easy shiny apps are made to represent data based on a given user input which is read into memory or temporal file by R and spit out tables or figures in the same process. However, to make an app that need to keep the user input data for persistent storage and present in the future process require some external data I/O.</p>
<p>One of example app is survey app, in which user inputs will be accumulated for future presentation. Shiny rstudio presents this topic in an <a href="https://shiny.rstudio.com/articles/persistent-data-storage.html">article</a> written in 2017. However, my recent trial of those methods caused some troubles, either the packages/functions are deprecated or more strict authorization applied. In this post, I am going to introduce three persistent storage I have tried in my recent projects and complement that 2017 article with the updates.</p>
<section id="data-input-app" class="level2">
<h2 class="anchored" data-anchor-id="data-input-app">Data input app</h2>
<p>To start, I want to mention a <a href="https://gupsych.github.io/tquant/data-input.html">tutorial</a> on how to make survey app. In the tutorial, it mentioned how to read, save and re-load user input data from shiny app on a local machine. The critical part include:</p>
<ul>
<li>Create a table field to store each widget input (keep widget <code>inputId</code> and table field name same)</li>
<li>Save each user input data with a unique name in provided storage directory (<code>sprintf("%s_%s.rds", as.integer(Sys.time()), digest::digest(data))</code>)<br>
</li>
<li>Reload data file by file and field by field.<br>
</li>
<li>Reset survey by <code>update</code> widget</li>
</ul>
<p>In the tutorial example, the “provided storage directory” is in a local machine. Here I am going to introduce three external storage methods (AWS, dropbox and google spreadsheet) in the context of this dummy <a href="https://sckinta.shinyapps.io/SpeakerSignup/">survey app</a> I experiment with for Rladies Philly mentor-ship program.</p>
<p>In this dummy app, following widgets were made.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># define global options</span></span>
<span id="cb1-2">types<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Speaker"</span>,<span class="st" style="color: #20794D;">"Mentor"</span>)</span>
<span id="cb1-3">expertises<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academia to industry transition"</span>,<span class="st" style="color: #20794D;">"Transition to new field/industry"</span>,<span class="st" style="color: #20794D;">"Project/team management"</span>,<span class="st" style="color: #20794D;">"Making data science more accessible"</span>,<span class="st" style="color: #20794D;">"Working with big datasets"</span>,<span class="st" style="color: #20794D;">"Language research"</span>,<span class="st" style="color: #20794D;">"Data cleaning"</span>,<span class="st" style="color: #20794D;">"Capacity building"</span>,<span class="st" style="color: #20794D;">"Global health"</span>,<span class="st" style="color: #20794D;">"Data visualization"</span>,<span class="st" style="color: #20794D;">"Package creation"</span>,<span class="st" style="color: #20794D;">"Geospatial science"</span>,<span class="st" style="color: #20794D;">"Ecological modeling"</span>,<span class="st" style="color: #20794D;">"Mental health"</span>,<span class="st" style="color: #20794D;">"Building scalable tools"</span>,<span class="st" style="color: #20794D;">"Reproducible research"</span>,<span class="st" style="color: #20794D;">"App development"</span>)</span>
<span id="cb1-4">employment<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academic"</span>,<span class="st" style="color: #20794D;">"Pharmaceutical"</span>,<span class="st" style="color: #20794D;">"Financial"</span>,<span class="st" style="color: #20794D;">"Business"</span>,<span class="st" style="color: #20794D;">"Research"</span>,<span class="st" style="color: #20794D;">"Quality assurance"</span>,<span class="st" style="color: #20794D;">"Government/public sector"</span>)</span>
<span id="cb1-5">meets<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"In-person"</span>,<span class="st" style="color: #20794D;">"Remote (e.g. by phone or online)"</span>)</span>
<span id="cb1-6">genders<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"She/her"</span>, <span class="st" style="color: #20794D;">"He/him"</span>, <span class="st" style="color: #20794D;">"They/them"</span>,<span class="st" style="color: #20794D;">"Other"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># define user input widgets, put inputId into a field vector for late saveData/loadData</span></span>
<span id="cb1-10">fields <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"gender_wig"</span>, <span class="st" style="color: #20794D;">"linkedin_wig"</span>, <span class="st" style="color: #20794D;">"photo_wig"</span>,</span>
<span id="cb1-11">            <span class="st" style="color: #20794D;">"type_wig"</span>, <span class="st" style="color: #20794D;">"expertise_wig"</span>, <span class="st" style="color: #20794D;">"employment_wig"</span>, <span class="st" style="color: #20794D;">"meet_wig"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># user input widgets</span></span>
<span id="cb1-14">name_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"Name:"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-15">gender_wig  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;">"gender_wig"</span>, </span>
<span id="cb1-17">        <span class="st" style="color: #20794D;">"Pronouns:"</span>,</span>
<span id="cb1-18">        genders, </span>
<span id="cb1-19">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb1-20">        <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"none"</span></span>
<span id="cb1-21">)</span>
<span id="cb1-22">linkedin_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"linkedin_wig"</span>,<span class="st" style="color: #20794D;">"LinkedIn Profile Link:"</span>,<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-23">photo_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"photo_wig"</span>, <span class="st" style="color: #20794D;">"Your photo (eg. .jpeg, .png)"</span>, <span class="at" style="color: #657422;">accept =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"jpeg"</span>,<span class="st" style="color: #20794D;">"png"</span>))</span>
<span id="cb1-24">type_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-25">        <span class="st" style="color: #20794D;">"type_wig"</span>,</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;">"Available as mentor and/or speaker?"</span>, </span>
<span id="cb1-27">        types</span>
<span id="cb1-28">)</span>
<span id="cb1-29">expertise_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-30">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"expertise_wig"</span>,</span>
<span id="cb1-31">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Areas of expertise"</span>, </span>
<span id="cb1-32">        <span class="at" style="color: #657422;">choices =</span>  expertises,</span>
<span id="cb1-33">        <span class="at" style="color: #657422;">multiple =</span> T,</span>
<span id="cb1-34">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-35">)</span>
<span id="cb1-36">employment_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-37">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"employment_wig"</span>,</span>
<span id="cb1-38">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Primary type of employment"</span>, </span>
<span id="cb1-39">        <span class="at" style="color: #657422;">choices =</span>  employment,</span>
<span id="cb1-40">        <span class="at" style="color: #657422;">multiple =</span> F,</span>
<span id="cb1-41">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-42">)</span>
<span id="cb1-43">meet_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-44">        <span class="st" style="color: #20794D;">"meet_wig"</span>,</span>
<span id="cb1-45">        <span class="st" style="color: #20794D;">"If you are willing to serve as a mentor, </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">what is your preferred method of communication with your mentees?"</span>, </span>
<span id="cb1-46">        meets</span>
<span id="cb1-47">)</span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;"># button widgets</span></span>
<span id="cb1-50">clear_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"clear"</span>, <span class="st" style="color: #20794D;">"Clear Form"</span>)</span>
<span id="cb1-51">submit_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"submit"</span>, <span class="st" style="color: #20794D;">"Submit"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="aws" class="level2">
<h2 class="anchored" data-anchor-id="aws">AWS</h2>
<p>In 2017 rstudio article, <code>{aws.s3}</code> package is used for communication between app and AWS.S3 external database. <code>{aws.s3}</code> can be installed through.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"aws.s3"</span>, <span class="at" style="color: #657422;">repos =</span> <span class="st" style="color: #20794D;">"https://cloud.R-project.org"</span>)</span></code></pre></div>
</details>
</div>
<p><em>When I was making the app, the CRAN repo was orphan. The <a href="https://github.com/cloudyr/aws.s3">github repo of aws.s3</a> could not easily be installed while publishing the app on shinyapps.io or rstudio connect, because their github repo missed creator assignment in DESCRIPTION. Also Now it is back to normal with new <a href="https://github.com/cloudyr/aws.s3/issues/335">commit</a>.</em></p>
<section id="authentication" class="level4">
<h4 class="anchored" data-anchor-id="authentication">Authentication</h4>
<p>Next step is to set up aws.s3, same as 2017 rstudio artical, use the code below to set up in R</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">s3BucketName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"&lt;bucket_name&gt;"</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="st" style="color: #20794D;">"AWS_ACCESS_KEY_ID"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_ACCESS_KEY_ID&gt;"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;">"AWS_SECRET_ACCESS_KEY"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_SECRET_ACCESS_KEY&gt;"</span>,</span>
<span id="cb3-4">           <span class="st" style="color: #20794D;">"AWS_DEFAULT_REGION"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"us-east-2"</span>)</span></code></pre></div>
</details>
</div>
<p>To use aws.s3, we first need to have a AWS account and set up s3 bucket. To set up a s3 bucket, you can sign in to the <a href="https://aws.amazon.com/console/">Console</a> and click S3 under “Storage”. Under Amazon S3, you can create a bucket with a unique bucket name (Keep this name to <code>s3BucketName</code>) and selected region (Remember this selected region, it will become value for <code>AWS_DEFAULT_REGION</code>. Mine is us-east-2). Then you will be back to the bucket list page.</p>
<p>To obtain the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY, drop down your profile name on the top right menu, click “My Security Credentials”,</p>
<p><img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/nRL7M41/pic1.png" class="img-fluid"></p>
<p>Then at “Access keys (access key ID and secret access key” click “Create New Access Key”. Remember to save this, you cannot find this access key listed later. <img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/89ZXJrd/pic2.png" class="img-fluid"></p>
</section>
<section id="savedata" class="level4">
<h4 class="anchored" data-anchor-id="savedata">saveData</h4>
<p>In the <a href="https://sckinta.shinyapps.io/SpeakerSignup/">demo app</a>, each user entry include text input and a picture file. To make the picture file and text input match for each entry, I keep the same prefix and save new image name as one variable in data.frame.</p>
<p>The <code>saveData</code> function code:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb4-2">        <span class="co" style="color: #5E5E5E;"># create a empty data frame</span></span>
<span id="cb4-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-4">        <span class="co" style="color: #5E5E5E;"># loop through every field</span></span>
<span id="cb4-5">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb4-6">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb4-7">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-8">                  <span class="co" style="color: #5E5E5E;"># fileInput widget with value</span></span>
<span id="cb4-9">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb4-10">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb4-11">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb4-12">                        }</span>
<span id="cb4-13">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb4-14">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb4-15">                        }</span>
<span id="cb4-16">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-17">                  <span class="co" style="color: #5E5E5E;"># fileInput widget without value, assign a place holder image saved in bucket</span></span>
<span id="cb4-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-19">                }</span>
<span id="cb4-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-22">                          <span class="co" style="color: #5E5E5E;"># text widgets without value</span></span>
<span id="cb4-23">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb4-24">                        }</span>
<span id="cb4-25">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb4-26">                          <span class="co" style="color: #5E5E5E;"># text widgets (checkboxGroupInput) with multiple values</span></span>
<span id="cb4-27">                                </span>
<span id="cb4-28">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb4-29">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-30">                          <span class="co" style="color: #5E5E5E;"># text widgets with single value</span></span>
<span id="cb4-31">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb4-32">                        }</span>
<span id="cb4-33">                }</span>
<span id="cb4-34">        }</span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;"># input timestamp</span></span>
<span id="cb4-36">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb4-37">        </span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb4-39">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb4-40">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb4-41">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-42">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb4-43">                name1, </span>
<span id="cb4-44">                name2</span>
<span id="cb4-45">        )</span>
<span id="cb4-46">        </span>
<span id="cb4-47">        <span class="co" style="color: #5E5E5E;"># rename imagefilename and save image file to s3</span></span>
<span id="cb4-48">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb4-49">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-50">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb4-51">                        name1, </span>
<span id="cb4-52">                        name2</span>
<span id="cb4-53">                )</span>
<span id="cb4-54">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb4-55">                <span class="co" style="color: #5E5E5E;"># save the image file to aws s3</span></span>
<span id="cb4-56">                aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">put_object</span>(</span>
<span id="cb4-57">                  <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName), </span>
<span id="cb4-58">                  <span class="at" style="color: #657422;">object =</span> img_newName, </span>
<span id="cb4-59">                  <span class="at" style="color: #657422;">bucket =</span> s3BucketName, </span>
<span id="cb4-60">                  <span class="at" style="color: #657422;">check_region =</span> F, <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb4-61">                  )</span>
<span id="cb4-62">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-63">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-64">        }</span>
<span id="cb4-65">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"https://rladiesmentor.s3.us-east-2.amazonaws.com/"</span>,img_newName)</span>
<span id="cb4-66">        </span>
<span id="cb4-67">        <span class="co" style="color: #5E5E5E;"># save df as rds to the aws s3</span></span>
<span id="cb4-68">        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3save</span>(data, <span class="at" style="color: #657422;">bucket =</span> s3BucketName, <span class="at" style="color: #657422;">object =</span> fileName)</span>
<span id="cb4-69">        </span>
<span id="cb4-70">        </span>
<span id="cb4-71">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata" class="level4">
<h4 class="anchored" data-anchor-id="loaddata">loadData</h4>
<p>To retrive the data from bucket, we can use following <code>loadData</code> function</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb5-2">        <span class="co" style="color: #5E5E5E;"># read all the rds files into a list</span></span>
<span id="cb5-3">        files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">get_bucket</span>(s3BucketName), <span class="cf" style="color: #003B4F;">function</span>(x){x[[<span class="st" style="color: #20794D;">"Key"</span>]]})</span>
<span id="cb5-4">        files <span class="ot" style="color: #003B4F;">&lt;-</span> files[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.rds"</span>,files)]</span>
<span id="cb5-5">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(files) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb5-6">                <span class="co" style="color: #5E5E5E;"># create an empty data frame with additional timestamp column if no entries at aws s3</span></span>
<span id="cb5-7">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb5-8">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb5-9">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb5-10">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-11">                <span class="co" style="color: #5E5E5E;"># load data s3load entry by entry if there are entries at aws s3</span></span>
<span id="cb5-12">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(files, <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb5-13">                        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3load</span>(x, <span class="at" style="color: #657422;">bucket =</span> s3BucketName)</span>
<span id="cb5-14">                        data</span>
<span id="cb5-15">                })</span>
<span id="cb5-16">                </span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;"># concatenate all data together into one data.frame</span></span>
<span id="cb5-18">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, data)</span>
<span id="cb5-19">        }</span>
<span id="cb5-20">        </span>
<span id="cb5-21">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb5-22">        </span>
<span id="cb5-23"></span>
<span id="cb5-24">        <span class="co" style="color: #5E5E5E;"># make image src as one output column</span></span>
<span id="cb5-25">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb5-26">                <span class="at" style="color: #657422;">photo=</span><span class="fu" style="color: #4758AB;">sapply</span>(data<span class="sc" style="color: #5E5E5E;">$</span>photo.link,<span class="cf" style="color: #003B4F;">function</span>(pic){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'&lt;img src='</span>,pic,<span class="st" style="color: #20794D;">' height=52&gt;&lt;/img&gt;'</span>)})</span>
<span id="cb5-27">        )</span>
<span id="cb5-28">        <span class="co" style="color: #5E5E5E;"># make name column a link</span></span>
<span id="cb5-29">        out <span class="ot" style="color: #003B4F;">=</span> out <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-30">                <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(<span class="cf" style="color: #003B4F;">function</span>(url,text){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)}, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name))</span>
<span id="cb5-31">        </span>
<span id="cb5-32">        <span class="co" style="color: #5E5E5E;"># output data frame for dataTableRender</span></span>
<span id="cb5-33">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb5-34">                out <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb5-35">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb5-36">        )</span>
<span id="cb5-37">        out</span>
<span id="cb5-38">}</span></code></pre></div>
</details>
</div>
<p>To make the image file readable by link, you have to change the bucket public access permission, and make anyone can read it.</p>
</section>
</section>
<section id="dropbox" class="level2">
<h2 class="anchored" data-anchor-id="dropbox">Dropbox</h2>
<p><code>rdrop2</code> is the package R used to communicate with dropbox, and can be directly installed from CRAN.</p>
<section id="authentication-1" class="level4">
<h4 class="anchored" data-anchor-id="authentication-1">Authentication</h4>
<p>After installation, we need to authenticate R to access your dropbox (like AWS authentication key). Instead of obtaining directly from website, first time <code>drop_auth()</code> will direct you to web browser for dropbox authentication.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(rdrop2)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"># for remote use (deploy app to shinyapps.io or rstudio connect), you can save your auth to rds and load it to host platform</span></span>
<span id="cb6-6">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;">saveRDS</span>(token, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"token.rds"</span>)</span></code></pre></div>
</details>
</div>
<p>Caution: this token authorize anyone with token file an access to all the files in your dropbox account.</p>
<p>When you are ready to use the token to allow access the data at remote setting, you can do</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># this part should be included in your shinyapp code</span></span>
<span id="cb7-2">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load</span>(<span class="st" style="color: #20794D;">"token.rds"</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">drop_acc</span>(<span class="at" style="color: #657422;">dtoken =</span> token)</span></code></pre></div>
</details>
</div>
</section>
<section id="savedata-1" class="level4">
<h4 class="anchored" data-anchor-id="savedata-1">saveData</h4>
<p>Unlike AWS S3, I choose to aggregate individual entries into one csv file (You can do the same thing in AWS S3 too). The <code>saveData</code> function for dropbox is</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb8-2">        <span class="co" style="color: #5E5E5E;"># read previously stored csv file</span></span>
<span id="cb8-3">        old_df <span class="ot" style="color: #003B4F;">=</span> rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb8-4">        </span>
<span id="cb8-5">        <span class="co" style="color: #5E5E5E;"># save one user entry to a new data frame (like AWS above)</span></span>
<span id="cb8-6">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb8-8">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb8-9">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-10">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb8-11">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb8-12">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb8-13">                        }</span>
<span id="cb8-14">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb8-15">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb8-16">                        }</span>
<span id="cb8-17">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-19">                }</span>
<span id="cb8-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-22">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb8-23">                        }</span>
<span id="cb8-24">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb8-25">                                <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb8-26">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb8-27">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-28">                                <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb8-29">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb8-30">                        }</span>
<span id="cb8-31">                }</span>
<span id="cb8-32">        }</span>
<span id="cb8-33">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb8-35">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb8-36">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb8-37">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-38">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb8-39">                name1, </span>
<span id="cb8-40">                name2</span>
<span id="cb8-41">        )</span>
<span id="cb8-42">        </span>
<span id="cb8-43">        <span class="co" style="color: #5E5E5E;"># rename and save imagefilename</span></span>
<span id="cb8-44">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb8-45">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-46">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb8-47">                        name1, </span>
<span id="cb8-48">                        name2</span>
<span id="cb8-49">                )</span>
<span id="cb8-50">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-51">                rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-52">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-53">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-54">        }</span>
<span id="cb8-55">        </span>
<span id="cb8-56">        <span class="co" style="color: #5E5E5E;"># add phone name to data column</span></span>
<span id="cb8-57">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span>img_newName</span>
<span id="cb8-58">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb8-59">        </span>
<span id="cb8-60">        <span class="co" style="color: #5E5E5E;"># append new entry to the old_df</span></span>
<span id="cb8-61">        new_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(old_df, data)</span>
<span id="cb8-62">        <span class="co" style="color: #5E5E5E;"># write new_df csv to a temp file</span></span>
<span id="cb8-63">        <span class="fu" style="color: #4758AB;">write.csv</span>(new_df, <span class="at" style="color: #657422;">file=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-64">        <span class="co" style="color: #5E5E5E;"># upload this temp file to dropbox</span></span>
<span id="cb8-65">        rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-66">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-1" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-1">loadData</h4>
<p>From above example, you may notice that all the file need to be saved at local for a moment before uploading dropbox. In other words, rdrop2 only deals file level data. Thus, if you want to retrieve unstructural file (not csv), you have to download the file to local, then show it. It will not work for links (because no way to set public access permissions in dropbox). Thus at loadData, I cannot make the image readable unless I download data to the local. The following example only show the data frame load, comment out the image part.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb9-2">        <span class="co" style="color: #5E5E5E;"># read csv</span></span>
<span id="cb9-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb9-4">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">nrow</span>(data) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb9-5">                <span class="co" style="color: #5E5E5E;"># create empty data frame with correct columns</span></span>
<span id="cb9-6">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb9-7">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb9-8">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb9-9">        } </span>
<span id="cb9-10">        </span>
<span id="cb9-11">        <span class="co" style="color: #5E5E5E;"># drop_get("jigglypuff.jpeg")</span></span>
<span id="cb9-12">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb9-13">        <span class="co" style="color: #5E5E5E;"># out = tibble(</span></span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;">#         photo=sapply(data$photo.link,function(pic){paste0('&lt;img src=',pic,' height=52&gt;&lt;/img&gt;')})</span></span>
<span id="cb9-15">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;"># out = out %&gt;%</span></span>
<span id="cb9-17">        <span class="co" style="color: #5E5E5E;">#         mutate(name=mapply(function(url,text){paste0("&lt;a href='",url,"'&gt;",text,"&lt;/a&gt;")}, data$linkedin, data$name))</span></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;"># out = bind_cols(</span></span>
<span id="cb9-19">        <span class="co" style="color: #5E5E5E;">#         out %&gt;% as.data.frame(),</span></span>
<span id="cb9-20">        <span class="co" style="color: #5E5E5E;">#         data[,c("pronoun","signUp.type","expertises","primary.employment","preferred.mentor.method")]</span></span>
<span id="cb9-21">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-22">        out<span class="ot" style="color: #003B4F;">=</span>data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb9-23">        out</span>
<span id="cb9-24">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="googlesheets" class="level2">
<h2 class="anchored" data-anchor-id="googlesheets">googlesheets</h2>
<p>Two packages <code>googledrive</code> and <code>googlesheets4</code> are required for googlesheet data I/O. The main reason is that googlesheets4 have updated their security setting and made spreadsheet direct writing impossible. The way to get around is to use <code>googledrive::drive_download</code> to download the file to local, update the dataframe and save to a local file with same name like before, then use <code>googledrive::drive_update</code> to push the new file to the google drive. It is very similar to <code>rdrop2</code> file-level communication method. (Note: both <code>googledrive</code> and <code>googlesheets4</code> needs <code>gargle_oauth</code>).</p>
<section id="authentication-2" class="level4">
<h4 class="anchored" data-anchor-id="authentication-2">Authentication</h4>
<p>Googlesheets used <code>gargle_oauth</code> to prompt a web page for authentication. The code to set up authentication at local</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb10-2">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drive_auth</span>()</span>
<span id="cb10-3">googlesheets4<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">sheets_auth</span>()</span></code></pre></div>
</details>
</div>
<p>Usually you do not need to explicitly prompt auth using above code. Using functions in <code>googledrive</code> and <code>googlesheets4</code> will automatically trigger the authentication.</p>
<p>After authentication, you can check your tokens by</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gargle_oauth_sitrep</span>()</span></code></pre></div>
</details>
</div>
<p>The authentication step automatically generated token files under <code>~/.R/gargle/gargle-oauth/</code>. If the app work in local, that is all we need to do. If you want to deploy to hosting platform, we need to make this authentication non-interactive (no need for web browser to prompt a page). One way is to make your token files available for remote server access.</p>
<p>To make tokens available for remote server access, you can copy the email account authentication to the same directory app.R saved at. Since we have tokens associated with both <code>googledrive</code> and <code>googlesheets4</code>, we will end up have two token files. To move both token files to app directory. Using following shell code</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mkdir .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-2">cd .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-3">cp <span class="sc" style="color: #5E5E5E;">~</span><span class="er" style="color: #AD0000;">/</span>.R<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">-</span>oauth<span class="sc" style="color: #5E5E5E;">/</span><span class="er" style="color: #AD0000;">*</span>youremailname<span class="sc" style="color: #5E5E5E;">*</span> .</span></code></pre></div>
</details>
</div>
<p>When it is time to depoly, select .secret/ to upload to platform. In the app.R code, we just need to add following line to designate project-specific cache.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">options</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">gargle_oauth_cache =</span> <span class="st" style="color: #20794D;">".secret"</span>,</span>
<span id="cb13-3">        <span class="at" style="color: #657422;">gargle_oauth_email =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb13-4">)</span></code></pre></div>
</details>
</div>
<p>This is not the most secure way, but easiest way. If you want to explore more secure way for this purpose, please ref to <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html">non-interacive authentication in gargle</a></p>
</section>
<section id="savedata-2" class="level4">
<h4 class="anchored" data-anchor-id="savedata-2">saveData</h4>
<p>As alreadly mentioned, googledrive use file-level communication. We first used <code>drive_fine</code> to find which spreadsheet to read, then download using <code>googledrive::drive_download</code>, finally update/unload spreadsheet <code>googledrive::drive_update</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb14-2">        <span class="co" style="color: #5E5E5E;"># download previous spreadsheet to tempfile</span></span>
<span id="cb14-3">        tmpDir<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb14-4">        mentors<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)</span>
<span id="cb14-5">        <span class="fu" style="color: #4758AB;">drive_download</span>(<span class="fu" style="color: #4758AB;">as_id</span>(mentors), <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"csv"</span>, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">overwrite=</span>T)</span>
<span id="cb14-6">        </span>
<span id="cb14-7">        <span class="co" style="color: #5E5E5E;"># read spreadsheet to df</span></span>
<span id="cb14-8">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(tmpDir)</span>
<span id="cb14-9">        </span>
<span id="cb14-10">        <span class="co" style="color: #5E5E5E;"># read input to data</span></span>
<span id="cb14-11">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb14-12">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb14-13">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb14-14">                <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb14-15">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb14-16">                }</span>
<span id="cb14-17">                <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb14-18">                        <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb14-19">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(var,<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">", "</span>)</span>
<span id="cb14-20">                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb14-21">                        <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb14-22">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb14-23">                }</span>
<span id="cb14-24">        }</span>
<span id="cb14-25">        </span>
<span id="cb14-26">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb14-27">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"email"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>)</span>
<span id="cb14-28">        </span>
<span id="cb14-29">        <span class="co" style="color: #5E5E5E;"># append new data</span></span>
<span id="cb14-30">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(df, data)</span>
<span id="cb14-31">        </span>
<span id="cb14-32">        <span class="co" style="color: #5E5E5E;"># write into tempfile</span></span>
<span id="cb14-33">        <span class="fu" style="color: #4758AB;">write_csv</span>(df, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">na=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb14-34">        </span>
<span id="cb14-35">        <span class="co" style="color: #5E5E5E;"># update mentors spreadsheet</span></span>
<span id="cb14-36">        mentors <span class="ot" style="color: #003B4F;">&lt;-</span> mentors <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-37">          <span class="fu" style="color: #4758AB;">drive_update</span>(</span>
<span id="cb14-38">                tmpDir,</span>
<span id="cb14-39">                <span class="at" style="color: #657422;">name=</span><span class="st" style="color: #20794D;">"mentors"</span></span>
<span id="cb14-40">        )</span>
<span id="cb14-41">        <span class="co" style="color: #5E5E5E;"># drive_rm(mentors)</span></span>
<span id="cb14-42">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-2" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-2">loadData</h4>
<p><code>googlesheets</code> have a function <code>read_sheet</code> to read googlesheets directly to data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb15-2">        <span class="co" style="color: #5E5E5E;"># read spreadsheet</span></span>
<span id="cb15-3">        sheet_id<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)<span class="sc" style="color: #5E5E5E;">$</span>id</span>
<span id="cb15-4">        data<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">read_sheet</span>(sheet_id)</span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb15-6">        names <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-7">                <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-8">                        <span class="cf" style="color: #003B4F;">function</span>(url,text){</span>
<span id="cb15-9">                                <span class="cf" style="color: #003B4F;">if</span>(url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-10">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-11">                                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-12">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-13">                                }</span>
<span id="cb15-14">                        }, </span>
<span id="cb15-15">                        data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-16">                        )</span>
<span id="cb15-17">        )</span>
<span id="cb15-18">        links <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-19">                <span class="at" style="color: #657422;">links=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-20">                        <span class="cf" style="color: #003B4F;">function</span>(email, linkedin,text){</span>
<span id="cb15-21">                                <span class="cf" style="color: #003B4F;">if</span>(email<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> linkedin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-22">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-23">                                } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (linkedin<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> email<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-24">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-25">                                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb15-26">                                        <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb15-27">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>),</span>
<span id="cb15-28">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-29">                                        )</span>
<span id="cb15-30">                                }</span>
<span id="cb15-31">                        }, </span>
<span id="cb15-32">                        data<span class="sc" style="color: #5E5E5E;">$</span>email, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-33">                )</span>
<span id="cb15-34">        )</span>
<span id="cb15-35">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb15-36">                names <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb15-37">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)],</span>
<span id="cb15-38">                links <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb15-39">        )</span>
<span id="cb15-40">        out</span>
<span id="cb15-41">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, we introduce three ways to load and save data to external storage clound. AWS s3 is most secure and fleasible among three. It can store and load unstructure data easily, thus it does not require much memory cache from host server. But it is not free when data is very big. Dropbox can save both tubular and unstructural data, but retrieve unstructure requires downloading file to cache. Googlesheets can only read/save tubular data. Both dropbox and googlesheets have some secure concerns, but you can create a free account and designate that account for app development/test only to reduce concerns for security. The complete codes for finished app can be accessed from my <a href="https://github.com/sckinta/example_code/tree/master/shinyapp_examples">github</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>shiny</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</guid>
  <pubDate>Mon, 30 Mar 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.acsgrp.com/sites/default/files/sb-5.png" medium="image" type="image/png"/>
</item>
<item>
  <title>All about git</title>
  <dc:creator>Sckinta</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</link>
  <description><![CDATA[ 



<p>Recently I have actively participated two team projects (PAWS and 2020datahack) which involves multiple team members and a lot of group decisions. For the first time, I realized how important to use github as the platform for code sharing and communication. Here I am going to share several commands that I frequently used at this process and hope it will help people quickly pick up this useful collaboration tool.</p>
<section id="initiate-a-new-repo-at-github" class="level3">
<h3 class="anchored" data-anchor-id="initiate-a-new-repo-at-github">1. initiate a new repo at github</h3>
<p>Repository, aka repo, is a collection of codes, data and documentation designated for project(s). As far as you have github account, you can create public repo(s) through github webpage easily. Follow the step 1-5 on <a href="https://help.github.com/en/github/getting-started-with-github/create-a-repo">this website</a>, then you will create a repo with a few clicks. New repo usually comes with a README.md file. Using markdown format, you can describe the project in this README.md file which will be loaded to your repo main page when you open it. Here is the <a href="https://github.com/rladiesPHL/PAWS_return_noshow">repo</a> I created for Rladies-Philly PAWS projects.</p>
</section>
<section id="local-vs.-remote" class="level3">
<h3 class="anchored" data-anchor-id="local-vs.-remote">2. Local vs.&nbsp;remote</h3>
<p>One concept need to be clarified here is local vs.&nbsp;remote. <em>Github</em> is the most popular cloud-based service hosting repos. Those repo is managed by git installed at remote (aka, github here). So what is <em>git</em>? Git is a version control system that lets you manage and keep track of your source code history. It can also be <a href="https://git-scm.com/downloads">installed</a> at local and work as local version control system. In that case, your snapshot of each version will be saved at local instead of cloud.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># to initiate repo at local</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># suppose you have a project working now called repoX</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># all scripts/data/documentation are saved in a folder in your computer called repoX. </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Now you want to start git version control for this project</span></span>
<span id="cb1-5">cd repoX<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb1-6">git init</span>
<span id="cb1-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb1-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"initiate version control"</span></span></code></pre></div>
</details>
</div>
<p>The above code can be run on any shell-like terminal. And congrats, you have sucessefully create version control at local folder repoX/. <code>git commit</code> basically create a snapshot of this folder. If you want to change it back to this moment in the future, you can do it with commit number (it is hash code). It is important to write a meaningful message (like here “initiate version control”) to remind yourself what the snapshot is like. We will discuss how to recover using commit number in a little bit.</p>
</section>
<section id="clone-pull-and-push" class="level3">
<h3 class="anchored" data-anchor-id="clone-pull-and-push">3. clone, pull and push</h3>
<p>To communicate between your local and remote github, you can access through git by downloading (<code>pull</code>) remote to local and uploading (<code>push</code>) local repo to the cloud (github).</p>
<p>If you initiate repo from github first (step 1 above), you can first clone that repo to local. This repo will remember the remote address and allow you later pull from and push to the remote</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># here I use rladiesPHL/PAWS_return_noshow.git as my example</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># clone the repo to local</span></span>
<span id="cb2-4">git clone https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>rladiesPHL<span class="sc" style="color: #5E5E5E;">/</span>PAWS_return_noshow.git</span></code></pre></div>
</details>
</div>
<p>Anyone can clone a public repo to their local computer. However, to be able to <code>pull</code> and <code>push</code>, you need to be included as collaborators for that repo specially, or you are the repo owner yourself. To add someone as collaborator, follow the <a href="https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/inviting-collaborators-to-a-personal-repository">steps</a> by clicking on the webpage. Once you are the owner/collaborator, you can do following command to download and upload.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># initiate clone will create a folder at local called "PAWS_return_noshow", go to that folder</span></span>
<span id="cb3-2">cd PAWS_return_noshow<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># pull (the update) from PAWS_return_noshow (since the clone remember the remote address)</span></span>
<span id="cb3-4">git pull</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># you can do your analysis, do your update at local now</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># when it is time to upload your analysis to cloud, you first want to take a snapshot of what you have done so far</span></span>
<span id="cb3-9">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb3-10">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"my update"</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># now you can push your analysis to the github</span></span>
<span id="cb3-13">git push origin master</span></code></pre></div>
</details>
</div>
</section>
<section id="fork" class="level3">
<h3 class="anchored" data-anchor-id="fork">4. fork</h3>
<p>Above example is to push your analysis directly to the origin’s master branch. So what is <code>origin</code>? (what is the master branch will be explained in the next). Put it simple, you can consider origin as the place where is first downloaded. For example, I download PAWS_return_noshow repo from rladiesPHL account and the origin here will be rladiesPHL repo address (https://github.com/rladiesPHL/PAWS_return_noshow.git).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># to quick check your repo remote origin</span></span>
<span id="cb4-2">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (fetch)</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (push)</span></span></code></pre></div>
</details>
</div>
<p>Why is <code>origin</code> important? The origin determines which repo push and pull will go to/from. Some repo won’t allow you to push and pull because you are not the owner or collaborator. If you do not want request pull and push permission from the owner, you can <code>fork</code> the repo to your own github account. Here <code>fork</code> is like to clone a remote repo belonging to other poeple’s account at that snapshot to your own account. You can develope/make commits on repo without any push/pull permission obstables.</p>
<p>The easiest way to fork a repo is from webpage. You can follow the instruction on this <a href="https://help.github.com/en/enterprise/2.13/user/articles/fork-a-repo">help page</a>.</p>
<p>Be aware, if you <code>git clone</code> the forked repo from your github account, the “origin” is your own account repo. This repo is functionally independent from the upstream repo, although at top of your own repo page it will show “This branch is X commits ahead of/behind XXX:master.” when the upstream repo makes commits after forking. What if you want your own “forked” repo remember where it comes so that you can merge the future changes from the upstream repo to your “forked” repo?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># here I show an example of a forked repo at my own account (sckinta/datahack2020) linking back to the upstream account (CodeForPhilly/datahack2020)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># add a repo description called "upstream" and associated this name with upstream repo. Here "upstream" can be any name (eg. up, ori, ...)</span></span>
<span id="cb6-4">git remote add upstream https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>CodeForPhilly<span class="sc" style="color: #5E5E5E;">/</span>datahack2020.git</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># check remote info again you will find now repo have two remote associated with it. one is called "origin" and another is called "upstream"</span></span>
<span id="cb6-7">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (fetch)</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (push)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (fetch)</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (push)</span></span></code></pre></div>
</details>
</div>
<p>To update your forked repo at github, you need three steps: 1) <code>fetch</code> the upstream repo to your local repo; 2) <code>merge</code> updated fetch content into the main branch at local; 3) <code>push</code> updated local to remote forked repo</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># fecth upstream to local</span></span>
<span id="cb8-2">git fetch upstream</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Merge the updated fetch content into the main branch at local</span></span>
<span id="cb8-5">git merge upstream<span class="sc" style="color: #5E5E5E;">/</span>master</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Update, push to remote(fork) master branch</span></span>
<span id="cb8-8">git push origin master</span></code></pre></div>
</details>
</div>
<p>I highly suggest <code>pull</code> your forked repo to local first before <code>fetch</code> upstream. It will guarantee when you merge the upstream it will not cause the conflicts.</p>
</section>
<section id="branch" class="level3">
<h3 class="anchored" data-anchor-id="branch">5. branch</h3>
<p>After fork origin, another useful tool for collobarative project is using branch. “Branch”, as it is named, means a branch of analysis derived from the mainstream (which is by default named “master”). You can create branches on your own repo or the repo you have been invited as collaborator. This is the biggest difference between branch and a repo fork. To add a branch at local, using code <code>git checkout</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create and switch to a new branch (say, branch "chun")</span></span>
<span id="cb9-2">git checkout <span class="sc" style="color: #5E5E5E;">-</span>b chun</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># go back to the master</span></span>
<span id="cb9-5">git checkout master</span></code></pre></div>
</details>
</div>
<p>Now you can do your analysis in the repo fold. When you are ready to commit your new analysis, how will your repo know this analysis added to branch “chun”? Simple, using <code>git checkout</code> switch to chun branch and commit there. You can also push your new branch to remote, where the branch will show up under the <github_name>/<repo_name>/tree</repo_name></github_name></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># for example I push my new analysis to branch "chun" and finally push it to sckinta/datahack2020</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># switch to branch chun</span></span>
<span id="cb10-4">git checkout chun</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;"># make your new commit</span></span>
<span id="cb10-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb10-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"new analysis"</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;"># push it to github branch</span></span>
<span id="cb10-11">git push origin chun</span></code></pre></div>
</details>
</div>
<p>If you want to continue on other collaborator’s branch (say “abc”), you can pull that branch to local.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># download branch abc to your analysis</span></span>
<span id="cb11-2">git pull origin abc</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># check how many branches current local repo contains</span></span>
<span id="cb11-5">git branch</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># *chun</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">#   master</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">#   abc</span></span></code></pre></div>
</details>
</div>
<p>After everybody did their analysis on their own branch, your group finally determine we are going to merge branch “abc” to master and delete the branch “abc”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># go to the master first</span></span>
<span id="cb13-2">git checkout master</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;"># merge branch "abc" in</span></span>
<span id="cb13-5">git merge abc</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># delete old branch</span></span>
<span id="cb13-8">git checkout <span class="sc" style="color: #5E5E5E;">-</span>d abc</span></code></pre></div>
</details>
</div>
<p>Occasionally, this process doesn’t go smoothly. Conflicts may occur when you try to merge multiple branches in. Then you may need advance tools like <code>mergetool</code> and <code>opendiff</code>. Here I won’t explain them. Please refer to<a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_advanced_merging">git tutorial page</a> for further reading. All the simple branch and merge has also been best explained on <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">git tutorial</a>.</p>
</section>
<section id="recover-a-certain-commit" class="level3">
<h3 class="anchored" data-anchor-id="recover-a-certain-commit">6. Recover a certain commit</h3>
<p>One major reason we want to use version control is that we can revert to a old snapshot/commit if we want. To check the commits done to the current repo, you can try <code>git log</code>. The log is reported in reverse chronical order.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">git log <span class="sc" style="color: #5E5E5E;">--</span>oneline</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># ea03bb2 (HEAD -&gt; chun, origin/chun) clean and EDA on incident county</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># 3c659ec (upstream/master, origin/master, origin/HEAD, master) Merge pull request #7 from CodeForPhilly/branch_dubois</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;"># c76c701 (upstream/branch_dubois) updated outrigger &amp; added presentation</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># 29992c6 Merge pull request #6 from rjake/jake</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;"># 52c88ea Create psp_overdose_events.csv</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;"># 36495db Add codebook</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;"># 714f848 gitignore data files</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># 51e5974 added presentation slides</span></span></code></pre></div>
</details>
</div>
<p>To revert to a commit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># since we are currently at chun branch, we better go back to master where "3c659ec" is at</span></span>
<span id="cb16-2">git checkout master</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;"># revert to a commit</span></span>
<span id="cb16-5">git revert 3c659ec</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># the above command can also be</span></span>
<span id="cb16-8">git reset <span class="sc" style="color: #5E5E5E;">--</span>hard 3c659ec</span></code></pre></div>
</details>
</div>
<p>Remember all of above is only updated at local. If you want to make it show up at github, do a <code>add</code>, <code>commit</code> and <code>push</code> series.</p>
</section>
<section id="link-to-your-remote-account-at-local" class="level3">
<h3 class="anchored" data-anchor-id="link-to-your-remote-account-at-local">7. link to your remote account at local</h3>
<p>After introduce all above basic commands for git, the last thing I want to share is to set up the local git remote account. I probably shoud put it at #2.remote vs.&nbsp;local# part.</p>
<p>To globally set github account at local can save your effort to put account name and password everytime you want to push/pull to your own account.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># for example I set global account as rladiesPHL. This will save the global configuration to a ~/.gitconfig file. It will prompt password for you to input</span></span>
<span id="cb17-2">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.email <span class="st" style="color: #20794D;">"philly@rladies.org"</span></span>
<span id="cb17-3">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.name <span class="st" style="color: #20794D;">"rladiesPHL"</span></span></code></pre></div>
</details>
</div>
<p>Howver, sometimes I want to switch back to my personal account temperally to do a quick push. I wish git will prompt account and password for me to input</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># reset global account a little bit</span></span>
<span id="cb18-2">git config <span class="sc" style="color: #5E5E5E;">--</span>local credential.helper <span class="st" style="color: #20794D;">""</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># when you push, it will prompt account and password for me to input</span></span>
<span id="cb18-5">git push origin master</span></code></pre></div>
</details>
</div>
<p>All above are the frequently used git commands I used. Hope it will help anyone who is willing to use git version in their future project.</p>


</section>

 ]]></description>
  <category>bash</category>
  <category>git</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</guid>
  <pubDate>Tue, 11 Feb 2020 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Network visualization - Part 3</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>In the previous two posts, we discussed about IGRAPH object and how to manipulate, measure and cluster it. In this final post of network analysis series, I will focus on the network work visualization.</p>
<p>Network visualization are supported by two aspects — the aesthetics of network elements (aka, vertices and edges) and layout of network. There are multiple packages available for these aspects. I will focus on the basic igraph plot which is base R plot and the application of <code>ggraph</code> which use similar syntax comparable to ggplot2.</p>
<section id="aesthetics-of-network-elements" class="level1">
<h1>Aesthetics of network elements</h1>
<p>The aesthetics of both vertices and edges can be manipulated at color, transparency. Specially for vertices, we can also manipulate its shape, size and fill. For edges, we can manipulate its width/thickness, linetype, arrow and so on. Here, use simple example “actors” to show you how to present aesthetics using <code>igraph</code> default plot and <code>ggraph</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">actors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">age=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">48</span>,<span class="dv" style="color: #AD0000;">33</span>,<span class="dv" style="color: #AD0000;">45</span>,<span class="dv" style="color: #AD0000;">34</span>,<span class="dv" style="color: #AD0000;">21</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">gender=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>))</span>
<span id="cb1-5">relations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">from=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"David"</span>, <span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">same.dept=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;">friendship=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb1-10">  <span class="at" style="color: #657422;">advice=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-11">  )</span>
<span id="cb1-12">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_data_frame</span>(relations, <span class="at" style="color: #657422;">directed=</span><span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">vertices=</span>actors)</span></code></pre></div>
</details>
</div>
<section id="vertex-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="vertex-aesthetics">Vertex aesthetics</h2>
<p>Specify aesthetics in vertex attribute</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># make female and male color different</span></span>
<span id="cb2-2">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"vertice"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"red"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"blue"</span>))</span>
<span id="cb2-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"color"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>color)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-1.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># make age as size</span></span>
<span id="cb3-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb3-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"size"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>size)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The methods mentioned above can also be done by specify in <code>plot()</code>. One quick example below show the shape aesthetics. Check igraph valid shape names by <code>names(igraph:::.igraph.shapes)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># make gender as shape</span></span>
<span id="cb4-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">shape=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"circle"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"rectangle"</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">vertex.shape=</span>v<span class="sc" style="color: #5E5E5E;">$</span>shape)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">'topleft'</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">21</span>, <span class="dv" style="color: #AD0000;">22</span>),<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Be aware that the aesthetics specified by attributes can be overwritten by specifying in <code>plot()</code>. In addition, those aesthetics can also be used to apply to all vertices like <code>plot(g, vertex.shape="rectangle")</code>. The attributes to be manipulated in igraph (using base R) are limited. To find all the plotting attributes, try <code>?plot.igraph</code> or go to https://igraph.org/r/doc/plot.common.html</p>
<p>We can also draw attention to certain nodes by <code>mark.groups</code> in plot</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># mark dept</span></span>
<span id="cb5-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb5-4">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">plot</span>(g, </span>
<span id="cb5-6">     <span class="at" style="color: #657422;">mark.groups=</span><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-7">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name)),</span>
<span id="cb5-8">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"IT"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name))</span>
<span id="cb5-9">       ), </span>
<span id="cb5-10">     <span class="at" style="color: #657422;">mark.col=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#C5E5E7"</span>,<span class="st" style="color: #20794D;">"#ECD89A"</span>), <span class="at" style="color: #657422;">mark.border=</span><span class="cn" style="color: #8f5902;">NA</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/mark.groups-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> is a ggplot version of graph plotting. Using graph object as input, it can convert vertice attributes to plot attribute automatically or manually.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_range=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">40</span>))</span>
<span id="cb6-3">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"age_range"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size=</span>age_range, <span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">scale_size_continuous</span>(<span class="at" style="color: #657422;">breaks=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">30</span>,<span class="dv" style="color: #AD0000;">40</span>), <span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Almost all the {<code>ggplots</code>} theme, scale functions are available for {<code>ggraph</code>}. Refer to <a href="https://www.rdocumentation.org/packages/ggraph/versions/1.0.2">rdocumentation</a> for more details.</p>
</section>
<section id="edge-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="edge-aesthetics">Edge aesthetics</h2>
<p>Similar to vertex aesthetics, edge plotting aesthetics can be manipulated both {<code>igraph</code>} default plotting and {<code>ggraph</code>} plotting</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># use linetype present whether come from same department, and line width presents friendship</span></span>
<span id="cb7-2">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb7-6">  g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb7-8">  <span class="at" style="color: #657422;">edge.curved=</span>T</span>
<span id="cb7-9">)</span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Using {<code>ggraph</code>} to show edges attribute is much easier.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">edge_linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="facet" class="level2">
<h2 class="anchored" data-anchor-id="facet">Facet</h2>
<p>One big advantage of {<code>ggraph</code>} is to use facet. It can be <code>facet_edges</code> or <code>facet_nodes</code> or <code>facet_graph</code>. Here I will only show example of <code>facet_nodes</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">#  facet based on the dept</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">facet_nodes</span>(<span class="sc" style="color: #5E5E5E;">~</span>dept, <span class="at" style="color: #657422;">drop =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/facet_nodes-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="layout" class="level1">
<h1>Layout</h1>
<p>There are many layouts available for both igraph and ggraph pacakges. Igraph provides a huge amount of layouts. https://igraph.org/r/doc/layout_.html</p>
<ul>
<li><strong>Standard layouts</strong>
<ul>
<li><strong>bipartite</strong>: minimize edge-crossings in a simple two-row (or column) layout for bipartite graphs.</li>
<li><strong>star</strong>: place one node in the center and the rest equidistantly around it. <code>as_star()</code></li>
<li><strong>circle</strong>: place nodes in a circle in the order of their index. Consider using layout_igraph_linear with circular=TRUE for more control. <code>in_circle()</code></li>
<li><strong>nicely</strong>: default, tries to pick an appropriate layout. <code>nicely</code></li>
<li><strong>dh</strong>: uses Davidson and Harels simulated annealing algorithm to place nodes. <code>with_dh()</code></li>
<li><strong>gem</strong>: place nodes on the plane using the GEM force-directed layout algorithm. <code>with_gem</code></li>
<li><strong>graphopt</strong>: uses the Graphopt algorithm based on alternating attraction and repulsion to place nodes. <code>with_graphopt()</code></li>
<li><strong>grid</strong>:place nodes on a rectangular grid. <code>on_grid()</code></li>
<li><strong>mds</strong>: perform a multidimensional scaling of nodes using either the shortest path or a user supplied distance. <code>with_mds()</code></li>
<li><strong>sphere</strong>: place nodes uniformly on a sphere - less relevant for 2D visualizations of networks. <code>with_sphere()</code></li>
<li><strong>randomly</strong>: places nodes uniformly random. <code>randomly</code></li>
<li><strong>fr</strong>: places nodes according to the force-directed algorithm of Fruchterman and Reingold. <code>with_fr()</code></li>
<li><strong>kk</strong>: uses the spring-based algorithm by Kamada and Kawai to place nodes. <code>with_kk()</code></li>
<li><strong>drl</strong>: uses the force directed algorithm from the DrL toolbox to place nodes. <code>with_drl()</code></li>
<li><strong>lgl</strong>: uses the algorithm from Large Graph Layout to place nodes. See with_lgl <code>with_lgl()</code></li>
</ul></li>
<li><strong>Hierarchical layouts</strong>
<ul>
<li><strong>tree</strong>: uses the Reingold-Tilford algorithm to place the nodes below their parent with the parent centered above its children. <code>as_tree()</code></li>
<li><strong>sugiyama</strong>: designed for directed acyclic graphs (that is, hierarchies where multiple parents are allowed) it minimizes the number of crossing edges.</li>
</ul></li>
</ul>
<p>Here we are going to show an example how to switch standard layout using the same data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># star layout -- help determine center</span></span>
<span id="cb10-3">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">as_star</span>())</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"start"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># circle layout</span></span>
<span id="cb10-8">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">in_circle</span>())</span>
<span id="cb10-9"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-10"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"circle"</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb10-13">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">on_grid</span>())</span>
<span id="cb10-14"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-15"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"grid"</span>)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;"># nicely</span></span>
<span id="cb10-18">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb10-19"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-20"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"nicely"</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;"># kk</span></span>
<span id="cb10-23">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_kk</span>())</span>
<span id="cb10-24"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-25"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"Kamada and Kawai(kk)"</span>)</span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;"># fr</span></span>
<span id="cb10-28">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_fr</span>())</span>
<span id="cb10-29"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-30"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"force-directed(fr)"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/layout_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Hierarchical layouts can plot data in layer. Here show example how to use sugiyama layout</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># make different dept nodes at different node</span></span>
<span id="cb11-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb11-4"></span>
<span id="cb11-5">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">layer=</span><span class="fu" style="color: #4758AB;">ifelse</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-7"></span>
<span id="cb11-8">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-11"></span>
<span id="cb11-12">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty)</span>
<span id="cb11-13"></span>
<span id="cb11-14">lay1 <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">layout_with_sugiyama</span>(g, <span class="at" style="color: #657422;">layers=</span>v<span class="sc" style="color: #5E5E5E;">$</span>layer, <span class="at" style="color: #657422;">attributes=</span><span class="st" style="color: #20794D;">"all"</span>)</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="fu" style="color: #4758AB;">plot</span>(lay1<span class="sc" style="color: #5E5E5E;">$</span>extd_graph, <span class="at" style="color: #657422;">edge.curved=</span>T)</span>
<span id="cb11-17"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-18"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-19"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/sugiyama_layout-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> can use all the layout mentioned above by specifying it in <code>ggraph(g, layout=...)</code>. Besides, ggraph has addtional useful layout.</p>
<ul>
<li>dendrogram: dendrogram layout not only take in graph object but also dendrogram object (<code>as.dendrogram(hclust(dist(...)))</code>). ggraph will automatically convert dendrogram to igraph by <code>den_to_igraph</code>. It ususally plots using <code>geom_edge_diagonal()</code> or <code>geom_edge_elbow()</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">den <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.dendrogram</span>(<span class="fu" style="color: #4758AB;">hclust</span>(<span class="fu" style="color: #4758AB;">dist</span>(mtcars)))</span>
<span id="cb12-2">p1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_edge_diagonal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">nudge_y=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-6">p2 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>, <span class="at" style="color: #657422;">circular =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">geom_edge_elbow</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">coord_fixed</span>()<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-11"><span class="fu" style="color: #4758AB;">grid.arrange</span>(p1,p2,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/dendrogram-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>hive: make nodes group into a axis and connecting axis instead.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="st" style="color: #20794D;">'hive'</span>, <span class="at" style="color: #657422;">axis =</span> age_range, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;">geom_edge_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_width=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">geom_axis_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> age_range), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">coord_fixed</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/hive-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>linear: make nodes only the same line so that arc connections were made</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">'linear'</span>, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;">geom_edge_arc</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_alpha=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;">scale_edge_alpha</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.3</span>,<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/linear_arc-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>More functions about ggraph refer to https://www.rdocumentation.org/packages/ggraph/versions/1.0.2</p>
</section>
<section id="other-packages-for-graph-visualization" class="level1">
<h1>other packages for graph visualization</h1>
<p>There are many other packages available for graph visualization and network analysis. In this series, I will only list the link here for the further reference. I may come back to further this topic in the future when necessary.</p>
<p><strong>Network analysis tool</strong>: Statnet<sup>1</sup></p>
<p><strong>Network visualization</strong>: ggnet<sup>2</sup></p>
<p><strong>Interactive network</strong> :</p>
<ul>
<li><p>visNetwork<sup>3</sup></p></li>
<li><p>jstree<sup>4</sup></p></li>
<li><p>Ndtv<sup>5</sup></p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://statnet.org/trac/wiki↩︎</p></li>
<li id="fn2"><p>https://briatte.github.io/ggnet/↩︎</p></li>
<li id="fn3"><p>https://datastorm-open.github.io/visNetwork/↩︎</p></li>
<li id="fn4"><p>https://bwlewis.github.io/rthreejs/↩︎</p></li>
<li id="fn5"><p>http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>network</category>
  <category>visualization</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</guid>
  <pubDate>Wed, 04 Sep 2019 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/thomasp85/ggraph/febab71076d7cf277cdb79b823f262b626651703/man/figures/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Network Analysis in R - Part 2</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2.html</link>
  <description><![CDATA[ 



<p>In last post, I covered the basic components of IGRAPH objects and how to manipulate IGRAPH. You may notice that most of those manipulation do not really require a IGRAPH object to play with. However, in this post, you will realize the advantage of using IGRAPH over data.frame in network analysis.</p>
<p>In this session, we are going to use a new un-directed graph called <code>gr</code> generated by <code>sample_gnp()</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(igraph)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(ggraph)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(gridExtra)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># generate random graph </span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">12</span>) </span>
<span id="cb2-3">gr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample_gnp</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="fl" style="color: #AD0000;">0.3</span>)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">plot</span>(gr)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2_files/figure-html/gr-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<section id="graph-measurement" class="level1">
<h1>Graph measurement</h1>
<section id="degree-and-strength" class="level2">
<h2 class="anchored" data-anchor-id="degree-and-strength">Degree and strength</h2>
<p><strong>Degree</strong> measures the number of edges connected to given vertex. In <code>igraph</code>, we use <code>degree</code>. Be aware that, for directed graph, the node degree can be <strong>“in-degree”</strong> (the edge number pointing to the node) and <strong>“out-degree”</strong> (the edge number pointing from node). We can also summaries the all degree by using <code>degree_distribution</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># get degree for each node </span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">degree</span>(gr, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1 1 4 1 3 2 1 4 3 2</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># degree distribution</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">degree_distribution</span>(gr) <span class="co" style="color: #5E5E5E;"># probability for degree 0,1,2,3,4</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0 0.4 0.2 0.2 0.2</code></pre>
</div>
</div>
<p><code>strength</code> is weighted version of <code>degree</code>, by summing up the edge weights of the adjacent edges for each vertex.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># add random weight attribute</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb7-3">gr2 <span class="ot" style="color: #003B4F;">&lt;-</span> gr <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;">"weight"</span>,<span class="at" style="color: #657422;">index=</span><span class="fu" style="color: #4758AB;">E</span>(gr),</span>
<span id="cb7-5">  <span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="fl" style="color: #AD0000;">0.05</span>),<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">E</span>(gr)))</span>
<span id="cb7-6">)</span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"># calculate strength</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">strength</span>(gr2, <span class="at" style="color: #657422;">weights =</span> <span class="fu" style="color: #4758AB;">E</span>(gr)<span class="sc" style="color: #5E5E5E;">$</span>weight)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1.00 0.05 2.65 0.20 1.45 1.20 0.20 2.85 1.85 1.65</code></pre>
</div>
</div>
</section>
<section id="orderdistance-and-path" class="level2">
<h2 class="anchored" data-anchor-id="orderdistance-and-path">Order/distance and path</h2>
<p>Order measures the edge number from one node to the other. In <code>igraph</code> package, we use <code>distances</code> function to get order between two vertices. For directed graph, <code>in</code> mode only follow the paths toward the first node, while <code>out</code> mode goes away from the first node. If no connection can be made, <code>Inf</code> will be return.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># count all edges from 1 to 10, regardless of direction </span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">distances</span>(gr, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">to=</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">mode=</span><span class="st" style="color: #20794D;">"all"</span>, <span class="at" style="color: #657422;">weights =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]    3</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># pairwise distance table </span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">distances</span>(gr, <span class="at" style="color: #657422;">mode=</span><span class="st" style="color: #20794D;">"all"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    4    2  Inf    3    3  Inf    2    1     3
 [2,]    4    0    2  Inf    1    2  Inf    3    3     3
 [3,]    2    2    0  Inf    1    2  Inf    1    1     1
 [4,]  Inf  Inf  Inf    0  Inf  Inf    1  Inf  Inf   Inf
 [5,]    3    1    1  Inf    0    1  Inf    2    2     2
 [6,]    3    2    2  Inf    1    0  Inf    1    2     2
 [7,]  Inf  Inf  Inf    1  Inf  Inf    0  Inf  Inf   Inf
 [8,]    2    3    1  Inf    2    1  Inf    0    1     1
 [9,]    1    3    1  Inf    2    2  Inf    1    0     2
[10,]    3    3    1  Inf    2    2  Inf    1    2     0</code></pre>
</div>
</div>
<p>To get detail route from one node to the other, we use <code>path</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># shortest path to connect</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">all_shortest_paths</span>(gr, <span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">10</span>)<span class="sc" style="color: #5E5E5E;">$</span>res</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
+ 4/10 vertices, from 2d81952:
[1]  1  9  8 10

[[2]]
+ 4/10 vertices, from 2d81952:
[1]  1  9  3 10</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># all path to connect</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">all_simple_paths</span>(gr, <span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
+ 7/10 vertices, from 2d81952:
[1]  1  9  3  5  6  8 10

[[2]]
+ 5/10 vertices, from 2d81952:
[1]  1  9  3  8 10

[[3]]
+ 4/10 vertices, from 2d81952:
[1]  1  9  3 10

[[4]]
+ 5/10 vertices, from 2d81952:
[1]  1  9  8  3 10

[[5]]
+ 7/10 vertices, from 2d81952:
[1]  1  9  8  6  5  3 10

[[6]]
+ 4/10 vertices, from 2d81952:
[1]  1  9  8 10</code></pre>
</div>
</div>
</section>
<section id="transitivity" class="level2">
<h2 class="anchored" data-anchor-id="transitivity">Transitivity</h2>
<p><strong>Transitivity</strong> measures the probability that the adjacent vertices of a vertex are connected. This is also called the <strong>clustering coefficient</strong>, a proxy to determine how well connected the graph is. This property is very important in social networks, and to a lesser degree in other networks.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># two extreme classes -- full graph and ring graph</span></span>
<span id="cb17-2">g1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">make_full_graph</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;">plot</span>(g1)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2_files/figure-html/Transitivity-1.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">transitivity</span>(g1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">g2 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">make_ring</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;">plot</span>(g2)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2_files/figure-html/Transitivity-2.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">transitivity</span>(g2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<p>There are multiple different types of transitivity can be calculated (weighted or un-weighted). Also, the transitivity can be calculated locally for a sub-graph by specifying vertex ids. See details by <code>?transitivity</code></p>
</section>
<section id="centrality" class="level2">
<h2 class="anchored" data-anchor-id="centrality">Centrality</h2>
<p><strong>Centrality</strong> indices identify the most important vertices within a graph. In other words, the “hub” of network. However, this “importance” can be conceived in two ways:</p>
<ul>
<li>relation to a type of flow or transfer across the network.</li>
<li>involvement in the cohesiveness of the network</li>
</ul>
<p>The simplest of centrality indicator is degree centrality (<code>centr_degree</code>), aka, a node is important if it has most neighbors.</p>
<p>Besides degree centrality, there are</p>
<ul>
<li>closeness centrality (<code>centr_clo</code>) - a node is important if it takes the shortest mean distance from a vertex to other vertices</li>
<li>between-ness centrality (<code>centr_betw</code>) - a node is important if extent to which a vertex lies on paths between other vertices are high.</li>
<li>eigenvector centrality (<code>centr_eigen</code>) - a node is important if it is linked to by other important nodes.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">centr_degree</span>(gr, <span class="at" style="color: #657422;">mode=</span><span class="st" style="color: #20794D;">"all"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>$res
 [1] 1 1 4 1 3 2 1 4 3 2

$centralization
[1] 0.2

$theoretical_max
[1] 90</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">centr_clo</span>(gr, <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"all"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>$res
 [1] 0.3888889 0.3888889 0.7000000 1.0000000 0.5833333 0.5384615 1.0000000
 [8] 0.6363636 0.5833333 0.5000000

$centralization
[1] 0.8690613

$theoretical_max
[1] 4.235294</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">centr_betw</span>(gr, <span class="at" style="color: #657422;">directed =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>$res
 [1] 0.0 0.0 8.0 0.0 6.5 1.0 0.0 4.5 6.0 0.0

$centralization
[1] 0.1666667

$theoretical_max
[1] 324</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">centr_eigen</span>(gr,<span class="at" style="color: #657422;">directed =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>$vector
 [1] 2.519712e-01 1.933127e-01 1.000000e+00 2.093280e-17 5.762451e-01
 [6] 5.244145e-01 1.036823e-17 9.869802e-01 7.511000e-01 6.665713e-01

$value
[1] 2.980897

$options
$options$bmat
[1] "I"

$options$n
[1] 10

$options$which
[1] "LA"

$options$nev
[1] 1

$options$tol
[1] 0

$options$ncv
[1] 0

$options$ldv
[1] 0

$options$ishift
[1] 1

$options$maxiter
[1] 1000

$options$nb
[1] 1

$options$mode
[1] 1

$options$start
[1] 1

$options$sigma
[1] 0

$options$sigmai
[1] 0

$options$info
[1] 0

$options$iter
[1] 8

$options$nconv
[1] 1

$options$numop
[1] 26

$options$numopb
[1] 0

$options$numreo
[1] 16


$centralization
[1] 0.6311756

$theoretical_max
[1] 8</code></pre>
</div>
</div>
<p>Many other centrality indicators refer to <a href="https://en.wikipedia.org/wiki/Centrality">wiki page of Centrality</a>.</p>
</section>
</section>
<section id="graph-clustering" class="level1">
<h1>Graph clustering</h1>
<p>Graph clustering is the most useful calculation that can be done in <code>igraph</code> object. There are a whole line of research on this. Only basic clustering methods were covered here.</p>
<section id="decompose-graph" class="level2">
<h2 class="anchored" data-anchor-id="decompose-graph">decompose graph</h2>
<p>To split graph into connected sub-graph, <code>decompose.graph</code> calculates the connected components of your graph. A <strong>component</strong> is a sub-graph in which all nodes are inter-connected.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># decompose graph to connected components</span></span>
<span id="cb31-2">dg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">decompose.graph</span>(gr)</span>
<span id="cb31-3">dg</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
IGRAPH 9072470 U--- 8 10 -- Erdos-Renyi (gnp) graph
+ attr: name (g/c), type (g/c), loops (g/l), p (g/n)
+ edges from 9072470:
 [1] 2--4 3--4 4--5 3--6 5--6 1--7 3--7 6--7 3--8 6--8

[[2]]
IGRAPH cea9efc U--- 2 1 -- Erdos-Renyi (gnp) graph
+ attr: name (g/c), type (g/c), loops (g/l), p (g/n)
+ edge from cea9efc:
[1] 1--2</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># summary statics graph components</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;">components</span>(gr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>$membership
 [1] 1 1 1 2 1 1 2 1 1 1

$csize
[1] 8 2

$no
[1] 2</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># plot components</span></span>
<span id="cb35-2">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(gr, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;">plot</span>(gr, <span class="at" style="color: #657422;">layout=</span>coords,</span>
<span id="cb35-4">     <span class="at" style="color: #657422;">mark.groups =</span> <span class="fu" style="color: #4758AB;">split</span>(<span class="fu" style="color: #4758AB;">as_ids</span>(<span class="fu" style="color: #4758AB;">V</span>(gr)), <span class="fu" style="color: #4758AB;">components</span>(gr)<span class="sc" style="color: #5E5E5E;">$</span>membership)</span>
<span id="cb35-5">     )</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2_files/figure-html/decompose-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="cliques" class="level2">
<h2 class="anchored" data-anchor-id="cliques">Cliques</h2>
<p><strong>Clique</strong> is a special sub-graph in which every two distinct vertices are adjacent. The direction is usually ignored for clique calculations</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># extract cliques that contain more than 3 vertices</span></span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;">cliques</span>(gr, <span class="at" style="color: #657422;">min=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
+ 3/10 vertices, from 2d81952:
[1]  3  8 10

[[2]]
+ 3/10 vertices, from 2d81952:
[1] 3 8 9</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># get cliques with largest number of vertices</span></span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;">largest_cliques</span>(gr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
+ 3/10 vertices, from 2d81952:
[1] 8 3 9

[[2]]
+ 3/10 vertices, from 2d81952:
[1]  8  3 10</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># plot cliques</span></span>
<span id="cb40-2">cl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cliques</span>(gr, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb40-3"></span>
<span id="cb40-4">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(gr, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb40-5"><span class="fu" style="color: #4758AB;">plot</span>(gr, <span class="at" style="color: #657422;">layout=</span>coords,</span>
<span id="cb40-6">     <span class="at" style="color: #657422;">mark.groups=</span><span class="fu" style="color: #4758AB;">lapply</span>(cl, <span class="cf" style="color: #003B4F;">function</span>(g){<span class="fu" style="color: #4758AB;">as_ids</span>(g)}), </span>
<span id="cb40-7">     <span class="at" style="color: #657422;">mark.col=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#C5E5E7"</span>,<span class="st" style="color: #20794D;">"#ECD89A"</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2_files/figure-html/clique-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="communities-and-modules" class="level2">
<h2 class="anchored" data-anchor-id="communities-and-modules">Communities and modules</h2>
<p>Graph <strong>communities structure</strong> is defined if the nodes of the network can be easily grouped into (potentially overlapping) sets of nodes such that each set of nodes is densely connected internally. <strong>Modularity</strong> is always used as a measure the strength of division of a network into community for optimization methods in detecting community structure in networks.</p>
<p>There are many algorithms to cluster graph to communities.</p>
<ul>
<li><code>cluster_edge_betweenness</code> a hierarchical decomposition process where edges are removed in the decreasing order of their edge betweenness scores.<br>
</li>
<li><code>cluster_optimal</code> - a top-down hierarchical approach that optimizes the modularity function</li>
<li><code>cluster_walktrap</code> - an approach based on random walks</li>
<li><code>cluster_fast_greedy</code></li>
<li><code>cluster_label_prop</code></li>
<li><code>cluster_leading_eigen</code></li>
<li><code>cluster_Louvain</code></li>
<li><code>cluster_spinglass</code></li>
</ul>
<p>Which cluster method to use? Refer to this <a href="https://stackoverflow.com/questions/9471906/what-are-the-differences-between-community-detection-algorithms-in-igraph">stackoverflow post</a> for more information.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># cluster graph using walktrap method, turn a ”communities” object</span></span>
<span id="cb41-2">wtc <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cluster_walktrap</span>(gr) </span>
<span id="cb41-3">wtc</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH clustering walktrap, groups: 3, mod: 0.33
+ groups:
  <?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Learning with sckinta</title>
<link>https://learniningwithsckinta.netlify.app/posts.html</link>
<atom:link href="https://learniningwithsckinta.netlify.app/posts.xml" rel="self" type="application/rss+xml"/>
<description>This is Chun Su's personal blog</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Mon, 28 Feb 2022 05:00:00 GMT</lastBuildDate>
<item>
  <title>Interpreting the coefficients of Generalized Linear Model</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</link>
  <description><![CDATA[ 



<p>Linear model is the most popular model used in various of fields, due to its simple execution and interpretation. It can be not only used to predict like all other machine learning models. but also widely used for statistical inference due to its simplicity.</p>
<p><a href="https://en.wikipedia.org/wiki/Generalized_linear_model">Generalized Linear Model (GLM)</a>, as named indicated, is generalized from linear regression model, and extends linear model default assumptions to include outcome variables following exponential family distribution. It used <a href="https://www.statisticshowto.com/link-function/#:~:text=A%20link%20function%20in%20a,variable%20in%20a%20linear%20way.">link function</a> to transform the outcome so that the transformed Y can be represented by linear combination of predictors. Due to this transformation, it makes coefficients interpretation a little confusing. In this blog, I will use four classical examples (<code>Boston</code>, <code>Default</code>, <code>BrainCancer</code>, and <code>Bikeshare</code> from <a href="https://cran.r-project.org/web/packages/ISLR2/ISLR2.pdf"><code>ISLR2</code></a> package) to illustrate how to interpret the coefficients of GLM from <code>tidymodels</code> fit tidy outcome in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ISLR2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<section id="linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression">Linear regression</h2>
<p>Modeling linear regression in R is simple. The following example used <code>dis</code> (weighted mean of distances to five Boston employment centers) as single predictor to predict <code>medv</code> (median value of house in $1000s) in Boston.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(Boston)</span>
<span id="cb2-2">lm_m1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis, <span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">summary</span>(lm_m1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = medv ~ dis, data = Boston)

Residuals:
    Min      1Q  Median      3Q     Max 
-15.016  -5.556  -1.865   2.288  30.377 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  18.3901     0.8174  22.499  &lt; 2e-16 ***
dis           1.0916     0.1884   5.795 1.21e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 8.914 on 504 degrees of freedom
Multiple R-squared:  0.06246,   Adjusted R-squared:  0.0606 
F-statistic: 33.58 on 1 and 504 DF,  p-value: 1.207e-08</code></pre>
</div>
</div>
<p>Based on coefficients summary, <code>dis</code> is significantly (p-value = 1.21e-08) positively correlated with <code>medv</code>. With 1 unit increase in term of distances to Boston employment centers, the median value of house increase $1091.6 = 1.0916 * 1000.</p>
<section id="multivariate-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="multivariate-linear-regression">Multivariate linear regression</h3>
<p>In multivariate linear regression, when we interpret the coefficients, there are two components taken into account - whether the variables are independent - how to interpret the interaction term</p>
<p>In the following example, we model the <code>medv</code> with <code>dis</code> (weighted mean of distances to five Boston employment centers), <code>rm</code> (average number of rooms per dwelling), <code>crim</code> (per capita crime rate by town) and <code>chas</code> (tract bounds river).</p>
<p>For practice purpose, I will use <code>tidymodels</code> to build linear model in the multivariate linear regression example.</p>
<section id="no-interaction-term" class="level4">
<h4 class="anchored" data-anchor-id="no-interaction-term">No interaction term</h4>
<p>We starts with no interactions among the predictors.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_spec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">lm_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis <span class="sc" style="color: #5E5E5E;">+</span> rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb4-8"></span>
<span id="cb4-9">lm_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb4-11"></span>
<span id="cb4-12"></span>
<span id="cb4-13">lm_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)  -29.1      2.57      -11.3  1.20e-26
2 dis            0.201    0.144       1.40 1.62e- 1
3 rm             8.19     0.406      20.2  9.12e-67
4 crim          -0.243    0.0350     -6.94 1.19e-11
5 chas           3.98     1.10        3.63 3.10e- 4</code></pre>
</div>
</div>
<p>In this model, all predictors except <code>dis</code> show significant correlation with <code>medv</code> (p-value &lt; 0.05). <code>rm</code> and <code>chas</code> are positively while <code>crim</code> is negatively associated with <code>medv</code>. - <code>rm</code>: <strong>when keeping all other variables the same</strong>, increase 1 room per dwelling on average results in $8,194.4 (<code>8.1944 * 1000</code>) increase in median house value. - <code>chas</code>: <strong>when keeping all other variables the same</strong>, having tracts bounds to the Charles river increase median house value $3,982.5 (<code>3.9825 * 1000</code>). <code>chas</code> is a dummy variable where = 1 if tract bounds river and =0 otherwise. Thus =0 (tract do not bound to river) is a baseline here. We will discuss more about baseline in later example. - <code>crim</code>: <strong>when keeping all other variables the same</strong>, 1 unit increase in per capita crime rate will result a decrease of $243.2 (<code>-0.24318 * 1000</code>) in median house value.</p>
</section>
</section>
<section id="with-interaction-term" class="level3">
<h3 class="anchored" data-anchor-id="with-interaction-term">With interaction term</h3>
<p>Based on common sense, usually the house is smaller when it is closer to city center. Adding interaction term between <code>rm</code> and <code>dis</code> we assumed that the number of room and the distance to business center are not independent. We are testing the hypothesis that the linear relationship between <code>dis</code> and <code>medv</code> was affected by the the <code>rm</code>. This affect can be linear or non-linear, can be negative or positive.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(rm)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">geom_histogram</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean number of room per dwelling'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rm =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(rm)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>dis, <span class="at" style="color: #657422;">y=</span>medv, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(rm))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="at" style="color: #657422;">se =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean of distances to five Boston employment centers'</span>, <span class="at" style="color: #657422;">y=</span> <span class="st" style="color: #20794D;">'median value of owner-occupied homes'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"mean number of room per dwelling"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'bottom'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Thus, we added interaction term between <code>dis</code> and <code>rm</code>. The thumb of rule to use interaction term is hierarchical principle, which means, if we include an interaction in a model, we should also include the main effects, even if the p-values associated with main effect coefficients are not significant. Thus we should always use <code>*</code> instead of <code>:</code> when adding the interaction term. <code>dis*rm</code> means <code>dis + rm + dis:rm</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">lm_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis<span class="sc" style="color: #5E5E5E;">*</span>rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb10-4"></span>
<span id="cb10-5">lm_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb10-7"></span>
<span id="cb10-8"></span>
<span id="cb10-9">lm_fit3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)   -5.03     4.70       -1.07 2.85e- 1
2 dis           -7.43     1.27       -5.84 9.30e- 9
3 rm             4.38     0.744       5.89 7.11e- 9
4 crim          -0.270    0.0341     -7.90 1.80e-14
5 chas           3.99     1.06        3.77 1.83e- 4
6 `dis:rm`       1.20     0.198       6.04 3.08e- 9</code></pre>
</div>
</div>
<p>In this example, all predictors including interaction terms are significant. Interestingly, by adding the interaction between <code>dis</code> and <code>rm</code>, the coefficients associated with <code>dis</code> turn negative from positive when using simple single variable model. To interpret the interaction term,</p>
<ul>
<li><code>dis:rm</code>: since interaction term is significant (p-value = 3.077938e-09), thus linear relationship between <code>dis</code> and <code>medv</code> was significantly dependent on the <code>rm</code>, justifying the inclusion of the interaction term in the model.</li>
<li><code>dis</code>: when there are 3 ~ 6 rooms in dwelling, one unit further away from five Boston employment centers, it results in $3,835 to $244 (<code>(-7.426 + range(3,6) * 1.197) * 1000</code>) decrease in median value of house. when there are more than 6 (<code>7.426/1.197</code>) rooms in dwelling, one unit further away from five Boston employment centers, it results in at least $953 (<code>(-7.426 + 7 * 1.197) * 1000</code>) increase in median value of house.</li>
<li><code>rm</code>: <em>keeping the mean distance to five Boston employment centers as constant <code>dis</code></em>, one more room in dwelling will increase <code>1000 * (1.197 * dis + 4.380)</code> in the median value of house. Because the interaction term is positive (<code>1.197</code>), the rate of <code>medv</code> increase in terms of the room number will increase when it is further away from Boston employment centers.</li>
</ul>
<section id="when-to-use-interaction-term" class="level5">
<h5 class="anchored" data-anchor-id="when-to-use-interaction-term">When to use interaction term</h5>
<p>The frequently asked question about interaction term is “when should we include interaction term”. The conventional answer is when two predictors are not independent. However, in reality, unless we have very strong prior knowledge about the predictors, it is hard to determine whether two predictors are dependent or not without exploring the data. From the articles/blogs about interaction term I read so far, two methods are generally used to determine whether add interaction term</p>
<ol type="1">
<li><p>try both with and without adding interaction term, if adding interaction term results in significance on interaction term, then use interaction term.</p></li>
<li><p>like what I did above, plot Y against X1 with X2 as nominal variable (if X2 is not nominal variable itself). If the lines from different X2 levels are parallel, then X1 and X2 are independent and no interaction terms are needed. Otherwise, add interaction term.</p></li>
</ol>
</section>
</section>
</section>
<section id="logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="logistic-regression">Logistic regression</h2>
<p>In the regular linear regression mentioned above, the Y is numeric (aka. quantitative). However, when Y is nominal (aka, qualitative), logistic regression will be used. To make Y still represented by linear combination of predictors, we used logit function (link function) to transform Y (the probability) to <img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)"> (the log odds).</p>
<p><img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)%20=%20%5Csum%5Cbeta%20X"> <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> represents log odds ratio. thus, odds ratio <img src="https://latex.codecogs.com/png.latex?OR%20=%20e%5E%5Cbeta">.</p>
<section id="when-y-is-binomial" class="level3">
<h3 class="anchored" data-anchor-id="when-y-is-binomial">When Y is binomial</h3>
<p>To evaluate whether a customer will default the credit card <code>default</code>, we build a logistic model with three predictors – whether the customer is a <code>student</code>, the <code>balance</code> on the account and the customer <code>income</code>.</p>
<p>Again, for practice purpose, I used <code>tidymodels</code> syntax for demonstration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"Default"</span>)</span>
<span id="cb12-2">lr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6">default_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">add_formula</span>(default <span class="sc" style="color: #5E5E5E;">~</span> .)</span>
<span id="cb12-9"></span>
<span id="cb12-10">default_fit <span class="ot" style="color: #003B4F;">&lt;-</span> default_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-11">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Default)</span>
<span id="cb12-12"></span>
<span id="cb12-13">default_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
  term            estimate  std.error statistic   p.value
  &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept) -10.9        0.492        -22.1   4.91e-108
2 studentYes   -0.647      0.236         -2.74  6.19e-  3
3 balance       0.00574    0.000232      24.7   4.22e-135
4 income        0.00000303 0.00000820     0.370 7.12e-  1</code></pre>
</div>
</div>
<p>In this model, two predictors (<code>student</code> and <code>balance</code>) are significantly associated with <code>default</code>. To interpret coefficients, we first need to know which is the baseline of <code>default</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Default<span class="sc" style="color: #5E5E5E;">$</span>default)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>    Yes
No    0
Yes   1</code></pre>
</div>
</div>
<p>Based on the <code>contrasts</code> output, the baseline of <code>default</code> is <code>No</code>. Thus,</p>
<ul>
<li><p><code>student</code>: <strong>When keeping all other variable constant</strong>, compared to non-student (<code>student = 0</code>), a student (<code>student = 1</code>) is less likely to default credit card. The odds ratio is 0.524 (<code>exp(-6.467758e-01)</code>). In other words, if the odds of defaulting credit card as non-student is 1, the odds of defaulting credit card as a student is 0.524 (<code>exp(-6.467758e-01)</code>).</p></li>
<li><p><code>balance</code>: <strong>When keeping all other variable constant</strong>, 1 dollar increase in account balance will result in increasing odds of 1.005 (<code>exp(5.736505e-03)</code>) to default credit card.</p></li>
</ul>
<p>Note: above modeling is a bad model since there are high correlation between the predictors (<a href="https://www.britannica.com/topic/collinearity-statistics">collinearity</a>). I just used it as an example to interpret the coefficients.</p>
</section>
<section id="multinominal-predictors" class="level3">
<h3 class="anchored" data-anchor-id="multinominal-predictors">Multinominal predictors</h3>
<p>Using multi-nominal predictor <code>diagnosis</code> and other predictors like <code>sex</code> and age <code>time</code> to predict whether the patient survived the brain cancer or not <code>status</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'BrainCancer'</span>)</span>
<span id="cb16-2">BrainCancer <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;">contrasts</span>(BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>           LG glioma HG glioma Other
Meningioma         0         0     0
LG glioma          1         0     0
HG glioma          0         1     0
Other              0         0     1</code></pre>
</div>
</div>
<p>In this example, <code>Meningioma</code> is the baseline for multi-nominal predictor <code>diagnosis</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">BrainCancer_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb18-4">    </span>
<span id="cb18-5">BrainCancer_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec)</span>
<span id="cb18-8"></span>
<span id="cb18-9">BrainCancer_fit <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb18-11"></span>
<span id="cb18-12">BrainCancer_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-13">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term                estimate std.error statistic p.value
   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)           3.56      2.57       1.39  0.166  
 2 sexMale               0.369     0.576      0.640 0.522  
 3 locSupratentorial     1.09      0.901      1.21  0.227  
 4 ki                   -0.0695    0.0326    -2.13  0.0332 
 5 gtv                   0.0382    0.0366     1.04  0.296  
 6 stereoSRT             0.253     0.771      0.328 0.743  
 7 time                 -0.0339    0.0155    -2.18  0.0291 
 8 diagnosis_LG.glioma   1.31      0.844      1.55  0.122  
 9 diagnosis_HG.glioma   2.37      0.778      3.05  0.00231
10 diagnosis_Other       0.765     0.940      0.814 0.416  </code></pre>
</div>
</div>
<p>For multi-nominal predictor <code>diagnosis</code>, the levels (<code>LG glioma</code>, <code>HG glioma</code> and <code>Other</code>) are compared to the baseline <code>Meningioma</code>, and it ends with three terms for coefficient estimation.</p>
<p>Based on above model, only <code>HG glioma</code> show significant association with survival (p-value &lt; 0.05) when choose <code>Meningioma</code> as baseline. <strong>When keeping all other variable constant</strong>, compare to <code>Meningioma</code>, the patient with <code>HG glioma</code> are 10 times more (<code>exp(2.37027243)</code>) likely to survive. If we want to compare <code>HG glioma</code> with <code>Other</code> cancer type, simply use <code>exp(2.37027243-0.76482440)</code> to get odds ratio between <code>HG glioma</code> and <code>Other</code>, in which compare to <code>Other</code>, the patient with <code>HG glioma</code> are 5 times more (<code>exp(2.37027243-0.76482440)</code>) likely to survive. However, in this case, we do not know whether this comparison is statistically significant. We can get p-value for this comparison by switching <code>Other</code> as baseline.</p>
</section>
<section id="contrasts-matrix" class="level3">
<h3 class="anchored" data-anchor-id="contrasts-matrix">Contrasts matrix</h3>
<p>Another baseline assignment is using the global average as baseline. To do that, we need to change the <code>contrasts</code> matrix. The following code replace the default contrasts <code>contr.treatment</code> with <code>contr.sum</code> on <code>globalOptions</code>, then use <code>step_dummy</code> from <code>recipe</code> to realize it</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">BrainCancer_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_LG.glioma diagnosis_HG.glioma diagnosis_Other diagnosis_orginal
                &lt;dbl&gt;               &lt;dbl&gt;           &lt;dbl&gt; &lt;fct&gt;            
1                   0                   0               0 Meningioma       
2                   0                   1               0 HG glioma        
3                   1                   0               0 LG glioma        
4                   0                   0               1 Other            </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">contr_opt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"contrasts"</span>)</span>
<span id="cb22-2">contr_opt</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>        unordered           ordered 
"contr.treatment"      "contr.poly" </code></pre>
</div>
</div>
<p>The original baseline is <code>Meningioma</code>, each <code>diagnosis_</code> is compared to the <code>Meningioma</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">contr_sum_opt <span class="ot" style="color: #003B4F;">&lt;-</span> contr_opt</span>
<span id="cb24-2">contr_sum_opt[<span class="st" style="color: #20794D;">'unordered'</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'contr.sum'</span></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_sum_opt)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># my_naming &lt;- function(var, lvl, ordinal = FALSE, sep = "_"){</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;">#     paste(var, levels(BrainCancer$diagnosis)[lvl])</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;"># }</span></span>
<span id="cb24-8"></span>
<span id="cb24-9">BrainCancer_rec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-11">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb24-12">    </span>
<span id="cb24-13">BrainCancer_rec2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-17">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_X1 diagnosis_X2 diagnosis_X3 diagnosis_orginal
         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt; &lt;fct&gt;            
1            1            0            0 Meningioma       
2            0            0            1 HG glioma        
3            0            1            0 LG glioma        
4           -1           -1           -1 Other            </code></pre>
</div>
</div>
<p>Thus <code>diagnosis_X1</code>, <code>diagnosis_X2</code> and <code>diagnosis_X3</code> now represents <code>Meningioma</code>, <code>HG glioma</code> and <code>LG glioma</code> compared to average baseline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">BrainCancer_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec)</span>
<span id="cb26-4"></span>
<span id="cb26-5">BrainCancer_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb26-7"></span>
<span id="cb26-8">BrainCancer_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-9">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term         estimate std.error statistic p.value
   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)    5.52      2.66       2.07   0.0380
 2 sex1          -0.184     0.288     -0.640  0.522 
 3 loc1          -0.545     0.451     -1.21   0.227 
 4 ki            -0.0695    0.0326    -2.13   0.0332
 5 gtv            0.0382    0.0366     1.04   0.296 
 6 stereo1       -0.127     0.386     -0.328  0.743 
 7 time          -0.0339    0.0155    -2.18   0.0291
 8 diagnosis_X1  -1.11      0.468     -2.37   0.0177
 9 diagnosis_X2   0.195     0.594      0.329  0.742 
10 diagnosis_X3   1.26      0.542      2.33   0.0200</code></pre>
</div>
</div>
<p>Based on the newly trained model <code>BrainCancer_fit2</code>, only <code>Meningioma</code> and <code>LG glioma</code> show significant association with survival (p-value &lt; 0.05) when compared to global average. <strong>When keeping all other variable constant</strong>, <strong>compare to global average</strong>, the patient with <code>Meningioma</code> has only 32.9% (<code>exp(-1.11018843)</code>) average survive rate, while the patient with <code>LG glioma</code> are 3.5 times (<code>exp(1.26008400)</code>) more likely to survive.</p>
<p>More about coding contrasts in base R syntax can be found at this <a href="https://marissabarlaz.github.io/portfolio/contrastcoding/">article</a>.</p>
</section>
<section id="multinomial-outcome" class="level3">
<h3 class="anchored" data-anchor-id="multinomial-outcome">Multinomial outcome</h3>
<p>Using the same dataset <code>BrainCancer</code>, now I try to predict the <code>diagnosis</code> based on the tumor location (<code>loc</code>), Karnofsky index (<code>ki</code>), Gross tumor volume (<code>gtv</code>) and Stereotactic method (<code>stereo</code>). Here we used <code>multinom_reg()</code> to model multinomial regression</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_opt) <span class="co" style="color: #5E5E5E;"># reset contrasts options back to `contr.treatment`</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">ml_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">multinom_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'nnet'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-5">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb28-6"></span>
<span id="cb28-7">BrainCancer_rec3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(diagnosis <span class="sc" style="color: #5E5E5E;">~</span> loc <span class="sc" style="color: #5E5E5E;">+</span> ki <span class="sc" style="color: #5E5E5E;">+</span> gtv <span class="sc" style="color: #5E5E5E;">+</span> stereo, <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-8">    <span class="fu" style="color: #4758AB;">update_role</span>(diagnosis, <span class="at" style="color: #657422;">new_role =</span> <span class="st" style="color: #20794D;">'outcome'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-9">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-10">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span>
<span id="cb28-11"></span>
<span id="cb28-12">BrainCancer_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-13">    <span class="fu" style="color: #4758AB;">add_model</span>(ml_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-14">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec3)</span>
<span id="cb28-15"></span>
<span id="cb28-16">BrainCancer_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-17">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb28-18"></span>
<span id="cb28-19">BrainCancer_fit3</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: multinom_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
2 Recipe Steps

• step_normalize()
• step_dummy()

── Model ───────────────────────────────────────────────────────────────────────
Call:
nnet::multinom(formula = ..y ~ ., data = data, trace = FALSE)

Coefficients:
          (Intercept)          ki         gtv loc_Supratentorial stereo_SRT
LG glioma  -2.3035689  0.23860763 -0.02596393          0.3998414  0.5444269
HG glioma  -2.5894735  0.03684929  0.15897113          0.9417737  1.3658683
Other      -0.4158848 -0.29780559  0.14203552         -2.7892771  1.4289732

Residual Deviance: 187.5196 
AIC: 217.5196 </code></pre>
</div>
</div>
<p>In the multinomial regression, no p-value were reported. The coefficients represent log odds ratio.</p>
<p>Each row in the coefficient table corresponds to the model equation. eg. the first row represents the coefficients for <code>LG glioma</code> in comparison to our baseline <code>Meningioma</code>. Each column in the coefficient table corresponds to specific coefficient estimate. Thus, compared to <code>Meningioma</code>, using <code>SRT</code> Stereotactic method is about 4 times (<code>exp(1.3658683)</code>) more likely diagnose <code>HG glioma</code>. A tumor is only 6% (<code>exp(-2.7892771)</code>) chance to be diagnosed as <code>Other</code> instead of <code>Meningioma</code> if it is located at <code>Supratentorial</code> area.</p>
<p>To perform above model in base R syntax, please refer to the <a href="https://datasciencebeginners.com/2018/12/20/multinomial-logistic-regression-using-r/#:~:text=Multinomial%20regression%20is%20an%20extension,one%20or%20more%20independent%20variable.">blog post</a> by Mohit Sharma.</p>
</section>
</section>
<section id="poisson-regression" class="level2">
<h2 class="anchored" data-anchor-id="poisson-regression">Poisson regression</h2>
<p>Poisson regression is used to model count outcome. Unlike regular linear regression, count outcome is not real continuous variable. Instead, it must be positive integer and usually modeled by Poisson distribution rather than normal distribution.</p>
<p>The link function for Poisson regression is log function <img src="https://latex.codecogs.com/png.latex?%5Cln%5Clambda"> where <img src="https://latex.codecogs.com/png.latex?%5Clambda"> represents the mean of outcome.</p>
<p>In the following example, we use <code>Bikeshare</code> data to predict <code>bikers</code> outcome which represents the <em>count</em> of rental bikers</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'Bikeshare'</span>)</span>
<span id="cb30-2"></span>
<span id="cb30-3">Bikeshare_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(bikers <span class="sc" style="color: #5E5E5E;">~</span> season <span class="sc" style="color: #5E5E5E;">+</span> weekday <span class="sc" style="color: #5E5E5E;">+</span> weathersit <span class="sc" style="color: #5E5E5E;">+</span> temp <span class="sc" style="color: #5E5E5E;">+</span> hum <span class="sc" style="color: #5E5E5E;">+</span> windspeed, <span class="at" style="color: #657422;">data =</span> Bikeshare) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(season, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"winter"</span>,<span class="st" style="color: #20794D;">'spring'</span>,<span class="st" style="color: #20794D;">'summer'</span>,<span class="st" style="color: #20794D;">'fall'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(weekday, <span class="at" style="color: #657422;">transform =</span> <span class="cf" style="color: #003B4F;">function</span>(x) {x<span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>}, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'sunday'</span>,<span class="st" style="color: #20794D;">'monday'</span>,<span class="st" style="color: #20794D;">'tuesday'</span>,<span class="st" style="color: #20794D;">'wednesday'</span>,<span class="st" style="color: #20794D;">'thursday'</span>,<span class="st" style="color: #20794D;">'friday'</span>,<span class="st" style="color: #20794D;">'saturday'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-6">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-8">    <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;"># Bikeshare_rec %&gt;% prep() %&gt;% bake(new_data = NULL)</span></span>
<span id="cb30-11"><span class="fu" style="color: #4758AB;">library</span>(poissonreg)</span>
<span id="cb30-12">pr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">poisson_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-13">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-14">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb30-15"></span>
<span id="cb30-16">Bikeshare_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-17">    <span class="fu" style="color: #4758AB;">add_recipe</span>(Bikeshare_rec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-18">    <span class="fu" style="color: #4758AB;">add_model</span>(pr_spec)</span>
<span id="cb30-19"></span>
<span id="cb30-20">Bikeshare_fit <span class="ot" style="color: #003B4F;">&lt;-</span> Bikeshare_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-21">     parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fit</span>(Bikeshare)</span>
<span id="cb30-22"></span>
<span id="cb30-23">Bikeshare_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-24">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 16 × 5
   term                       estimate std.error statistic   p.value
   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1 (Intercept)                  4.58    0.00385   1191.    0        
 2 temp                         0.426   0.00149    285.    0        
 3 hum                         -0.256   0.00108   -238.    0        
 4 windspeed                    0.0404  0.000949    42.6   0        
 5 season_spring                0.302   0.00384     78.7   0        
 6 season_summer                0.144   0.00449     32.1   1.12e-226
 7 season_fall                  0.613   0.00345    177.    0        
 8 weekday_monday              -0.0464  0.00336    -13.8   1.82e- 43
 9 weekday_tuesday             -0.0405  0.00336    -12.1   1.42e- 33
10 weekday_wednesday           -0.0524  0.00342    -15.3   4.88e- 53
11 weekday_thursday            -0.0804  0.00339    -23.7   2.70e-124
12 weekday_friday              -0.0151  0.00335     -4.51  6.47e-  6
13 weekday_saturday            -0.0187  0.00336     -5.58  2.36e-  8
14 weathersit_cloudy.misty      0.106   0.00223     47.4   0        
15 weathersit_light.rain.snow  -0.163   0.00425    -38.4   0        
16 weathersit_heavy.rain.snow  -0.0368  0.167       -0.221 8.25e-  1</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Bikeshare<span class="sc" style="color: #5E5E5E;">$</span>weathersit)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                cloudy/misty light rain/snow heavy rain/snow
clear                      0               0               0
cloudy/misty               1               0               0
light rain/snow            0               1               0
heavy rain/snow            0               0               1</code></pre>
</div>
</div>
<p>All terms except <code>weathersit_heavy.rain.snow</code> are significantly associated with rental bikers number. - when keeping all other variables constant, compared to <code>season_winter</code>, <code>season_spring</code> will increase the mean of rental biker count by 1.35 <code>exp(0.30234965)</code>. In other words, there will be 135% bikers rental a bike in spring than winter. - when keeping all other variables constant, every unit increase in temperature will result in on average 1.53 (<code>exp(0.42588059)</code>) rental biker customer.</p>
<p><em>note:above model is not optimal model to predict rental bikers. We use the model without interactions to simplify the question and emphasize interpretation of coefficients in the context of poisson regression . To interpret the coefficients with interaction term, refer to previous regular linear regression example</em></p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, I focus on interpret the coefficients in three GLM, and show the examples of coefficients associated with both quantitative and qualitative predictors. I also include the examples to interpret coefficients when 1) add interaction term, 2) with multi-nominal outcome and 3) with alternative contrast matrix.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>GLM</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</guid>
  <pubDate>Mon, 28 Feb 2022 05:00:00 GMT</pubDate>
  <media:content url="https://thumbs.dreamstime.com/b/cartoon-cottage-seamless-pattern-hand-drawn-home-facade-street-townhouse-family-house-countryside-urban-border-decor-202493554.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict chocolate rating with xgboost</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># library(lubridate)</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<section id="clean-data" class="level2">
<h2 class="anchored" data-anchor-id="clean-data">Clean Data</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>chocolate</span>
<span id="cb2-2">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cocoa_percent =</span> <span class="fu" style="color: #4758AB;">parse_number</span>(cocoa_percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">separate</span>(ingredients, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ingredient_num"</span>,<span class="st" style="color: #20794D;">"ingredients"</span>), <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"-"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-6">        <span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">parse_number</span>(ingredient_num),</span>
<span id="cb2-7">        <span class="at" style="color: #657422;">ingredients=</span><span class="fu" style="color: #4758AB;">str_trim</span>(ingredients)</span>
<span id="cb2-8">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">map</span>(ingredients, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x,<span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-11">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_trim</span>(.x))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># select(cocoa_percent, ingredient_num, ingredients, most_memorable_characteristics) %&gt;%</span></span>
<span id="cb2-13">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert gredients to boolean columns</li>
</ul>
<p>using <code>unnest</code> to spread out the list column <code>ingredients</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">gredients <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, ingredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>ingredients, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="st" style="color: #20794D;">"NA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-8">    janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert most_memorable_characteristics to boolean columns</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(most_memorable_characteristics)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># distinct(most_memorable_characteristics) %&gt;% </span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;"># pivot_wider(names_from=most_memorable_characteristics, values_from=tmp) %&gt;% </span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<p>There are 972 most_memorable_characteristics in total</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># mutate(most_memorable_characteristics = fct_lump_min(most_memorable_characteristics, min=100)) %&gt;% </span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">group_by</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort=</span>T) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">20</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>n, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics,n))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>n), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">hjust=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"# of chocolates"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most memorable characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Pick top 12 most_memorable_characteristics to convert to boolean column</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics =</span> <span class="fu" style="color: #4758AB;">fct_lump_min</span>(most_memorable_characteristics, <span class="at" style="color: #657422;">min=</span><span class="dv" style="color: #AD0000;">100</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>most_memorable_characteristics, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x))</span></code></pre></div>
</details>
</div>
<ul>
<li>create chocolate_clean data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb7-2">    chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n=</span><span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>ingredients, <span class="sc" style="color: #5E5E5E;">-</span>most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">left_join</span>(gredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">left_join</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
</section>
<section id="explore-data" class="level2">
<h2 class="anchored" data-anchor-id="explore-data">Explore Data</h2>
<p>Several features are explored in terms of their association with rating.</p>
<ul>
<li><code>country_of_bean_origin</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(country_of_bean_origin, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">10</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Blend and non-blend on <code>country_of_bean_origin</code> shows big difference, thus we convert <code>country_of_bean_origin</code> to <code>country_of_bean_origin_blend</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin_blend =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(country_of_bean_origin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Blend"</span>, country_of_bean_origin, <span class="st" style="color: #20794D;">"Non-blend"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li><code>company_manufacturer</code> and <code>company_location</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_manufacturer =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_manufacturer, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.01</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_manufacturer, rating, median))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_manufacturer)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_manufacturer"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_location =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_location, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_location, rating))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_location)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_location"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>cocoa_percent</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>rating</code> is not as continuous as what i originally imagined. Thus, I convert <code>rating</code> to nominal variable <code>rating_bl</code> using 3 as threshold</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rating_bl =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(rating <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">"&gt;=3"</span>, <span class="st" style="color: #20794D;">"&lt; 3"</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">group_by</span>(rating_bl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">count</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
# Groups:   rating_bl [2]
  rating_bl     n
  &lt;chr&gt;     &lt;int&gt;
1 &lt; 3         566
2 &gt;=3        1964</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating_bl)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"rating"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>most_memorable_characteristics</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(Other<span class="sc" style="color: #5E5E5E;">:</span>creamy), as.factor)</span></code></pre></div>
</details>
</div>
<p>most_memorable_characteristics like <code>cocoa</code> and <code>creamy</code> positive effect rating, while <code>fatty</code>, <code>earthy</code>, <code>sandy</code>, <code>sour</code> and <code>sweet</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, fatty<span class="sc" style="color: #5E5E5E;">:</span>creamy) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-7">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb17-9">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-10">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-11">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"is most_memorable_characteristics?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-12">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>ingredients</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb18-2">    chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">igrdt_beans=</span>b, <span class="at" style="color: #657422;">igrdt_sugar=</span>s, <span class="at" style="color: #657422;">igrdt_cocoa=</span>c, <span class="at" style="color: #657422;">igrdt_lecithin=</span>l, <span class="at" style="color: #657422;">igrdt_vanilla=</span>v, <span class="at" style="color: #657422;">igrdt_salt=</span>sa, <span class="at" style="color: #657422;">igrdt_sweeter=</span>s_2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)), as.factor)</span></code></pre></div>
</details>
</div>
<p>ingredient number <code>ingredient_num</code> between 2-3 are associated with higher rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">as.factor</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ingredient_num, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>ingrediants like <code>beans</code> and <code>sugar</code> positively effect rating, while <code>vanilla</code>, <code>sweeter</code> and <code>salt</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>,<span class="st" style="color: #20794D;">""</span>,ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(ingredients, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-8">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb20-9">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb20-10">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-11">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"contain the ingredient?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-13">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="ml" class="level2">
<h2 class="anchored" data-anchor-id="ml">ML</h2>
<p>Based on the exploratory analysis, to study the effect on overall rating of chocolates, the following features are selected for building ML models. Plus, using nominal feature <code>rating_bl</code> instead of numeric feature <code>rating</code> as outcome.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">chocolate_df <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">    <span class="fu" style="color: #4758AB;">select</span>(rating_bl, company_manufacturer, country_of_bean_origin_blend, cocoa_percent, ingredient_num, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">'igrdt_'</span>), cocoa, creamy, fatty, earthy, sandy, sour, sweet) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>igrdt_cocoa, <span class="sc" style="color: #5E5E5E;">-</span>igrdt_lecithin) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span></code></pre></div>
</details>
</div>
<section id="split-samples" class="level3">
<h3 class="anchored" data-anchor-id="split-samples">split samples</h3>
<ul>
<li><code>initial_split</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb22-2">chocolate_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(chocolate_df, <span class="at" style="color: #657422;">strata =</span> rating_bl)</span>
<span id="cb22-3">chocolate_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(chocolate_split)</span>
<span id="cb22-4">chocolate_testing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(chocolate_split)</span></code></pre></div>
</details>
</div>
<ul>
<li>resample</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb23-2">folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(chocolate_train, <span class="at" style="color: #657422;">v =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb23-3">folds</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>#  10-fold cross-validation 
# A tibble: 10 × 2
   splits             id    
   &lt;list&gt;             &lt;chr&gt; 
 1 &lt;split [1647/184]&gt; Fold01
 2 &lt;split [1648/183]&gt; Fold02
 3 &lt;split [1648/183]&gt; Fold03
 4 &lt;split [1648/183]&gt; Fold04
 5 &lt;split [1648/183]&gt; Fold05
 6 &lt;split [1648/183]&gt; Fold06
 7 &lt;split [1648/183]&gt; Fold07
 8 &lt;split [1648/183]&gt; Fold08
 9 &lt;split [1648/183]&gt; Fold09
10 &lt;split [1648/183]&gt; Fold10</code></pre>
</div>
</div>
</section>
<section id="recipe" class="level3">
<h3 class="anchored" data-anchor-id="recipe">recipe</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">chocolate_rec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb25-2">    <span class="fu" style="color: #4758AB;">recipe</span>(rating_bl <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> chocolate_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">step_other</span>(company_manufacturer, <span class="at" style="color: #657422;">threshold=</span><span class="fl" style="color: #AD0000;">0.01</span>, <span class="at" style="color: #657422;">other=</span><span class="st" style="color: #20794D;">"otherCompany"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;"># step_mutate_at(c("company_manufacturer","country_of_bean_origin_blend", "rating_bl"), fn = ~as.factor(.x)) %&gt;% </span></span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span>
<span id="cb25-7"></span>
<span id="cb25-8">chocolate_rec</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
<p>check preprocessed data.frame</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">chocolate_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">    <span class="fu" style="color: #4758AB;">prep</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;">juice</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,831 × 20
   cocoa_percent ingre…¹ ratin…² compa…³ compa…⁴ compa…⁵ compa…⁶ compa…⁷ count…⁸
           &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1            70       4 &lt; 3           0       0       0       0       0       1
 2            70       4 &lt; 3           0       0       0       0       0       1
 3            60       3 &lt; 3           0       0       0       0       1       1
 4            70       2 &lt; 3           0       0       0       0       1       1
 5            70       2 &lt; 3           0       0       0       0       1       1
 6            75       4 &lt; 3           0       0       0       0       1       1
 7            75       4 &lt; 3           0       0       0       0       1       1
 8            75       5 &lt; 3           0       0       0       0       1       1
 9            75       5 &lt; 3           0       0       0       0       1       1
10            65       6 &lt; 3           0       0       0       0       1       1
# … with 1,821 more rows, 11 more variables: igrdt_sugar_X1 &lt;dbl&gt;,
#   igrdt_vanilla_X1 &lt;dbl&gt;, igrdt_salt_X1 &lt;dbl&gt;, igrdt_sweeter_X1 &lt;dbl&gt;,
#   cocoa_X1 &lt;dbl&gt;, creamy_X1 &lt;dbl&gt;, fatty_X1 &lt;dbl&gt;, earthy_X1 &lt;dbl&gt;,
#   sandy_X1 &lt;dbl&gt;, sour_X1 &lt;dbl&gt;, sweet_X1 &lt;dbl&gt;, and abbreviated variable
#   names ¹​ingredient_num, ²​rating_bl, ³​company_manufacturer_Arete,
#   ⁴​company_manufacturer_Bonnat, ⁵​company_manufacturer_Fresco,
#   ⁶​company_manufacturer_Soma, ⁷​company_manufacturer_otherCompany, …
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
</section>
<section id="grid-tune-xgboost" class="level3">
<h3 class="anchored" data-anchor-id="grid-tune-xgboost">grid tune xgboost</h3>
<ul>
<li>create model <code>boost_tree</code></li>
</ul>
<p>Details about <code>boost_tree</code> can be found https://parsnip.tidymodels.org/reference/details_boost_tree_xgboost.html</p>
<p><em>require library <code>xgboost</code> installed.</em></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">xg_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb29-2">    <span class="fu" style="color: #4758AB;">boost_tree</span>(</span>
<span id="cb29-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), <span class="co" style="color: #5E5E5E;"># the number (or proportion) of predictors that will be randomly sampled</span></span>
<span id="cb29-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>() <span class="co" style="color: #5E5E5E;"># minimum number of data points in a node</span></span>
<span id="cb29-5">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"xgboost"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># importance="permutation"</span></span>
<span id="cb29-7">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>define grid</li>
</ul>
<p><code>grid_max_entropy</code>, <code>grid_regular</code>, <code>grid_random</code> can be used for quickly specify levels for tuned hyperparameters.</p>
<p>be aware that <code>mtry</code> usually requires <code>range</code> parameters, it usually contains the <code>sqrt(predictor_num)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">xg_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">grid_regular</span>(</span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;">mtry</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;">min_n</span>(),</span>
<span id="cb30-4">    <span class="at" style="color: #657422;">levels =</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># each tune how many levels</span></span>
<span id="cb30-5">)</span>
<span id="cb30-6"></span>
<span id="cb30-7">xg_grid</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 2
    mtry min_n
   &lt;int&gt; &lt;int&gt;
 1     3     2
 2     4     2
 3     6     2
 4     8     2
 5    10     2
 6     3    11
 7     4    11
 8     6    11
 9     8    11
10    10    11
# … with 15 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li>create workflow</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">xg_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">    <span class="fu" style="color: #4758AB;">add_model</span>(xg_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-3">    <span class="fu" style="color: #4758AB;">add_recipe</span>(chocolate_rec)</span>
<span id="cb32-4"></span>
<span id="cb32-5">xg_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = tune()
  min_n = tune()

Computational engine: xgboost </code></pre>
</div>
</div>
<ul>
<li>tune model to get result</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">system.time</span>(</span>
<span id="cb34-2">    xg_res <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb34-3">        xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-4">        <span class="fu" style="color: #4758AB;">tune_grid</span>(</span>
<span id="cb34-5">            <span class="at" style="color: #657422;">resamples =</span> folds,</span>
<span id="cb34-6">            <span class="at" style="color: #657422;">grid =</span> xg_grid</span>
<span id="cb34-7">            )</span>
<span id="cb34-8">    )</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 30.965   0.215  31.417 </code></pre>
</div>
</div>
<ul>
<li>evaluate models</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> min_n, <span class="at" style="color: #657422;">y=</span>mean, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-4">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>.metric, <span class="at" style="color: #657422;">scales=</span><span class="st" style="color: #20794D;">"free"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-5">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-6">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-8">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"metrics estimate"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">'minimum number of data points in a node (min_n)'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">'the number of predictors that will be randomly sampled (mtry)'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-9">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>select hyperparameters and finalize wf</li>
</ul>
<p><code>show_best(metric = )</code> allows to see the top 5 from <code>xg_res %&gt;% collect_metrics()</code></p>
<p><code>select_best</code>, <code>select_by_pct_loss</code>, <code>select_by_one_std_err</code> select hyperparameters and corresponding <code>.config</code> to a tibble.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">xg_tune_hy <span class="ot" style="color: #003B4F;">&lt;-</span> xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">    <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"accuracy"</span>)</span>
<span id="cb37-3"></span>
<span id="cb37-4">xg_tune_hy</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
   mtry min_n .config              
  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                
1    10    11 Preprocessor1_Model10</code></pre>
</div>
</div>
<p>finalize model using selected hyperparameters</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb39-2">  xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(xg_tune_hy)</span>
<span id="cb39-4"></span>
<span id="cb39-5">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = 10
  min_n = 11

Computational engine: xgboost </code></pre>
</div>
</div>
</section>
<section id="last_fit-model" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-model"><code>last_fit</code> model</h3>
<ul>
<li>use <code>last_fit(split)</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">final_fit <span class="ot" style="color: #003B4F;">&lt;-</span> final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">    <span class="fu" style="color: #4758AB;">last_fit</span>(chocolate_split)</span>
<span id="cb41-3"></span>
<span id="cb41-4">final_fit</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># Resampling results
# Manual resampling 
# A tibble: 1 × 6
  splits             id               .metrics .notes   .predictions .workflow 
  &lt;list&gt;             &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    
1 &lt;split [1831/612]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;</code></pre>
</div>
</div>
<ul>
<li><code>collect_metrics</code> for overall data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric  .estimator .estimate .config             
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy binary         0.786 Preprocessor1_Model1
2 roc_auc  binary         0.668 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>metrics are comparable to training data, so not overfiting.</p>
<ul>
<li><code>collect_predictions</code> for test data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb45-2">    <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 612 × 7
   id               `.pred_&lt; 3` `.pred_&gt;=3`  .row .pred_class rating_bl .config 
   &lt;chr&gt;                  &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;     &lt;chr&gt;   
 1 train/test split      0.141        0.859     3 &gt;=3         &gt;=3       Preproc…
 2 train/test split      0.125        0.875    10 &gt;=3         &lt; 3       Preproc…
 3 train/test split      0.0668       0.933    11 &gt;=3         &lt; 3       Preproc…
 4 train/test split      0.156        0.844    17 &gt;=3         &gt;=3       Preproc…
 5 train/test split      0.0668       0.933    24 &gt;=3         &gt;=3       Preproc…
 6 train/test split      0.0668       0.933    25 &gt;=3         &gt;=3       Preproc…
 7 train/test split      0.0711       0.929    32 &gt;=3         &gt;=3       Preproc…
 8 train/test split      0.236        0.764    42 &gt;=3         &lt; 3       Preproc…
 9 train/test split      0.491        0.509    46 &gt;=3         &lt; 3       Preproc…
10 train/test split      0.385        0.615    55 &gt;=3         &lt; 3       Preproc…
# … with 602 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li><code>roc_auc</code> and <code>roc_curve</code> on test data</li>
</ul>
<p>calculate <code>roc_auc</code> manually on test data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;">roc_auc</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric .estimator .estimate
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
1 roc_auc binary         0.668</code></pre>
</div>
</div>
<p>plot <code>roc_curve</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;">autoplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>extract_workflow()</code> to save <code>final_trained_wf</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">final_trained_wf <span class="ot" style="color: #003B4F;">&lt;-</span> final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">    <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb50-3"></span>
<span id="cb50-4">final_trained_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><p><code>extract_*</code> information from <code>final_trained_wf</code></p>
<ul>
<li><code>extract_fit_engine()</code> is engine-specific model</li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;">extract_fit_engine</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_fit_parsnip()</code> is parsnip model object</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>parsnip model object

##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_recipe</code> or <code>extract_preprocessing</code> to get recipe/preprocessing</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">extract_preprocessor</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
</section>
<section id="feature-importance" class="level3">
<h3 class="anchored" data-anchor-id="feature-importance">feature importance</h3>
<ul>
<li><code>vip()</code> plot top 10</li>
<li><code>vi_model()</code> return tibble</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;">vip</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="final-notes" class="level2">
<h2 class="anchored" data-anchor-id="final-notes">Final notes</h2>
<ul>
<li>I convert numeric <code>rating</code> to categorical rating using threshold because, based on the exploratory analysis, the <code>rating</code> values are not continuous.</li>
<li>The <code>boost_tree</code> did not produce good estimate for the data.
<ul>
<li>Other models, like <code>rand_forest()</code>, <code>logistic_reg</code> and <code>svm_linear</code> are worth to try.</li>
<li>Tuning other hyperparameters <code>tree_depth</code>, <code>learning_rate</code> and <code>trees</code> are worth to try. <em>I don’t know which tune-able hyperparameter corresponds to regularization <code>gamma</code></em>.</li>
</ul></li>
<li>Julia Silge posted a <a href="https://www.youtube.com/watch?v=w-lF65hKtrQ">screencast</a> and <a href="https://juliasilge.com/blog/chocolate-ratings/">blog</a> of using <code>rand_forest()</code> and <code>svm_linear</code> training rating as linear model on the same dataset.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</guid>
  <pubDate>Sun, 23 Jan 2022 05:00:00 GMT</pubDate>
  <media:content url="https://www.history.com/.image/ar_4:3%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTc3OTk5Njc1MTU5MjI1OTY1/valentines-day-chocolate-gettyimages-923430892.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict ultra race time</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span></code></pre></div>
</details>
</div>
<section id="data-skim" class="level2">
<h2 class="anchored" data-anchor-id="data-skim">data skim</h2>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ultra_rankings <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>ultra_rankings</span>
<span id="cb2-2">race <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>race</span>
<span id="cb2-3"></span>
<span id="cb2-4">ultra_join <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb2-5">    ultra_rankings <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">left_join</span>(race, <span class="at" style="color: #657422;">by=</span><span class="st" style="color: #20794D;">"race_year_id"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">skimr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">skim</span>(ultra_join)</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">ultra_join</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">137803</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">20</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Date</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">difftime</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="even">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">runner</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">73629</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">time</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">72840</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gender</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">nationality</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">133</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">event</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">57</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">435</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">race</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">63</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">371</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">city</td>
<td style="text-align: right;">15599</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">308</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">country</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">60</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participation</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: Date</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">date</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">2012-01-14</td>
<td style="text-align: left;">2021-09-03</td>
<td style="text-align: left;">2017-10-13</td>
<td style="text-align: right;">711</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: difftime</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 18%">
<col style="width: 13%">
<col style="width: 18%">
<col style="width: 9%">
<col style="width: 14%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">start_time</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">0 secs</td>
<td style="text-align: left;">82800 secs</td>
<td style="text-align: left;">05:00:00</td>
<td style="text-align: right;">39</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 15%">
<col style="width: 9%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">race_year_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">26678.70</td>
<td style="text-align: right;">20156.18</td>
<td style="text-align: right;">2320</td>
<td style="text-align: right;">8670.0</td>
<td style="text-align: right;">21795.0</td>
<td style="text-align: right;">40621</td>
<td style="text-align: right;">72496.0</td>
<td style="text-align: left;">▇▃▃▂▂</td>
</tr>
<tr class="even">
<td style="text-align: left;">rank</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">253.56</td>
<td style="text-align: right;">390.80</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">31.0</td>
<td style="text-align: right;">87.0</td>
<td style="text-align: right;">235</td>
<td style="text-align: right;">1962.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">age</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">46.25</td>
<td style="text-align: right;">10.11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">40.0</td>
<td style="text-align: right;">46.0</td>
<td style="text-align: right;">53</td>
<td style="text-align: right;">133.0</td>
<td style="text-align: left;">▁▇▂▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">time_in_seconds</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">122358.26</td>
<td style="text-align: right;">37234.38</td>
<td style="text-align: right;">3600</td>
<td style="text-align: right;">96566.0</td>
<td style="text-align: right;">114167.0</td>
<td style="text-align: right;">148020</td>
<td style="text-align: right;">296806.0</td>
<td style="text-align: left;">▁▇▆▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">distance</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">154.08</td>
<td style="text-align: right;">39.22</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">160.9</td>
<td style="text-align: right;">162.6</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">179.1</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">elevation_gain</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">6473.94</td>
<td style="text-align: right;">3293.50</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3910.0</td>
<td style="text-align: right;">6640.0</td>
<td style="text-align: right;">9618</td>
<td style="text-align: right;">14430.0</td>
<td style="text-align: left;">▅▆▆▇▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">elevation_loss</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">-6512.20</td>
<td style="text-align: right;">3305.73</td>
<td style="text-align: right;">-14440</td>
<td style="text-align: right;">-9618.0</td>
<td style="text-align: right;">-6810.0</td>
<td style="text-align: right;">-3950</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: left;">▁▇▆▅▅</td>
</tr>
<tr class="even">
<td style="text-align: left;">aid_stations</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">9.58</td>
<td style="text-align: right;">7.56</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">12.0</td>
<td style="text-align: right;">16</td>
<td style="text-align: right;">56.0</td>
<td style="text-align: left;">▇▇▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participants</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">510.75</td>
<td style="text-align: right;">881.25</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">65.0</td>
<td style="text-align: right;">400</td>
<td style="text-align: right;">2900.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<p>We want to estimate the time (time_in_seconds) for runner to finish based on the features.</p>
<section id="the-effect-of-gender-and-age" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-gender-and-age">the effect of gender and age</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_decade =</span> <span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">*</span> (age <span class="sc" style="color: #5E5E5E;">%/%</span> <span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, gender, age, age_decade) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">group_by</span>(age_decade, gender) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb4-9">        <span class="at" style="color: #657422;">time_in_seconds_sd =</span> <span class="fu" style="color: #4758AB;">sd</span>(time_in_seconds),</span>
<span id="cb4-10">         <span class="at" style="color: #657422;">time_in_seconds =</span> <span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb4-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age_decade, <span class="at" style="color: #657422;">color=</span>gender, <span class="at" style="color: #657422;">group=</span>gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.2</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;">scale_color_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"age"</span>, <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-18">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="the-effect-of-nationality-age-gender" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-nationality-age-gender">the effect of nationality, age, gender</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">count</span>(nationality, <span class="at" style="color: #657422;">sort=</span><span class="cn" style="color: #8f5902;">TRUE</span>) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  nationality     n
  &lt;fct&gt;       &lt;int&gt;
1 Other       50563
2 USA         47259
3 FRA         28905
4 GBR         11076</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age, <span class="at" style="color: #657422;">fill=</span>nationality), <span class="at" style="color: #657422;">group=</span>nationality) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat=</span><span class="st" style="color: #20794D;">"density"</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>nationality</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(nationality, time_in_seconds), <span class="at" style="color: #657422;">y=</span>time_in_seconds, <span class="at" style="color: #657422;">fill=</span>nationality)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-8">    <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"runner's nationality"</span>, <span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-10">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-distance" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-distance">effect of distance</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>distance, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-elevation" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-elevation">effect of elevation</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb10-5">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), elevation_gain,  <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb10-6">        )) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>elevation , <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-9">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-date" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-date">effect of date</h3>
<p>The year of the race</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb11-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb11-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb11-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb11-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb11-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb11-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_year, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The month of race can be the proxy to estimate the season when race was hosted. However, here I did not take the geographic information (hemisphere) into consideration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb12-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb12-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_month) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb12-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb12-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb12-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_month, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="learning-models" class="level2">
<h2 class="anchored" data-anchor-id="learning-models">learning models</h2>
<p>Here I will perform two distinct models – linear regression and random forest to predict the race time using runner’s gender, age, nationality, elevation and distance of race.</p>
<section id="data-budget" class="level3">
<h3 class="anchored" data-anchor-id="data-budget">data budget</h3>
<p>inistal split to train and test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">ultra_df <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb13-7">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), </span>
<span id="cb13-8">        elevation_gain,</span>
<span id="cb13-9">        <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb13-10">        )</span>
<span id="cb13-11">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, age, gender, nationality, distance, elevation)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">2021</span>)</span>
<span id="cb13-15">ultra_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(ultra_df, <span class="at" style="color: #657422;">strata =</span> time_in_seconds)</span>
<span id="cb13-16">ultra_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(ultra_split)</span>
<span id="cb13-17">ultra_test <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<p>create resamples for cross validation</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">124</span>)</span>
<span id="cb14-2">ultra_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(ultra_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="recipes-for-feature-engineer" class="level3">
<h3 class="anchored" data-anchor-id="recipes-for-feature-engineer">recipes for feature engineer</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ultra_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(time_in_seconds <span class="sc" style="color: #5E5E5E;">~</span>., <span class="at" style="color: #657422;">data =</span> ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">step_other</span>(nationality) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">step_string2factor</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="co" style="color: #5E5E5E;"># step_dummy(all_nominal_predictors()) %&gt;% </span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># want to test whether dummy variables affect the model behave</span></span>
<span id="cb15-9">ind_rec <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-linear-model" class="level3">
<h3 class="anchored" data-anchor-id="fit-linear-model">fit linear model</h3>
<p>specify models</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lm_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span></code></pre></div>
</details>
</div>
<p>Does linear model need dummy variable? Using <code>workflow_set</code> to test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">lm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_set</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;">preproc =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="st" style="color: #20794D;">"nodummy"</span><span class="ot" style="color: #003B4F;">=</span>ultra_rec, <span class="st" style="color: #20794D;">"dummy"</span><span class="ot" style="color: #003B4F;">=</span>ind_rec),</span>
<span id="cb17-3">  <span class="at" style="color: #657422;">models =</span> <span class="fu" style="color: #4758AB;">list</span>(lm_spec)</span>
<span id="cb17-4">)</span>
<span id="cb17-5"></span>
<span id="cb17-6">lm_rs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_map</span>(</span>
<span id="cb17-7">  lm_wf, <span class="st" style="color: #20794D;">'fit_resamples'</span>, <span class="at" style="color: #657422;">resamples=</span>ultra_folds</span>
<span id="cb17-8">  )</span>
<span id="cb17-9"></span>
<span id="cb17-10">lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 9
  wflow_id           .config preproc model .metric .esti…¹    mean     n std_err
  &lt;chr&gt;              &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
1 nodummy_linear_reg Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
2 nodummy_linear_reg Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
3 dummy_linear_reg   Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
4 dummy_linear_reg   Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
# … with abbreviated variable name ¹​.estimator</code></pre>
</div>
</div>
<p>Based on the r-square value, the linear model with age, distance, elevation, gender and nationality explained ~57% variance of time_in_seconds.</p>
<p>Using dummy variable or not does not change the metrics. In fact, the number of coefficients will be exactly same no matter whether using dummy or not. Below shows coefficients of linear regression by fitting the “nodummy_linear_reg” workflow to the training data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">lm_coef <span class="ot" style="color: #003B4F;">&lt;-</span> lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">fit</span>(ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">tidy</span>()</span>
<span id="cb19-5"></span>
<span id="cb19-6">lm_coef</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 5
  term             estimate std.error statistic   p.value
  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept)       142711.     217.      658.  0        
2 age                 4220.      83.3      50.6 0        
3 genderW             6315.     236.       26.8 1.82e-157
4 nationalityGBR    -25432.     389.      -65.3 0        
5 nationalityJPN    -20211.     406.      -49.8 0        
6 nationalityUSA    -30025.     302.      -99.6 0        
7 nationalityother  -19682.     254.      -77.6 0        
8 distance            2630.      99.2      26.5 2.65e-154
9 elevation          17421.     117.      149.  0        </code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lm_coef <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">filter</span>(term<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"(Intercept)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> estimate, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(term, estimate))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>(estimate <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>)), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xmin=</span>estimate <span class="sc" style="color: #5E5E5E;">-</span> std.error, <span class="at" style="color: #657422;">xmax =</span> estimate <span class="sc" style="color: #5E5E5E;">+</span> std.error), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Elevation, being a women (compare to being a men), age and distance positively affect race time, while racers from JPN/GBR/USA/other (compare to racers from FRA) finish the race in shorter time.</p>
</section>
<section id="fit-random-forest-model-using-workflow" class="level3">
<h3 class="anchored" data-anchor-id="fit-random-forest-model-using-workflow">fit random forest model using workflow</h3>
<p>Using random forest as model to get Resampling results</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">rf_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'ranger'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb22-4"></span>
<span id="cb22-5">rf_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">add_model</span>(rf_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;">add_recipe</span>(ultra_rec)</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;"># resample evaluate </span></span>
<span id="cb22-10">rf_rs  <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-11">  <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb22-12">    <span class="at" style="color: #657422;">resamples =</span> ultra_folds</span>
<span id="cb22-13">  )</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 6
  .metric .estimator      mean     n  std_err .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18535.       10 57.2     Preprocessor1_Model1
2 rsq     standard       0.738    10  0.00219 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Compared to linear model shown above, random forest with same predictors can explain more variance of Y (74% vs.&nbsp;56%) and show smaller rmse (1.8e4 vs.&nbsp;2.4e4).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb25-2">  rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"random forest"</span>),</span>
<span id="cb25-6">  lm_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-7">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;">filter</span>(wflow_id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-9">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"linear reg"</span>)</span>
<span id="cb25-11">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> model, <span class="at" style="color: #657422;">y =</span> mean)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(.metric), <span class="at" style="color: #657422;">scales =</span> <span class="st" style="color: #20794D;">'free'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>mean <span class="sc" style="color: #5E5E5E;">-</span> std_err, <span class="at" style="color: #657422;">ymax=</span>mean <span class="sc" style="color: #5E5E5E;">+</span> std_err), <span class="at" style="color: #657422;">width=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notes: above plot can also be done by autoplot if we perform the comparison between linear regression and random forest models using <code>workflow_set</code>.</p>
</section>
<section id="last_fit-test-data-using-random-forest-result" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-test-data-using-random-forest-result"><code>last_fit</code> test data using random forest result</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_final_rs <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">last_fit</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric .estimator .estimate .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18558.    Preprocessor1_Model1
2 rsq     standard       0.737 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Different from <code>fit_resample</code> results, these metrics are calculated on the test data. The value is very close to the values done on training data (resample data), thus the model is not over-fitted.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb29-3"></span>
<span id="cb29-4">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: rand_forest()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_normalize()
• step_string2factor()

── Model ───────────────────────────────────────────────────────────────────────
Ranger result

Call:
 ranger::ranger(x = maybe_data_frame(x), y = y, num.threads = 1,      verbose = FALSE, seed = sample.int(10^5, 1)) 

Type:                             Regression 
Number of trees:                  500 
Sample size:                      83042 
Number of independent variables:  5 
Mtry:                             2 
Target node size:                 5 
Variable importance mode:         none 
Splitrule:                        variance 
OOB prediction error (MSE):       342750489 
R squared (OOB):                  0.7386915 </code></pre>
</div>
</div>
<p>The above <strong>trained</strong> workflow from <code>last_fit</code> can be saved in <code>.rda</code> for future prediction</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># using final_wf for prediction</span></span>
<span id="cb31-2">final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">predict</span>(<span class="at" style="color: #657422;">new_data =</span> ultra_train <span class="sc" style="color: #5E5E5E;">%&gt;%</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>)) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
    .pred
    &lt;dbl&gt;
1 108741.</code></pre>
</div>
</div>
</section>
</section>
<section id="what-techniques-i-learned" class="level2">
<h2 class="anchored" data-anchor-id="what-techniques-i-learned">what techniques i learned</h2>
<ul>
<li>deal with high-levels nominal features (<code>fct_lump</code> and <code>step_other</code>) in EDA and modeling</li>
<li><code>workflow_set</code> and <code>map_workflow</code> to create multiple workflows for model and/or recipes comparison.</li>
<li><code>fit_resample</code> for cross-validation. The metrics collected from cross-validation results are used for workflow comparison.</li>
<li><code>last_fit</code> model and save <strong>trained</strong> workflow for future use</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</guid>
  <pubDate>Tue, 02 Nov 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Taking options from command line</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</link>
  <description><![CDATA[ 



<p>Taking in options from command line is an essential step towards generalized usage of scripts. However, it is a chapter I skipped in almost all language textbooks since my primary goal was to code for a specific problem and did not mind re-writing the scripts in different situations.</p>
<p>Usually the options following the scripts have two types</p>
<ul>
<li>direct inputs (with default definition within the script).</li>
<li>the “true”” options with “-” or “–” to allow optional manipulation</li>
</ul>
<p>For the second type of options, it becomes a little bit complicated. First, this type options can be further grouped based whether there is argument value followed specified option (“options with argument” vs “options without argument”). In addition, it can also be classified by whether this option is mandatory or optional (although all mandatory options can be converted to optional by specifying the default value).</p>
<p>In this post, I will catch up on the options taken-in scripting in Bash, R and Perl.</p>
<section id="Bash" class="level3">
<h3 class="anchored" data-anchor-id="Bash">Bash</h3>
<p>Bash script takes in first type of options using special variables based on the input orders <code>$1</code>, <code>$2</code>, … For the unknown number of inputs, <code>$@</code> array is used to represents all arguments after script file (<code>$0</code>).</p>
<p>For the second type of options, there are two methods to take in options. One method is to use <code>while :; do; done</code> to read through all arguments (<code>$@</code>) after scripts by considering <code>--option</code> as an argument itself and <code>shift</code> it off in the loop. For each <code>--option</code>, we can use <a href="https://www.tutorialspoint.com/unix/case-esac-statement.htm"><code>case; esac</code></a> matching to specify what exact value should be.</p>
<p>In the following script, I listed the examples of “mandatory non-empty option argument”, “optional empty option argument” and “optional non-empty option argument”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">## specifiy usage function</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">usage()</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-6">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> [-h] -p p1 [-v] [-o output_file] bam1 bam2"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">## setting defaults</span></span>
<span id="cb1-10"><span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span>0 <span class="co" style="color: #5E5E5E;"># default for optional empty option argument</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># p1=0 # all mandatory options can be converted to optional by specifying the default value</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">:</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">$1</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb1-15">        <span class="ss" style="color: #20794D;">-p</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--para</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># mandatory non-empty option argument (mandatory enforced later, or we can set default to make it optional)</span></span>
<span id="cb1-16">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;">!</span> <span class="va" style="color: #111111;">$2</span> <span class="ot" style="color: #003B4F;">=~</span> <span class="st" style="color: #20794D;">"-"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-17">                        <span class="va" style="color: #111111;">p1</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-18">                        <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-19">                <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-20">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para requires non-empty option argument'</span></span>
<span id="cb1-21">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-22">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-24">        <span class="ss" style="color: #20794D;">-v</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--verbose</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional empty option argument (with default)</span></span>
<span id="cb1-25">                <span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$((verbose</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-27">        <span class="ss" style="color: #20794D;">-o</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--output</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional non-empty option argument</span></span>
<span id="cb1-28">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-f</span> <span class="va" style="color: #111111;">$2</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span> <span class="co" style="color: #5E5E5E;"># prevent overwrite into a file exist in directory</span></span>
<span id="cb1-29">                        <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARNING: --output argument %s is a file existing in directory\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-30">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Are you sure about overwriting?"</span></span>
<span id="cb1-31">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Press any key to continue"</span></span>
<span id="cb1-32">                        <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">[</span> true <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-33">                                <span class="bu" style="color: null;">read</span> <span class="at" style="color: #657422;">-n</span> 1</span>
<span id="cb1-34">                                <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">=</span> 0 <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-35">                                        <span class="cf" style="color: #003B4F;">break</span> <span class="ex" style="color: null;">1</span> <span class="co" style="color: #5E5E5E;"># break the while [ true ] loop</span></span>
<span id="cb1-36">                                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-37">                        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-38">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-39">                <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-40">                <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-41">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-42">        <span class="ss" style="color: #20794D;">-h</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--help</span> <span class="kw" style="color: #003B4F;">)</span>           </span>
<span id="cb1-43">                <span class="ex" style="color: null;">usage</span></span>
<span id="cb1-44">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-46">        <span class="ss" style="color: #20794D;">-</span><span class="pp" style="color: #AD0000;">?*</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb1-47">                <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARN: Unknown option (ignored): %s\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$1</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-48">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-50">        <span class="pp" style="color: #AD0000;">*</span><span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># Default case: No more options, so break out of the loop.</span></span>
<span id="cb1-51">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb1-53">    <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;"># mandatory argument</span></span>
<span id="cb1-57"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$p1</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-58">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para is mandatory argument'</span></span>
<span id="cb1-59">        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-60"><span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;"># input after options are put into $@</span></span>
<span id="cb1-63"><span class="va" style="color: #111111;">bams</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span>
<span id="cb1-64"></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;"># a simple function to execute </span></span>
<span id="cb1-66"><span class="fu" style="color: #4758AB;">print_out()</span></span>
<span id="cb1-67"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;">for</span> bam <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">${bams</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-69">                <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$bam</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-70">        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-71"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;"># show what --para take in</span></span>
<span id="cb1-74"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$p1</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-75"></span>
<span id="cb1-76"><span class="co" style="color: #5E5E5E;"># execute function output</span></span>
<span id="cb1-77"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">!</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$output</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-78">        <span class="ex" style="color: null;">print_out</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="va" style="color: #111111;">$output</span></span>
<span id="cb1-79"><span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-80">        <span class="ex" style="color: null;">print_out</span></span>
<span id="cb1-81"><span class="cf" style="color: #003B4F;">fi</span></span></code></pre></div>
</details>
</div>
<p>The second method is to use <code>getopts</code> function with function-specific variables <code>$OPTARG</code> and <code>$OPTIND</code> to track the option value and option number. It can only take in the short format “-” options. The <code>:</code> following the <code>-o</code> will be passed to $OPTARG, thus, the different between “options with argument” and “options without argument” are shown in <code>o:</code> and <code>o</code> in <code>getopts</code> format.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">getopts</span> <span class="st" style="color: #20794D;">":ho:"</span> <span class="va" style="color: #111111;">opt</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb2-2">        <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">${opt}</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb2-3">                <span class="ss" style="color: #20794D;">h</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-4">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> -o output_file folder1 folder2 ..."</span></span>
<span id="cb2-5">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-6">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-7">                <span class="ss" style="color: #20794D;">o</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-8">                        <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$OPTARG</span></span>
<span id="cb2-9">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-10">                <span class="dt" style="color: #AD0000;">\?</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-11">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;">"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-12">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-13">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-14">                <span class="ss" style="color: #20794D;">:</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-15">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;"> requires an argument"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-16">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb2-19"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb2-20"><span class="bu" style="color: null;">shift</span> <span class="va" style="color: #111111;">$((OPTIND</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb2-21"><span class="va" style="color: #111111;">dirs</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span></code></pre></div>
</details>
</div>
<p>Personally, I would recommend the first method. The additional reading can be found http://mywiki.wooledge.org/BashFAQ/035</p>
</section>
<section id="R" class="level3">
<h3 class="anchored" data-anchor-id="R">R</h3>
<p>Most R users execute the R script in Rstudio or R Console, and may never need to take in options. However, to execute R script in HPC environment, we submit <code>Rscript script.R</code> to the cluster for the jobs requiring high resources from command line.</p>
<p>For first type of options, <code>commandArgs</code> is all you need. It parses all arguments after script.R to the arguments vector.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">args <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">commandArgs</span>(<span class="at" style="color: #657422;">trailingOnly=</span><span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-2">file1<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-3">file2<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
</details>
</div>
<p>For the second type of options, package <code>optparse</code> is useful. Function <code>make_option</code> is used to specify each option type (matching pattern, option type, default value, …). To distinguish “options with argument” and “options without argument”, we can specify <code>action</code> argument in <code>make_option</code> function.</p>
<ul>
<li>options with argument: <code>action="store", type="character"</code> (# this is default)</li>
<li>options without argument: <code>action="store_true"</code> (# by default, <code>type="logical"</code>)</li>
</ul>
<p>After making option list, we use <code>parse_args(OptionParser(option_list))</code> to assign options to a list value (with long flag option as list element name).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(optparse)</span>
<span id="cb4-2"></span>
<span id="cb4-3">option_list <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;"># parameter 1 </span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-p"</span>,<span class="st" style="color: #20794D;">"--para"</span>),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"integer"</span>, </span>
<span id="cb4-8">    <span class="at" style="color: #657422;">default=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb4-9">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"parameter 1 [default= %default]"</span></span>
<span id="cb4-10">    ),</span>
<span id="cb4-11">  <span class="co" style="color: #5E5E5E;"># optional output</span></span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-o"</span>, <span class="st" style="color: #20794D;">"--out"</span>), </span>
<span id="cb4-14">      <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"character"</span>, </span>
<span id="cb4-15">      <span class="at" style="color: #657422;">default=</span><span class="fu" style="color: #4758AB;">stdout</span>(), </span>
<span id="cb4-16">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"output file name [default= STDOUT]"</span>, </span>
<span id="cb4-17">      <span class="at" style="color: #657422;">metavar=</span><span class="st" style="color: #20794D;">"character"</span></span>
<span id="cb4-18">     ),</span>
<span id="cb4-19">  <span class="co" style="color: #5E5E5E;"># verbose</span></span>
<span id="cb4-20">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-v"</span>, <span class="st" style="color: #20794D;">"--verbose"</span>), </span>
<span id="cb4-22">      <span class="at" style="color: #657422;">action=</span><span class="st" style="color: #20794D;">"store_true"</span>,</span>
<span id="cb4-23">      <span class="at" style="color: #657422;">default=</span>F</span>
<span id="cb4-24">     )</span>
<span id="cb4-25">)</span>
<span id="cb4-26"> </span>
<span id="cb4-27">opts <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list))</span>
<span id="cb4-28">opts</span></code></pre></div>
</details>
</div>
<p>Things need to be cautious</p>
<ul>
<li>final list, by default, have help function, thus no need to specify <code>-h</code>. To visualize the help page</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list), <span class="at" style="color: #657422;">args =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"--help"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li>long flag option is required.</li>
<li><code>default</code> argument in function <code>make_option</code> must not be NULL, otherwise, the option will not be included in the final list.</li>
<li>There are other useful arguments including <code>dest</code>, <code>callback</code> and <code>metavar</code>. Learn more from</li>
</ul>
<p>Besides package <code>optparse</code>, <code>argparser</code> is another popular package. Please read <a href="https://blog.sellorm.com/2017/12/30/command-line-utilities-in-r-pt-6/">this blog</a> for tutorial.</p>
</section>
<section id="Perl" class="level3">
<h3 class="anchored" data-anchor-id="Perl">Perl</h3>
<p>Perl script takes every argument (after script) from command line into a special array <code>@ARGV</code>. We can easily read first type of options by parsing through <code>@ARGV</code>. This is very similar to <code>commandArgs</code> in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb6-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> file1 [file2 file3...]</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;">This script is to print out first column of each file</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;">It requires at least one input file </span></span>
<span id="cb6-5"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>; <span class="co" style="color: #5E5E5E;"># ensure there are arguments following the script</span></span>
<span id="cb6-9">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb6-10">  <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){ <span class="co" style="color: #5E5E5E;"># go through each input file</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span><span class="st" style="color: #20794D;">[</span><span class="dt" style="color: #AD0000;">$i</span><span class="st" style="color: #20794D;">]</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb6-13">      <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb6-14">      <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@items</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/\t/</span>,<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb6-15">      <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$items</span><span class="st" style="color: #20794D;">[0]</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-16">    }</span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb6-18">  }</span>
<span id="cb6-19">}</span></code></pre></div>
</details>
</div>
<p>In above script, another special variable <code>$0</code> was used. It represents the script name itself (for example we can save above script as “print_col1.pl”). Thus, when the script is not followed by an input file, it will print usage</p>
<blockquote class="blockquote">
<p>print_col1.pl file1 [file2 file3…]<br>
This script is to print out first column of each file It requires at least one input file</p>
</blockquote>
<p>For the second type of options, perl uses a module <code>Getopt</code> to parse options. The following script shows an example to print sequence length based on file format (<a href="https://compgenomr.github.io/book/fasta-and-fastq-formats.html">fasta vs fastq</a>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb7-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">use</span> <span class="fu" style="color: #4758AB;">Getopt::Long</span>;</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> [--format fasta] [--seqN] [--header] file [file2 file3 ...]</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;">this script is to calculate sequence file from fastq/fasta file</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;">--format fasta|fastq # default is fasta</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;">--seqN integer # default is everything</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;">--header # default no header added</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;">output directly to STDOUT as seq_name[tab]length</span></span>
<span id="cb7-10"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$format</span>=<span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>; <span class="co" style="color: #5E5E5E;"># set default as fasta format.</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seqN</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># set default for number of sequence to print (0 here means print all sequences)</span></span>
<span id="cb7-14"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span> = <span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># option variable with default value (false)</span></span>
<span id="cb7-15">GetOptions(</span>
<span id="cb7-16">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">format=s</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$format</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as string (s)</span></span>
<span id="cb7-17">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seqN=i</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$seqN</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as numeric (i)</span></span>
<span id="cb7-18">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">header</span><span class="ot" style="color: #003B4F;">"</span>  =&gt; \<span class="dt" style="color: #AD0000;">$header</span>  <span class="co" style="color: #5E5E5E;"># flag: if --header specified, it will become true</span></span>
<span id="cb7-19">);</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$n</span>;</span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-23">  <span class="dt" style="color: #AD0000;">$n</span>=<span class="dv" style="color: #AD0000;">0</span>;</span>
<span id="cb7-24">}</span>
<span id="cb7-25"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-26">        <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>;</span>
<span id="cb7-27">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-28">        OUTER: <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){</span>
<span id="cb7-29">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$header</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-30">                  <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seq_name</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">seq_len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-31">                }</span>
<span id="cb7-32">                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$file</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span>[<span class="dt" style="color: #AD0000;">$i</span>];</span>
<span id="cb7-33">                <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="dt" style="color: #AD0000;">$file</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-34">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-35">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-36">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-37">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-38">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-39">                                <span class="kw" style="color: #003B4F;">if</span>(<span class="ot" style="color: #003B4F;">/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;/</span>){</span>
<span id="cb7-40">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-41">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-42">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-43">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-44">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-45">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-46">                                                }</span>
<span id="cb7-47">                                        }</span>
<span id="cb7-48">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;//</span>;</span>
<span id="cb7-49">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-50">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-51">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="ot" style="color: #003B4F;">""</span>;</span>
<span id="cb7-52">                                }<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-53">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="dt" style="color: #AD0000;">$seq</span>.<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-54">                                }</span>
<span id="cb7-55">                        }</span>
<span id="cb7-56">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-57">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-58">                }</span>
<span id="cb7-59">                <span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fastq</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-60">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-61">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-62">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$line</span>;</span>
<span id="cb7-63">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-64">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-65">                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-66">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-67">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-68">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-69">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-70">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-71">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-72">                                                }</span>
<span id="cb7-73">                                        }</span>
<span id="cb7-74">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="dt" style="color: #AD0000;">@</span><span class="ot" style="color: #003B4F;">//</span>;</span>
<span id="cb7-75">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-76">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-77">                                        </span>
<span id="cb7-78">                                }<span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-79">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-80">                                }</span>
<span id="cb7-81">                                <span class="dt" style="color: #AD0000;">$line</span>++;</span>
<span id="cb7-82">                        }</span>
<span id="cb7-83">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-84">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-85">                }</span>
<span id="cb7-86">                <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb7-87">        }</span>
<span id="cb7-88">}</span></code></pre></div>
</details>
</div>
<p>For more usage example of <code>Getopt</code>, please refer to its <a href="https://perldoc.perl.org/Getopt/Long.html">perldoc</a> page.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>bash</category>
  <category>perl</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</guid>
  <pubDate>Sat, 22 Aug 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.source-data.com/wp-content/uploads/2019/11/options_0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transition from dplyr to data.table</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</link>
  <description><![CDATA[ 



<p><code>dplyr</code> and <code>tidyr</code> have totally changed the way we code in R. I particularly love the pipe <code>%&gt;%</code> which comes from <code>magrittr</code> package and makes the code easy to read and understand. While I am obessed with simplicity of <code>dplyr</code> coding style, I am also fascinated with how fast <code>data.table</code> wrangles data. Below is an example showing the speed difference using <code>dplyr</code> and <code>data.table</code> in a user function <code>gene_lookup</code> for one of my shiny app.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># dplyr version</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb1-3">        old_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup_old</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb1-4">})</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># 2.727   0.122   2.898  </span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># data.table version</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb2-3">        new_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb2-4">})</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># 0.505   0.054   0.293 </span></span></code></pre></div>
</details>
</div>
<p>Last year, Hadley Wickham and his team launched a hybrid package <a href="https://github.com/tidyverse/dtplyr"><code>dtplyr</code></a> which uses the syntax of <code>dplyr</code> but runs <code>data.table</code> on the backend. It is a brilliant idea and I believe a lot of dplyr fan would love it, but dtplyr is still slower than data.table. Considering speed is the highest priority in some applications, I would like to switch to data.table completely. It took me only half day to get used to data.table syntax anyway. Plus, <a href="https://martinctc.github.io/blog/using-data.table-with-magrittr-pipes-best-of-both-worlds/">this post</a>, which shows using pipe in data.table, makes this transition more smooth and pleasant.</p>
<p>In this blog, I will list <code>data.table</code> and <code>dplyr</code>/<code>tidyr</code> syntax back to back, providing an easy reference for dplyr users who want to quickly pick up <code>data.table</code>.</p>
<section id="read-file" class="level3">
<h3 class="anchored" data-anchor-id="read-file">read file</h3>
<p><code>read_delim</code> and <code>read_csv</code> are the two functions commonly used to read-in data from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_delim</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>, <span class="at" style="color: #657422;">delim=</span><span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb3-2">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_df)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "spec_tbl_df" "tbl_df"      "tbl"         "data.frame" </code></pre>
</div>
</div>
<p>The equivalent command in <code>data.table</code> is <code>fread</code>. Like “read_delim”, <code>fread</code> automatically searches for header and defines column data type, but it is faster and automatically searches for separators as well.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_dt)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.table" "data.frame"</code></pre>
</div>
</div>
<p>To switch between tibble and data.table class, use <code>tbl_df</code> to convert data.table to tibble, and <code>as.data.table()</code> to convert tibble/data.frame to data.table.</p>
</section>
<section id="subset-rows" class="level3">
<h3 class="anchored" data-anchor-id="subset-rows">subset rows</h3>
<p>Subsetting rows is done by the function <code>filter</code> from <code>dplyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb7-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model))</span></code></pre></div>
</details>
</div>
<p>Subsetting rows in <code>data.table</code> is very similar to the base R, placing boolean vector at row index. The index separator <code>,</code> can even be omitted. Also if boolean expression contains column variables, we can use the variable names directly instead of using df$var.</p>
<p>Pipe can be used in the format of <code>%&gt;% .[]</code> to connect the code.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb8-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  .[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model)]</span></code></pre></div>
</details>
</div>
</section>
<section id="subset-columns" class="level3">
<h3 class="anchored" data-anchor-id="subset-columns">subset columns</h3>
<p>Subsetting columns is done by the function <code>select</code> from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb9-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb9-6">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"ar"</span>))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses variable names to subset columns. Like base R, the variable name vector is a character class placed at column index position. Index separator <code>,</code> cannot be omitted here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb10-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  .[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"model"</span>,<span class="st" style="color: #20794D;">"mpg"</span>,<span class="st" style="color: #20794D;">"cyl"</span>)]</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb10-6">col_ar <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt)[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"ar"</span>,<span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt))]</span>
<span id="cb10-7">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-8">  .[,<span class="sc" style="color: #5E5E5E;">-</span>..col_ar]</span></code></pre></div>
</details>
</div>
</section>
<section id="add-new-variable" class="level3">
<h3 class="anchored" data-anchor-id="add-new-variable">add new variable</h3>
<p><code>dplyr</code> uses <code>mutate</code> to add column.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># assign car size based on the weight</span></span>
<span id="cb11-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb11-4">    wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb11-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb11-6">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span></span>
<span id="cb11-7">  ))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses <code>:=</code> to assign values to column variables. Be aware that, different from <code>mutate</code> which returns the updated data frame without assignment, data.table is modified by reference and returned invisibly when <code>:=</code> or any <code>set*</code> functions are used. If you do not want to change the original data.table, take a copy first <code>DT2 = copy(DT)</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">untidy_mtcars_dt2<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">copy</span>(untidy_mtcars_dt)</span>
<span id="cb12-2">untidy_mtcars_dt2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">  .[,size<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="fu" style="color: #4758AB;">case_when</span>(wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb12-4">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb12-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span>)]</span></code></pre></div>
</details>
</div>
<p><code>:=</code> can also be used for multiple column assignment and functional form. More details refer to the <a href="https://www.rdocumentation.org/packages/data.table/versions/1.12.8/topics/%3A%3D">usage manual</a></p>
</section>
<section id="pivot" class="level3">
<h3 class="anchored" data-anchor-id="pivot">pivot</h3>
<p>Table pivoting is done by the functions <code>spread</code> and <code>gather</code> (or <code>pivot_wider</code> and <code>pivot_longer</code>) from <code>tidyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># wide to long (gather) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-2">tidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">value=</span><span class="st" style="color: #20794D;">"tmp"</span>,automatic,manual) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># wide to long (pivot_longer) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-8">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>),<span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 12
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb trans…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     4     4 manual 
 2 Mazda RX…  21       6  160    110  3.9   2.88  17.0     0     4     4 manual 
 3 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     4     1 manual 
 4 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1 automa…
 5 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2 automa…
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1 automa…
 7 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4 automa…
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2 automa…
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2 automa…
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4 automa…
# … with 22 more rows, and abbreviated variable name ¹​transmission
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># long to wide (spread) -- make transmission to group automatic and manual</span></span>
<span id="cb15-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">spread</span>(transmission, tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># long to wide (pivot_wider) -- </span></span>
<span id="cb17-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>transmission, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
<p>The <code>data.table</code> uses <code>dcast</code> for long-to-wide and <code>melt</code> for wide-to-long pivoting.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># wide to long (melt) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb19-2">tidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">melt</span>(<span class="at" style="color: #657422;">measure.vars=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>), <span class="at" style="color: #657422;">variable.name=</span><span class="st" style="color: #20794D;">"transmission"</span>, <span class="at" style="color: #657422;">value.name=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  .[tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-5">  .[,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"tmp"</span>)]</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># long to wide (dcast) -- split transmission column to automatic manual</span></span>
<span id="cb19-8">tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-9">  .[, tmp<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb19-10"></span>
<span id="cb19-11">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span>   </span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;">dcast</span>(model <span class="sc" style="color: #5E5E5E;">+</span> mpg <span class="sc" style="color: #5E5E5E;">+</span> cyl <span class="sc" style="color: #5E5E5E;">+</span> disp <span class="sc" style="color: #5E5E5E;">+</span> hp <span class="sc" style="color: #5E5E5E;">+</span> drat <span class="sc" style="color: #5E5E5E;">+</span> wt <span class="sc" style="color: #5E5E5E;">+</span> qsec <span class="sc" style="color: #5E5E5E;">+</span> vs <span class="sc" style="color: #5E5E5E;">+</span> gear <span class="sc" style="color: #5E5E5E;">+</span> carb <span class="sc" style="color: #5E5E5E;">~</span>transmission, <span class="at" style="color: #657422;">value.var=</span><span class="st" style="color: #20794D;">"tmp"</span>)</span>
<span id="cb19-13"></span>
<span id="cb19-14">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-15">  .[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>) <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">replace</span>(.SD,<span class="fu" style="color: #4758AB;">is.na</span>(.SD),<span class="dv" style="color: #AD0000;">0</span>), .SDcols<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>)]</span></code></pre></div>
</details>
</div>
</section>
<section id="merge" class="level3">
<h3 class="anchored" data-anchor-id="merge">merge</h3>
<p><code>dplyr</code> uses SQL-like join functions to merge two or more tables together. There are <code>inner_join</code>, <code>full_join</code>, <code>left_join</code>, <code>right_join</code>, <code>semi_join</code> and <code>anti_join</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># generate two tables</span></span>
<span id="cb20-2">tidy_mtcars_df_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl, hp, vs)</span>
<span id="cb20-4">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">select</span>(model, disp, qsec, transmission, gear, carb)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb20-8"><span class="fu" style="color: #4758AB;">left_join</span>(</span>
<span id="cb20-9">  tidy_mtcars_df_engine,</span>
<span id="cb20-10">  tidy_mtcars_df_other</span>
<span id="cb20-11">)</span></code></pre></div>
</details>
</div>
<p><code>data.table</code>, from the other end, use <code>merge</code> for all the joins. By default, <code>merge</code> is <code>inner_join</code>, but we can adjust <code>by</code> variables to fulfill other join functions.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tidy_mtcars_dt_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_engine <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-2">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_other <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># inner_join</span></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-6">  tidy_mtcars_dt_engine,</span>
<span id="cb21-7">  tidy_mtcars_df_other,</span>
<span id="cb21-8">  <span class="at" style="color: #657422;">all=</span><span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb21-9">)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb21-12"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-13">  tidy_mtcars_dt_engine,</span>
<span id="cb21-14">  tidy_mtcars_df_other,</span>
<span id="cb21-15">  <span class="at" style="color: #657422;">all.x=</span>T</span>
<span id="cb21-16">)</span>
<span id="cb21-17"></span>
<span id="cb21-18"><span class="co" style="color: #5E5E5E;"># right_join</span></span>
<span id="cb21-19"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-20">  tidy_mtcars_dt_engine,</span>
<span id="cb21-21">  tidy_mtcars_df_other,</span>
<span id="cb21-22">  <span class="at" style="color: #657422;">all.y=</span>T</span>
<span id="cb21-23">)</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;"># full_join</span></span>
<span id="cb21-26"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-27">  tidy_mtcars_dt_engine,</span>
<span id="cb21-28">  tidy_mtcars_df_other,</span>
<span id="cb21-29">  <span class="at" style="color: #657422;">all=</span>T</span>
<span id="cb21-30">)</span></code></pre></div>
</details>
</div>
</section>
<section id="group-and-summarize" class="level3">
<h3 class="anchored" data-anchor-id="group-and-summarize">group and summarize</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>summarize</code> to calculate the new variable based on the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># calculate weight mean for each group of differrent cylinder number</span></span>
<span id="cb22-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
    cyl wt_mean
  &lt;dbl&gt;   &lt;dbl&gt;
1     4    2.29
2     6    3.12
3     8    4.00</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>by</code> to specify the group, and <code>=</code> to summarize.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  .[,.(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)),by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl  wt_mean
1:   8 3.999214
2:   4 2.285727
3:   6 3.117143</code></pre>
</div>
</div>
</section>
<section id="group-and-subsetting" class="level3">
<h3 class="anchored" data-anchor-id="group-and-subsetting">group and subsetting</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>slice</code> to subset rows within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb26-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 13
  model        mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
1 Merc 240D   24.4     4  147.    62  3.69  3.19  20       1     4     2       1
2 Valiant     18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
3 Lincoln C…  10.4     8  460    215  3     5.42  17.8     0     3     4       1
# … with 1 more variable: manual &lt;dbl&gt;, and abbreviated variable name
#   ¹​automatic
# ℹ Use `colnames()` to see all variable names</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>.SD</code> and <code>by</code> to subset within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb28-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-3">  .[,.SD[<span class="fu" style="color: #4758AB;">which.max</span>(wt)], by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl               model  mpg  disp  hp drat    wt  qsec vs gear carb
1:   8 Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0    3    4
2:   4           Merc 240D 24.4 146.7  62 3.69 3.190 20.00  1    4    2
3:   6             Valiant 18.1 225.0 105 2.76 3.460 20.22  1    3    1
   automatic manual
1:         1      0
2:         1      0
3:         1      0</code></pre>
</div>
</div>
<p>For more <code>.SD</code> reading, refer to https://cran.r-project.org/web/packages/data.table/vignettes/datatable-sd-usage.html</p>
</section>
<section id="last-bits" class="level3">
<h3 class="anchored" data-anchor-id="last-bits">last bits</h3>
<p>There are other accessory functions useful in <code>dplyr</code> and some of them have corresponding functions in <code>data.table</code> too.</p>
<div class="cell">
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> usage </th>
   <th style="text-align:left;"> dplyr </th>
   <th style="text-align:left;"> data.table </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> get unique rows </td>
   <td style="text-align:left;"> distinct() </td>
   <td style="text-align:left;"> unique() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> sort by column(s) </td>
   <td style="text-align:left;"> arrange() </td>
   <td style="text-align:left;"> setorder()/setorderv() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> change column names </td>
   <td style="text-align:left;"> rename(new=old) </td>
   <td style="text-align:left;"> setnames(old, new) </td>
  </tr>
</tbody>
</table>

</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>data wrangle</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</guid>
  <pubDate>Thu, 25 Jun 2020 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Rdatatable/data.table/master/.graphics/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>ML pipeline with tidymodels vs. caret</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</link>
  <description><![CDATA[ 



<p>As a DS beginner, I first came across ML in R by studying the book <a href="https://bradleyboehmke.github.io/HOML/">Hands-On Machine Learning with R</a>. The book mainly focuses on the package <code>caret</code> with general introductions to packages like <code>recipe</code> and <code>h2o</code>. Most examples use the workflow in which feature engineering is performed by <code>recipe</code> and the modeling/learning part is done using <code>caret</code>.</p>
<p>It was a great pleasure to take the <a href="https://www.tidymodels.org/">tidymodels</a> workshop hosted by <a href="https://twitter.com/apreshill">Dr.&nbsp;Alison Hill</a> last week. <code>tidymodels</code> was recently launched as a collection of packages for ML using tidyverse principles. It is built on <code>recipes</code> for feature engineering and <code>parsnip</code> as the major modeling package, and links ML steps together with <code>workflow</code>.</p>
<p>In this post, I am going to present the general ML frameworks using <code>caret</code> and <code>tidymodels</code>, independently. The data used as an example is “Watson churn data” from <a href="https://modeldata.tidymodels.org/reference/index.html">modeldata</a></p>
<section id="required-libraries-and-data" class="level2">
<h2 class="anchored" data-anchor-id="required-libraries-and-data">0. required libraries and data</h2>
<p>Since tidymodels is a collection of packages like <code>tidyverse</code>, we can just use <code>library(tidymodels)</code> to load all the required libraries for the tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<p>For the <code>caret</code> pipeline, additional helper pacakges, like <code>recipes</code> and <code>rsample</code>, were needed to process the data. Most of those packages are already collected in the <code>tidymodels</code> pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(caret)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>For the data, I used “Watson churn data” from modeldata which is also a part of <code>tidymodels</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(modeldata)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">data</span>(wa_churn)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># quick view and summarize data</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">glimpse</span>(wa_churn)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># visdat::vis_miss(wa_churn)</span></span>
<span id="cb4-6">Hmisc<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">describe</span>(wa_churn)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># relevel factors</span></span>
<span id="cb4-9">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">churn=</span><span class="fu" style="color: #4758AB;">relevel</span>(churn, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-11">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">multiple_lines=</span><span class="fu" style="color: #4758AB;">relevel</span>(multiple_lines, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No phone service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">internet_service=</span><span class="fu" style="color: #4758AB;">relevel</span>(internet_service, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-13">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_security=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_security, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_backup=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_backup, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-15">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">device_protection=</span><span class="fu" style="color: #4758AB;">relevel</span>(device_protection, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-16">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tech_support=</span><span class="fu" style="color: #4758AB;">relevel</span>(tech_support, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_tv=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_tv, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_movies=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_movies, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-19">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">contract=</span><span class="fu" style="color: #4758AB;">relevel</span>(contract, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"Month-to-month"</span>))</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;"># to simplify the case here, we are going to remove missing variable</span></span>
<span id="cb4-22">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-23">        na.omit      </span></code></pre></div>
</details>
</div>
</section>
<section id="data-split" class="level2">
<h2 class="anchored" data-anchor-id="data-split">1. data split</h2>
<p>Both frameworks use <code>rsample::initial_split</code> to split the data into training and testing data. Here, we choose the standard 7:3 split between training and testing, with stratification on the target variable “churn”</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># split</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb5-3">data_splits <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"churn"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb5-4">data_train<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">training</span>(data_splits)</span>
<span id="cb5-5">data_test<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">testing</span>(data_splits)</span></code></pre></div>
</details>
</div>
<p>To stratify on the numeric variables, we can add the <code>breaks</code> parameter.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"tenure"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">breaks=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="feature-engineer" class="level2">
<h2 class="anchored" data-anchor-id="feature-engineer">2. feature engineer</h2>
<p>General <a href="http://www.feat.engineering/">feature engineering</a> steps include</p>
<ul>
<li>removing variables with zero variance or near zero variance: <code>step_zv</code>, <code>step_nzv</code></li>
<li>lumping nominal variables: <code>step_other</code></li>
<li>normalizing (scale + center) numeric variables (specific for regression-based models): <code>step_scale</code>, <code>step_center</code>, <code>step_normalize</code></li>
<li>encoding nominal variables to dummy features: <code>step_novel</code> + <code>step_dummy</code>, <code>step_integer</code></li>
<li>value transformation to fit normal distribution: <code>step_log</code>, <code>step_YeoJohnson</code>, <code>step_BoxCox</code></li>
<li>feature dimension reduction: <code>step_pca</code></li>
<li>dealing with missing values with imputation: <code>step_medianimpute</code>, <code>step_knnimpute</code>, <code>step_bagimpute</code></li>
</ul>
<p>Feature engineering is done by <code>recipes</code> in both <code>tidymodels</code> and <code>caret</code>. The functions in <code>recipes</code> starts with <code>step_*</code> and create a blueprint for feature engineering. The complete list of step is at https://tidymodels.github.io/recipes/reference/index.html</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(churn <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">        <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">        <span class="fu" style="color: #4758AB;">step_nzv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())  <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-4">        <span class="fu" style="color: #4758AB;">step_novel</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span></code></pre></div>
</details>
</div>
<p>The blueprint will not change the data until it is <code>fit</code> in the modeling step. We can use <code>prep</code> and <code>bake</code> to see “transformed” data in data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">        <span class="fu" style="color: #4758AB;">prep</span>(wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">        <span class="fu" style="color: #4758AB;">bake</span>(wa_churn)</span></code></pre></div>
</details>
</div>
<p>One reason to use <code>recipe</code> is to avoid <a href="https://www.quora.com/Whats-data-leakage-in-data-science">data leakage</a>. Data leakage is when information from outside the training data set is used to create the model.</p>
</section>
<section id="resample" class="level2">
<h2 class="anchored" data-anchor-id="resample">3. resample</h2>
<p>Resampling methods split the training data into additional sets. It will generate train set and validation set. Typical resampling method include cross-validation (cv), repeated cross-validation (repeated cv), leave-one-out and bootstrapping (with replacement).</p>
<p>We can use <code>rsample::vfold_cv</code> for both caret and tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># 10 fold cross validation stratified on target variable churn</span></span>
<span id="cb9-2">cv_folds <span class="ot" style="color: #003B4F;">=</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vfold_cv</span>(<span class="at" style="color: #657422;">data=</span>data_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">strata=</span>churn)</span></code></pre></div>
</details>
</div>
<p>However to make above <code>cv_folds</code> compatible with <code>caret</code>, we need to used <code>rsample2caret</code> to convert a <code>trainControl</code> list</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cv_folds_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rsample2caret</span>(cv_folds)</span>
<span id="cb10-2">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(</span>
<span id="cb10-3">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>,</span>
<span id="cb10-4">        <span class="at" style="color: #657422;">verboseIter =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb10-5">        <span class="at" style="color: #657422;">classProbs =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-6">        <span class="at" style="color: #657422;">summaryFunction =</span> twoClassSummary,</span>
<span id="cb10-7">        <span class="at" style="color: #657422;">returnResamp =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-8">        <span class="at" style="color: #657422;">savePredictions =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-9">        <span class="at" style="color: #657422;">index =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>index,</span>
<span id="cb10-10">        <span class="at" style="color: #657422;">indexOut =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>indexOut</span>
<span id="cb10-11">  )</span></code></pre></div>
</details>
</div>
<p>Or we can simply use caret function <code>trainControl</code> function to generate split. However, no stratify option is available here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>, <span class="at" style="color: #657422;">number=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="hyperparameters-grid" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameters-grid">4. hyperparameters grid</h2>
<p>A hyperparameter is a parameter whose value is set before the learning process begins. It is distinguished from other parameters by the fact that it is not used for fitting the machine to the training set. For different models, there are a different number of hyperparameters you can tune. Here I choose to use random forest to model the data. The hyperparameters for random forest from <code>ranger</code> include</p>
<ol type="1">
<li>the number of trees – <code>num.trees</code> or <code>trees</code></li>
<li>depth of tree – <code>max.depth</code></li>
<li>number of features to consider at every split – <code>mtry</code></li>
<li>minimum number of samples required to split a node – <code>min.node.size</code> or <code>min_n</code></li>
<li>whether using boostrapping to select samples for training – <code>replace</code>.</li>
<li>fraction of observation to sample – <code>sample.fraction</code>. Specifying <code>sample.fraction</code> requires <code>replace</code> being set as TRUE</li>
</ol>
<p>A rule of thumb to start is</p>
<ul>
<li><code>num.trees</code> start with 10x p (p means number of features).</li>
<li><code>max.depth</code></li>
<li><code>mtry</code>: sqrt(p) for classification and p/3 for regression</li>
<li><code>min.node.size</code> default values of 1 for classification and 5 for regression</li>
<li><code>replace</code> and <code>sample.fraction</code>: Default is 1 for sampling with replacement and 0.632 for sampling without replacement.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">hyp_grid <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb12-2">        <span class="at" style="color: #657422;">trees =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">500</span>,<span class="dv" style="color: #AD0000;">1000</span>),</span>
<span id="cb12-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb12-5">)</span></code></pre></div>
</details>
</div>
<p>The hyperparameters can be checked by function <code>args(rand_forest)</code></p>
<p><code>rf</code> method (from RandomForest) for <code>caret</code> has only one hyperparameter (mtry) by default.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">hyp_grid_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">mtry=</span><span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-3">)</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-model" class="level2">
<h2 class="anchored" data-anchor-id="fit-model">5. fit model</h2>
<p>Here is the step where tidymodel and caret start to diverge in syntax. Typically, tidymodel builds a model using <code>workflow</code> pipe which specifies formular/recipe and model, while caret uses <code>train</code> to fit model.</p>
<p><strong>tidymodel</strong></p>
<p>default version of model fit <code>fit_resamples</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># without grid_tune -&gt; fit_resamples() at train</span></span>
<span id="cb14-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-3">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"permutation"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-4">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-7">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb14-11">default_tm_fit<span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-12">        <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb14-13">                <span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb14-14">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_resamples</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb14-15">                )</span></code></pre></div>
</details>
</div>
<p>grid version of model fit <code>grid_tune</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># with grid_tune -&gt; set tune() at model, use tune_grid() at train</span></span>
<span id="cb15-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>(</span>
<span id="cb15-3">                <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-4">                <span class="at" style="color: #657422;">trees=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-5">                <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>()</span>
<span id="cb15-6">        ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-7">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"impurity"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-8">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-11">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-12">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb15-15">grid_tm_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-16">        <span class="fu" style="color: #4758AB;">tune_grid</span>(<span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb15-17">            <span class="at" style="color: #657422;">grid =</span> hyp_grid,</span>
<span id="cb15-18">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_grid</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb15-19">            )</span></code></pre></div>
</details>
</div>
<p>Notes: 1. <code>control</code> specification will be <code>control_grid()</code> in <code>grid_tune()</code> 2. <code>grid</code> parameter here can also be a integer which test for top N parameters.</p>
<p>Follow the thread https://github.com/tidymodels/parsnip/issues/235 to find how to print out default hyperparameters.</p>
<p><strong>caret</strong></p>
<p>default version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># without hyp grid</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb16-3">default_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb16-4">        rec,</span>
<span id="cb16-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb16-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb16-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb16-8">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb16-9">)</span></code></pre></div>
</details>
</div>
<p>grid version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># with grid --- tuneGrid</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb17-3">grid_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb17-4">        rec,</span>
<span id="cb17-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb17-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb17-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">tuneGrid =</span> hyp_grid_cr,</span>
<span id="cb17-9">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb17-10">)</span></code></pre></div>
</details>
</div>
</section>
<section id="collect-metrics" class="level2">
<h2 class="anchored" data-anchor-id="collect-metrics">6. collect metrics</h2>
<p>Metrics are used to determine how good the model fit. For classification problem, accuracy and ROC/AUC are commonly used. For regression problem, RSEM is the most commonly used approach.</p>
<p>We used <code>collect_metrics</code> in <code>tidymodels</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># for default model</span></span>
<span id="cb18-2">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># for grid tune model</span></span>
<span id="cb18-5">grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
</div>
<p>list <code>results</code> stores metrics for <code>caret</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results</span></code></pre></div>
</details>
</div>
<p>From the results, we can tell that <code>train</code> fit 3 hyperparameters by default.</p>
</section>
<section id="collect-prediction-for-training-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-training-data">7. collect prediction for training data</h2>
<p>Besides model metrics, we also care about what predicted value of target variable is in training data.</p>
<p><strong>tidymodels</strong></p>
<p>To see predicted target value for data_train, we can use <code>collect_predictions</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb20-6">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb20-7">                default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_predictions</span>(), churn, .pred_Yes</span>
<span id="cb20-8">        )</span>
<span id="cb20-9">)</span></code></pre></div>
</details>
</div>
<p><em>Notes: collect_predictions() only works when specifying <code>save_pred = TRUE</code> in control.</em></p>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb21-5">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb21-6">                default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df, </span>
<span id="cb21-7">                obs, Yes</span>
<span id="cb21-8">        )</span>
<span id="cb21-9">)</span></code></pre></div>
</details>
</div>
<p><em>For both caret and tidymodels, it is possible that each row of the original data point might be represented multiple times per tuning paramete if boostrap or repeated cv is used</em></p>
</section>
<section id="collect-prediction-for-testing-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-testing-data">8. collect prediction for testing data</h2>
<p>For default fit, only one set of hyperparameters is specified, thus we can just apply the fitted model to <code>data_test</code>. However, for grid fit, we end up with multiple sets of hyperparameters. Thus, before fitting the model, we need to pick the best set of hyperparameters based on metrics on training data (which is summarized using specified rsample method), then apply the best model to test_data</p>
<p><strong>tidymodels</strong></p>
<p><code>last_fit</code> is a function that is applied to workflow and fits to test data. By default, it generates predictions that can be reported by <code>collect_prediction</code> (no need to specify <code>control</code> in the fit). We can also use <code>collect_metrics</code> to check the metrics in testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb22-2">default_last_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">        <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb22-4"></span>
<span id="cb22-5">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb22-7"></span>
<span id="cb22-8">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-9">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p>To select best set of hyperparameters from <code>grid_tune</code>, we use <code>select_best</code> by specifying which metrics to use. Then we apply this set of hyperparameters to original workflow by <code>finalize_workflow</code>. Finally, like default, apply <code>last_fit</code> to the best workflow and get predictions and metrics for the testing data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># grid tune</span></span>
<span id="cb23-2">best_hyp <span class="ot" style="color: #003B4F;">&lt;-</span> grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-3">        <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"roc_auc"</span>)</span>
<span id="cb23-4"></span>
<span id="cb23-5">best_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-6">        <span class="fu" style="color: #4758AB;">finalize_workflow</span>(best_hyp)</span>
<span id="cb23-7"></span>
<span id="cb23-8">grid_last_fit <span class="ot" style="color: #003B4F;">&lt;-</span> best_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-9">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb23-10"></span>
<span id="cb23-11">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-12">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb23-13"></span>
<span id="cb23-14">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-15">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<p>The <code>predict</code> function can be directly applied to fitted model to test data. For grid fit, it will automatically detect the best hyperparameters (here mtry=5) and apply it to the testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb24-2">test_prediction <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb24-3">    default_cr_fit,</span>
<span id="cb24-4">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb24-5">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb24-11"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb24-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb24-13">test_prediction <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># best hyp</span></span>
<span id="cb25-3">grid_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">        <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(ROC))</span>
<span id="cb25-5"></span>
<span id="cb25-6">test_prediction2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb25-7">    grid_cr_fit,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb25-9">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-11">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb25-15"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction2, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb25-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb25-17">test_prediction2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-19">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-20">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
</section>
<section id="importance-of-variables" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-variables">9. importance of variables</h2>
<p>Lastly, we can use fit result to find most important variables by <code>vip</code> package or caret function <code>varImp</code>. Be aware that, for <code>tidymodels</code> different <code>importance</code> specified in the model will result in different ranks</p>
<p><strong>tidymodels</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pull_workflow_fit</span>(default_last_fit<span class="sc" style="color: #5E5E5E;">$</span>.workflow[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb26-2">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit)<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb26-3">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit, <span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"point"</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;"># model-specific variable importance scores are currently not available for objects of class "_rangermodel_fit"</span></span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">varImp</span>(default_cr_fit, <span class="at" style="color: #657422;">scale =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)<span class="sc" style="color: #5E5E5E;">$</span>importance <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span></code></pre></div>
</details>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The following table summarizes the ML workflow using caret versus tidymodels:</p>
</section>
<section id="thank-you" class="level2">
<h2 class="anchored" data-anchor-id="thank-you">Thank you</h2>
<p>Special thanks to <a href="https://www.linkedin.com/in/amygoodwindavies/">Amy Goodwin Davies</a> who helped editing and proof-reading this post!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>ML</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</guid>
  <pubDate>Thu, 30 Apr 2020 04:00:00 GMT</pubDate>
</item>
<item>
  <title>External persistent data I/O using ShinyApp</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</link>
  <description><![CDATA[ 



<p>Shiny App is a fantastic application in Rstudio and makes the data processing more accessible (and fun!). Most easy shiny apps are made to represent data based on a given user input which is read into memory or temporal file by R and spit out tables or figures in the same process. However, to make an app that need to keep the user input data for persistent storage and present in the future process require some external data I/O.</p>
<p>One of example app is survey app, in which user inputs will be accumulated for future presentation. Shiny rstudio presents this topic in an <a href="https://shiny.rstudio.com/articles/persistent-data-storage.html">article</a> written in 2017. However, my recent trial of those methods caused some troubles, either the packages/functions are deprecated or more strict authorization applied. In this post, I am going to introduce three persistent storage I have tried in my recent projects and complement that 2017 article with the updates.</p>
<section id="data-input-app" class="level2">
<h2 class="anchored" data-anchor-id="data-input-app">Data input app</h2>
<p>To start, I want to mention a <a href="https://gupsych.github.io/tquant/data-input.html">tutorial</a> on how to make survey app. In the tutorial, it mentioned how to read, save and re-load user input data from shiny app on a local machine. The critical part include:</p>
<ul>
<li>Create a table field to store each widget input (keep widget <code>inputId</code> and table field name same)</li>
<li>Save each user input data with a unique name in provided storage directory (<code>sprintf("%s_%s.rds", as.integer(Sys.time()), digest::digest(data))</code>)<br>
</li>
<li>Reload data file by file and field by field.<br>
</li>
<li>Reset survey by <code>update</code> widget</li>
</ul>
<p>In the tutorial example, the “provided storage directory” is in a local machine. Here I am going to introduce three external storage methods (AWS, dropbox and google spreadsheet) in the context of this dummy <a href="https://sckinta.shinyapps.io/SpeakerSignup/">survey app</a> I experiment with for Rladies Philly mentor-ship program.</p>
<p>In this dummy app, following widgets were made.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># define global options</span></span>
<span id="cb1-2">types<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Speaker"</span>,<span class="st" style="color: #20794D;">"Mentor"</span>)</span>
<span id="cb1-3">expertises<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academia to industry transition"</span>,<span class="st" style="color: #20794D;">"Transition to new field/industry"</span>,<span class="st" style="color: #20794D;">"Project/team management"</span>,<span class="st" style="color: #20794D;">"Making data science more accessible"</span>,<span class="st" style="color: #20794D;">"Working with big datasets"</span>,<span class="st" style="color: #20794D;">"Language research"</span>,<span class="st" style="color: #20794D;">"Data cleaning"</span>,<span class="st" style="color: #20794D;">"Capacity building"</span>,<span class="st" style="color: #20794D;">"Global health"</span>,<span class="st" style="color: #20794D;">"Data visualization"</span>,<span class="st" style="color: #20794D;">"Package creation"</span>,<span class="st" style="color: #20794D;">"Geospatial science"</span>,<span class="st" style="color: #20794D;">"Ecological modeling"</span>,<span class="st" style="color: #20794D;">"Mental health"</span>,<span class="st" style="color: #20794D;">"Building scalable tools"</span>,<span class="st" style="color: #20794D;">"Reproducible research"</span>,<span class="st" style="color: #20794D;">"App development"</span>)</span>
<span id="cb1-4">employment<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academic"</span>,<span class="st" style="color: #20794D;">"Pharmaceutical"</span>,<span class="st" style="color: #20794D;">"Financial"</span>,<span class="st" style="color: #20794D;">"Business"</span>,<span class="st" style="color: #20794D;">"Research"</span>,<span class="st" style="color: #20794D;">"Quality assurance"</span>,<span class="st" style="color: #20794D;">"Government/public sector"</span>)</span>
<span id="cb1-5">meets<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"In-person"</span>,<span class="st" style="color: #20794D;">"Remote (e.g. by phone or online)"</span>)</span>
<span id="cb1-6">genders<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"She/her"</span>, <span class="st" style="color: #20794D;">"He/him"</span>, <span class="st" style="color: #20794D;">"They/them"</span>,<span class="st" style="color: #20794D;">"Other"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># define user input widgets, put inputId into a field vector for late saveData/loadData</span></span>
<span id="cb1-10">fields <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"gender_wig"</span>, <span class="st" style="color: #20794D;">"linkedin_wig"</span>, <span class="st" style="color: #20794D;">"photo_wig"</span>,</span>
<span id="cb1-11">            <span class="st" style="color: #20794D;">"type_wig"</span>, <span class="st" style="color: #20794D;">"expertise_wig"</span>, <span class="st" style="color: #20794D;">"employment_wig"</span>, <span class="st" style="color: #20794D;">"meet_wig"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># user input widgets</span></span>
<span id="cb1-14">name_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"Name:"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-15">gender_wig  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;">"gender_wig"</span>, </span>
<span id="cb1-17">        <span class="st" style="color: #20794D;">"Pronouns:"</span>,</span>
<span id="cb1-18">        genders, </span>
<span id="cb1-19">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb1-20">        <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"none"</span></span>
<span id="cb1-21">)</span>
<span id="cb1-22">linkedin_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"linkedin_wig"</span>,<span class="st" style="color: #20794D;">"LinkedIn Profile Link:"</span>,<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-23">photo_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"photo_wig"</span>, <span class="st" style="color: #20794D;">"Your photo (eg. .jpeg, .png)"</span>, <span class="at" style="color: #657422;">accept =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"jpeg"</span>,<span class="st" style="color: #20794D;">"png"</span>))</span>
<span id="cb1-24">type_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-25">        <span class="st" style="color: #20794D;">"type_wig"</span>,</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;">"Available as mentor and/or speaker?"</span>, </span>
<span id="cb1-27">        types</span>
<span id="cb1-28">)</span>
<span id="cb1-29">expertise_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-30">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"expertise_wig"</span>,</span>
<span id="cb1-31">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Areas of expertise"</span>, </span>
<span id="cb1-32">        <span class="at" style="color: #657422;">choices =</span>  expertises,</span>
<span id="cb1-33">        <span class="at" style="color: #657422;">multiple =</span> T,</span>
<span id="cb1-34">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-35">)</span>
<span id="cb1-36">employment_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-37">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"employment_wig"</span>,</span>
<span id="cb1-38">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Primary type of employment"</span>, </span>
<span id="cb1-39">        <span class="at" style="color: #657422;">choices =</span>  employment,</span>
<span id="cb1-40">        <span class="at" style="color: #657422;">multiple =</span> F,</span>
<span id="cb1-41">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-42">)</span>
<span id="cb1-43">meet_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-44">        <span class="st" style="color: #20794D;">"meet_wig"</span>,</span>
<span id="cb1-45">        <span class="st" style="color: #20794D;">"If you are willing to serve as a mentor, </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">what is your preferred method of communication with your mentees?"</span>, </span>
<span id="cb1-46">        meets</span>
<span id="cb1-47">)</span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;"># button widgets</span></span>
<span id="cb1-50">clear_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"clear"</span>, <span class="st" style="color: #20794D;">"Clear Form"</span>)</span>
<span id="cb1-51">submit_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"submit"</span>, <span class="st" style="color: #20794D;">"Submit"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="aws" class="level2">
<h2 class="anchored" data-anchor-id="aws">AWS</h2>
<p>In 2017 rstudio article, <code>{aws.s3}</code> package is used for communication between app and AWS.S3 external database. <code>{aws.s3}</code> can be installed through.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"aws.s3"</span>, <span class="at" style="color: #657422;">repos =</span> <span class="st" style="color: #20794D;">"https://cloud.R-project.org"</span>)</span></code></pre></div>
</details>
</div>
<p><em>When I was making the app, the CRAN repo was orphan. The <a href="https://github.com/cloudyr/aws.s3">github repo of aws.s3</a> could not easily be installed while publishing the app on shinyapps.io or rstudio connect, because their github repo missed creator assignment in DESCRIPTION. Also Now it is back to normal with new <a href="https://github.com/cloudyr/aws.s3/issues/335">commit</a>.</em></p>
<section id="authentication" class="level4">
<h4 class="anchored" data-anchor-id="authentication">Authentication</h4>
<p>Next step is to set up aws.s3, same as 2017 rstudio artical, use the code below to set up in R</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">s3BucketName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"&lt;bucket_name&gt;"</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="st" style="color: #20794D;">"AWS_ACCESS_KEY_ID"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_ACCESS_KEY_ID&gt;"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;">"AWS_SECRET_ACCESS_KEY"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_SECRET_ACCESS_KEY&gt;"</span>,</span>
<span id="cb3-4">           <span class="st" style="color: #20794D;">"AWS_DEFAULT_REGION"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"us-east-2"</span>)</span></code></pre></div>
</details>
</div>
<p>To use aws.s3, we first need to have a AWS account and set up s3 bucket. To set up a s3 bucket, you can sign in to the <a href="https://aws.amazon.com/console/">Console</a> and click S3 under “Storage”. Under Amazon S3, you can create a bucket with a unique bucket name (Keep this name to <code>s3BucketName</code>) and selected region (Remember this selected region, it will become value for <code>AWS_DEFAULT_REGION</code>. Mine is us-east-2). Then you will be back to the bucket list page.</p>
<p>To obtain the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY, drop down your profile name on the top right menu, click “My Security Credentials”,</p>
<p><img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/nRL7M41/pic1.png" class="img-fluid"></p>
<p>Then at “Access keys (access key ID and secret access key” click “Create New Access Key”. Remember to save this, you cannot find this access key listed later. <img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/89ZXJrd/pic2.png" class="img-fluid"></p>
</section>
<section id="savedata" class="level4">
<h4 class="anchored" data-anchor-id="savedata">saveData</h4>
<p>In the <a href="https://sckinta.shinyapps.io/SpeakerSignup/">demo app</a>, each user entry include text input and a picture file. To make the picture file and text input match for each entry, I keep the same prefix and save new image name as one variable in data.frame.</p>
<p>The <code>saveData</code> function code:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb4-2">        <span class="co" style="color: #5E5E5E;"># create a empty data frame</span></span>
<span id="cb4-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-4">        <span class="co" style="color: #5E5E5E;"># loop through every field</span></span>
<span id="cb4-5">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb4-6">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb4-7">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-8">                  <span class="co" style="color: #5E5E5E;"># fileInput widget with value</span></span>
<span id="cb4-9">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb4-10">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb4-11">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb4-12">                        }</span>
<span id="cb4-13">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb4-14">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb4-15">                        }</span>
<span id="cb4-16">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-17">                  <span class="co" style="color: #5E5E5E;"># fileInput widget without value, assign a place holder image saved in bucket</span></span>
<span id="cb4-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-19">                }</span>
<span id="cb4-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-22">                          <span class="co" style="color: #5E5E5E;"># text widgets without value</span></span>
<span id="cb4-23">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb4-24">                        }</span>
<span id="cb4-25">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb4-26">                          <span class="co" style="color: #5E5E5E;"># text widgets (checkboxGroupInput) with multiple values</span></span>
<span id="cb4-27">                                </span>
<span id="cb4-28">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb4-29">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-30">                          <span class="co" style="color: #5E5E5E;"># text widgets with single value</span></span>
<span id="cb4-31">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb4-32">                        }</span>
<span id="cb4-33">                }</span>
<span id="cb4-34">        }</span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;"># input timestamp</span></span>
<span id="cb4-36">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb4-37">        </span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb4-39">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb4-40">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb4-41">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-42">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb4-43">                name1, </span>
<span id="cb4-44">                name2</span>
<span id="cb4-45">        )</span>
<span id="cb4-46">        </span>
<span id="cb4-47">        <span class="co" style="color: #5E5E5E;"># rename imagefilename and save image file to s3</span></span>
<span id="cb4-48">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb4-49">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-50">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb4-51">                        name1, </span>
<span id="cb4-52">                        name2</span>
<span id="cb4-53">                )</span>
<span id="cb4-54">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb4-55">                <span class="co" style="color: #5E5E5E;"># save the image file to aws s3</span></span>
<span id="cb4-56">                aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">put_object</span>(</span>
<span id="cb4-57">                  <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName), </span>
<span id="cb4-58">                  <span class="at" style="color: #657422;">object =</span> img_newName, </span>
<span id="cb4-59">                  <span class="at" style="color: #657422;">bucket =</span> s3BucketName, </span>
<span id="cb4-60">                  <span class="at" style="color: #657422;">check_region =</span> F, <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb4-61">                  )</span>
<span id="cb4-62">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-63">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-64">        }</span>
<span id="cb4-65">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"https://rladiesmentor.s3.us-east-2.amazonaws.com/"</span>,img_newName)</span>
<span id="cb4-66">        </span>
<span id="cb4-67">        <span class="co" style="color: #5E5E5E;"># save df as rds to the aws s3</span></span>
<span id="cb4-68">        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3save</span>(data, <span class="at" style="color: #657422;">bucket =</span> s3BucketName, <span class="at" style="color: #657422;">object =</span> fileName)</span>
<span id="cb4-69">        </span>
<span id="cb4-70">        </span>
<span id="cb4-71">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata" class="level4">
<h4 class="anchored" data-anchor-id="loaddata">loadData</h4>
<p>To retrive the data from bucket, we can use following <code>loadData</code> function</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb5-2">        <span class="co" style="color: #5E5E5E;"># read all the rds files into a list</span></span>
<span id="cb5-3">        files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">get_bucket</span>(s3BucketName), <span class="cf" style="color: #003B4F;">function</span>(x){x[[<span class="st" style="color: #20794D;">"Key"</span>]]})</span>
<span id="cb5-4">        files <span class="ot" style="color: #003B4F;">&lt;-</span> files[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.rds"</span>,files)]</span>
<span id="cb5-5">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(files) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb5-6">                <span class="co" style="color: #5E5E5E;"># create an empty data frame with additional timestamp column if no entries at aws s3</span></span>
<span id="cb5-7">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb5-8">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb5-9">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb5-10">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-11">                <span class="co" style="color: #5E5E5E;"># load data s3load entry by entry if there are entries at aws s3</span></span>
<span id="cb5-12">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(files, <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb5-13">                        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3load</span>(x, <span class="at" style="color: #657422;">bucket =</span> s3BucketName)</span>
<span id="cb5-14">                        data</span>
<span id="cb5-15">                })</span>
<span id="cb5-16">                </span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;"># concatenate all data together into one data.frame</span></span>
<span id="cb5-18">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, data)</span>
<span id="cb5-19">        }</span>
<span id="cb5-20">        </span>
<span id="cb5-21">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb5-22">        </span>
<span id="cb5-23"></span>
<span id="cb5-24">        <span class="co" style="color: #5E5E5E;"># make image src as one output column</span></span>
<span id="cb5-25">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb5-26">                <span class="at" style="color: #657422;">photo=</span><span class="fu" style="color: #4758AB;">sapply</span>(data<span class="sc" style="color: #5E5E5E;">$</span>photo.link,<span class="cf" style="color: #003B4F;">function</span>(pic){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'&lt;img src='</span>,pic,<span class="st" style="color: #20794D;">' height=52&gt;&lt;/img&gt;'</span>)})</span>
<span id="cb5-27">        )</span>
<span id="cb5-28">        <span class="co" style="color: #5E5E5E;"># make name column a link</span></span>
<span id="cb5-29">        out <span class="ot" style="color: #003B4F;">=</span> out <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-30">                <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(<span class="cf" style="color: #003B4F;">function</span>(url,text){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)}, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name))</span>
<span id="cb5-31">        </span>
<span id="cb5-32">        <span class="co" style="color: #5E5E5E;"># output data frame for dataTableRender</span></span>
<span id="cb5-33">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb5-34">                out <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb5-35">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb5-36">        )</span>
<span id="cb5-37">        out</span>
<span id="cb5-38">}</span></code></pre></div>
</details>
</div>
<p>To make the image file readable by link, you have to change the bucket public access permission, and make anyone can read it.</p>
</section>
</section>
<section id="dropbox" class="level2">
<h2 class="anchored" data-anchor-id="dropbox">Dropbox</h2>
<p><code>rdrop2</code> is the package R used to communicate with dropbox, and can be directly installed from CRAN.</p>
<section id="authentication-1" class="level4">
<h4 class="anchored" data-anchor-id="authentication-1">Authentication</h4>
<p>After installation, we need to authenticate R to access your dropbox (like AWS authentication key). Instead of obtaining directly from website, first time <code>drop_auth()</code> will direct you to web browser for dropbox authentication.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(rdrop2)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"># for remote use (deploy app to shinyapps.io or rstudio connect), you can save your auth to rds and load it to host platform</span></span>
<span id="cb6-6">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;">saveRDS</span>(token, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"token.rds"</span>)</span></code></pre></div>
</details>
</div>
<p>Caution: this token authorize anyone with token file an access to all the files in your dropbox account.</p>
<p>When you are ready to use the token to allow access the data at remote setting, you can do</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># this part should be included in your shinyapp code</span></span>
<span id="cb7-2">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load</span>(<span class="st" style="color: #20794D;">"token.rds"</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">drop_acc</span>(<span class="at" style="color: #657422;">dtoken =</span> token)</span></code></pre></div>
</details>
</div>
</section>
<section id="savedata-1" class="level4">
<h4 class="anchored" data-anchor-id="savedata-1">saveData</h4>
<p>Unlike AWS S3, I choose to aggregate individual entries into one csv file (You can do the same thing in AWS S3 too). The <code>saveData</code> function for dropbox is</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb8-2">        <span class="co" style="color: #5E5E5E;"># read previously stored csv file</span></span>
<span id="cb8-3">        old_df <span class="ot" style="color: #003B4F;">=</span> rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb8-4">        </span>
<span id="cb8-5">        <span class="co" style="color: #5E5E5E;"># save one user entry to a new data frame (like AWS above)</span></span>
<span id="cb8-6">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb8-8">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb8-9">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-10">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb8-11">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb8-12">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb8-13">                        }</span>
<span id="cb8-14">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb8-15">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb8-16">                        }</span>
<span id="cb8-17">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-19">                }</span>
<span id="cb8-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-22">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb8-23">                        }</span>
<span id="cb8-24">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb8-25">                                <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb8-26">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb8-27">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-28">                                <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb8-29">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb8-30">                        }</span>
<span id="cb8-31">                }</span>
<span id="cb8-32">        }</span>
<span id="cb8-33">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb8-35">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb8-36">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb8-37">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-38">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb8-39">                name1, </span>
<span id="cb8-40">                name2</span>
<span id="cb8-41">        )</span>
<span id="cb8-42">        </span>
<span id="cb8-43">        <span class="co" style="color: #5E5E5E;"># rename and save imagefilename</span></span>
<span id="cb8-44">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb8-45">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-46">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb8-47">                        name1, </span>
<span id="cb8-48">                        name2</span>
<span id="cb8-49">                )</span>
<span id="cb8-50">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-51">                rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-52">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-53">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-54">        }</span>
<span id="cb8-55">        </span>
<span id="cb8-56">        <span class="co" style="color: #5E5E5E;"># add phone name to data column</span></span>
<span id="cb8-57">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span>img_newName</span>
<span id="cb8-58">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb8-59">        </span>
<span id="cb8-60">        <span class="co" style="color: #5E5E5E;"># append new entry to the old_df</span></span>
<span id="cb8-61">        new_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(old_df, data)</span>
<span id="cb8-62">        <span class="co" style="color: #5E5E5E;"># write new_df csv to a temp file</span></span>
<span id="cb8-63">        <span class="fu" style="color: #4758AB;">write.csv</span>(new_df, <span class="at" style="color: #657422;">file=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-64">        <span class="co" style="color: #5E5E5E;"># upload this temp file to dropbox</span></span>
<span id="cb8-65">        rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-66">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-1" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-1">loadData</h4>
<p>From above example, you may notice that all the file need to be saved at local for a moment before uploading dropbox. In other words, rdrop2 only deals file level data. Thus, if you want to retrieve unstructural file (not csv), you have to download the file to local, then show it. It will not work for links (because no way to set public access permissions in dropbox). Thus at loadData, I cannot make the image readable unless I download data to the local. The following example only show the data frame load, comment out the image part.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb9-2">        <span class="co" style="color: #5E5E5E;"># read csv</span></span>
<span id="cb9-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb9-4">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">nrow</span>(data) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb9-5">                <span class="co" style="color: #5E5E5E;"># create empty data frame with correct columns</span></span>
<span id="cb9-6">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb9-7">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb9-8">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb9-9">        } </span>
<span id="cb9-10">        </span>
<span id="cb9-11">        <span class="co" style="color: #5E5E5E;"># drop_get("jigglypuff.jpeg")</span></span>
<span id="cb9-12">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb9-13">        <span class="co" style="color: #5E5E5E;"># out = tibble(</span></span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;">#         photo=sapply(data$photo.link,function(pic){paste0('&lt;img src=',pic,' height=52&gt;&lt;/img&gt;')})</span></span>
<span id="cb9-15">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;"># out = out %&gt;%</span></span>
<span id="cb9-17">        <span class="co" style="color: #5E5E5E;">#         mutate(name=mapply(function(url,text){paste0("&lt;a href='",url,"'&gt;",text,"&lt;/a&gt;")}, data$linkedin, data$name))</span></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;"># out = bind_cols(</span></span>
<span id="cb9-19">        <span class="co" style="color: #5E5E5E;">#         out %&gt;% as.data.frame(),</span></span>
<span id="cb9-20">        <span class="co" style="color: #5E5E5E;">#         data[,c("pronoun","signUp.type","expertises","primary.employment","preferred.mentor.method")]</span></span>
<span id="cb9-21">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-22">        out<span class="ot" style="color: #003B4F;">=</span>data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb9-23">        out</span>
<span id="cb9-24">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="googlesheets" class="level2">
<h2 class="anchored" data-anchor-id="googlesheets">googlesheets</h2>
<p>Two packages <code>googledrive</code> and <code>googlesheets4</code> are required for googlesheet data I/O. The main reason is that googlesheets4 have updated their security setting and made spreadsheet direct writing impossible. The way to get around is to use <code>googledrive::drive_download</code> to download the file to local, update the dataframe and save to a local file with same name like before, then use <code>googledrive::drive_update</code> to push the new file to the google drive. It is very similar to <code>rdrop2</code> file-level communication method. (Note: both <code>googledrive</code> and <code>googlesheets4</code> needs <code>gargle_oauth</code>).</p>
<section id="authentication-2" class="level4">
<h4 class="anchored" data-anchor-id="authentication-2">Authentication</h4>
<p>Googlesheets used <code>gargle_oauth</code> to prompt a web page for authentication. The code to set up authentication at local</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb10-2">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drive_auth</span>()</span>
<span id="cb10-3">googlesheets4<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">sheets_auth</span>()</span></code></pre></div>
</details>
</div>
<p>Usually you do not need to explicitly prompt auth using above code. Using functions in <code>googledrive</code> and <code>googlesheets4</code> will automatically trigger the authentication.</p>
<p>After authentication, you can check your tokens by</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gargle_oauth_sitrep</span>()</span></code></pre></div>
</details>
</div>
<p>The authentication step automatically generated token files under <code>~/.R/gargle/gargle-oauth/</code>. If the app work in local, that is all we need to do. If you want to deploy to hosting platform, we need to make this authentication non-interactive (no need for web browser to prompt a page). One way is to make your token files available for remote server access.</p>
<p>To make tokens available for remote server access, you can copy the email account authentication to the same directory app.R saved at. Since we have tokens associated with both <code>googledrive</code> and <code>googlesheets4</code>, we will end up have two token files. To move both token files to app directory. Using following shell code</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mkdir .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-2">cd .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-3">cp <span class="sc" style="color: #5E5E5E;">~</span><span class="er" style="color: #AD0000;">/</span>.R<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">-</span>oauth<span class="sc" style="color: #5E5E5E;">/</span><span class="er" style="color: #AD0000;">*</span>youremailname<span class="sc" style="color: #5E5E5E;">*</span> .</span></code></pre></div>
</details>
</div>
<p>When it is time to depoly, select .secret/ to upload to platform. In the app.R code, we just need to add following line to designate project-specific cache.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">options</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">gargle_oauth_cache =</span> <span class="st" style="color: #20794D;">".secret"</span>,</span>
<span id="cb13-3">        <span class="at" style="color: #657422;">gargle_oauth_email =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb13-4">)</span></code></pre></div>
</details>
</div>
<p>This is not the most secure way, but easiest way. If you want to explore more secure way for this purpose, please ref to <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html">non-interacive authentication in gargle</a></p>
</section>
<section id="savedata-2" class="level4">
<h4 class="anchored" data-anchor-id="savedata-2">saveData</h4>
<p>As alreadly mentioned, googledrive use file-level communication. We first used <code>drive_fine</code> to find which spreadsheet to read, then download using <code>googledrive::drive_download</code>, finally update/unload spreadsheet <code>googledrive::drive_update</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb14-2">        <span class="co" style="color: #5E5E5E;"># download previous spreadsheet to tempfile</span></span>
<span id="cb14-3">        tmpDir<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb14-4">        mentors<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)</span>
<span id="cb14-5">        <span class="fu" style="color: #4758AB;">drive_download</span>(<span class="fu" style="color: #4758AB;">as_id</span>(mentors), <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"csv"</span>, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">overwrite=</span>T)</span>
<span id="cb14-6">        </span>
<span id="cb14-7">        <span class="co" style="color: #5E5E5E;"># read spreadsheet to df</span></span>
<span id="cb14-8">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(tmpDir)</span>
<span id="cb14-9">        </span>
<span id="cb14-10">        <span class="co" style="color: #5E5E5E;"># read input to data</span></span>
<span id="cb14-11">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb14-12">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb14-13">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb14-14">                <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb14-15">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb14-16">                }</span>
<span id="cb14-17">                <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb14-18">                        <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb14-19">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(var,<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">", "</span>)</span>
<span id="cb14-20">                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb14-21">                        <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb14-22">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb14-23">                }</span>
<span id="cb14-24">        }</span>
<span id="cb14-25">        </span>
<span id="cb14-26">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb14-27">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"email"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>)</span>
<span id="cb14-28">        </span>
<span id="cb14-29">        <span class="co" style="color: #5E5E5E;"># append new data</span></span>
<span id="cb14-30">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(df, data)</span>
<span id="cb14-31">        </span>
<span id="cb14-32">        <span class="co" style="color: #5E5E5E;"># write into tempfile</span></span>
<span id="cb14-33">        <span class="fu" style="color: #4758AB;">write_csv</span>(df, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">na=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb14-34">        </span>
<span id="cb14-35">        <span class="co" style="color: #5E5E5E;"># update mentors spreadsheet</span></span>
<span id="cb14-36">        mentors <span class="ot" style="color: #003B4F;">&lt;-</span> mentors <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-37">          <span class="fu" style="color: #4758AB;">drive_update</span>(</span>
<span id="cb14-38">                tmpDir,</span>
<span id="cb14-39">                <span class="at" style="color: #657422;">name=</span><span class="st" style="color: #20794D;">"mentors"</span></span>
<span id="cb14-40">        )</span>
<span id="cb14-41">        <span class="co" style="color: #5E5E5E;"># drive_rm(mentors)</span></span>
<span id="cb14-42">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-2" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-2">loadData</h4>
<p><code>googlesheets</code> have a function <code>read_sheet</code> to read googlesheets directly to data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb15-2">        <span class="co" style="color: #5E5E5E;"># read spreadsheet</span></span>
<span id="cb15-3">        sheet_id<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)<span class="sc" style="color: #5E5E5E;">$</span>id</span>
<span id="cb15-4">        data<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">read_sheet</span>(sheet_id)</span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb15-6">        names <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-7">                <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-8">                        <span class="cf" style="color: #003B4F;">function</span>(url,text){</span>
<span id="cb15-9">                                <span class="cf" style="color: #003B4F;">if</span>(url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-10">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-11">                                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-12">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-13">                                }</span>
<span id="cb15-14">                        }, </span>
<span id="cb15-15">                        data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-16">                        )</span>
<span id="cb15-17">        )</span>
<span id="cb15-18">        links <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-19">                <span class="at" style="color: #657422;">links=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-20">                        <span class="cf" style="color: #003B4F;">function</span>(email, linkedin,text){</span>
<span id="cb15-21">                                <span class="cf" style="color: #003B4F;">if</span>(email<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> linkedin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-22">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-23">                                } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (linkedin<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> email<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-24">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-25">                                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb15-26">                                        <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb15-27">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>),</span>
<span id="cb15-28">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-29">                                        )</span>
<span id="cb15-30">                                }</span>
<span id="cb15-31">                        }, </span>
<span id="cb15-32">                        data<span class="sc" style="color: #5E5E5E;">$</span>email, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-33">                )</span>
<span id="cb15-34">        )</span>
<span id="cb15-35">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb15-36">                names <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb15-37">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)],</span>
<span id="cb15-38">                links <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb15-39">        )</span>
<span id="cb15-40">        out</span>
<span id="cb15-41">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, we introduce three ways to load and save data to external storage clound. AWS s3 is most secure and fleasible among three. It can store and load unstructure data easily, thus it does not require much memory cache from host server. But it is not free when data is very big. Dropbox can save both tubular and unstructural data, but retrieve unstructure requires downloading file to cache. Googlesheets can only read/save tubular data. Both dropbox and googlesheets have some secure concerns, but you can create a free account and designate that account for app development/test only to reduce concerns for security. The complete codes for finished app can be accessed from my <a href="https://github.com/sckinta/example_code/tree/master/shinyapp_examples">github</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>shiny</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</guid>
  <pubDate>Mon, 30 Mar 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.acsgrp.com/sites/default/files/sb-5.png" medium="image" type="image/png"/>
</item>
<item>
  <title>All about git</title>
  <dc:creator>Sckinta</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</link>
  <description><![CDATA[ 



<p>Recently I have actively participated two team projects (PAWS and 2020datahack) which involves multiple team members and a lot of group decisions. For the first time, I realized how important to use github as the platform for code sharing and communication. Here I am going to share several commands that I frequently used at this process and hope it will help people quickly pick up this useful collaboration tool.</p>
<section id="initiate-a-new-repo-at-github" class="level3">
<h3 class="anchored" data-anchor-id="initiate-a-new-repo-at-github">1. initiate a new repo at github</h3>
<p>Repository, aka repo, is a collection of codes, data and documentation designated for project(s). As far as you have github account, you can create public repo(s) through github webpage easily. Follow the step 1-5 on <a href="https://help.github.com/en/github/getting-started-with-github/create-a-repo">this website</a>, then you will create a repo with a few clicks. New repo usually comes with a README.md file. Using markdown format, you can describe the project in this README.md file which will be loaded to your repo main page when you open it. Here is the <a href="https://github.com/rladiesPHL/PAWS_return_noshow">repo</a> I created for Rladies-Philly PAWS projects.</p>
</section>
<section id="local-vs.-remote" class="level3">
<h3 class="anchored" data-anchor-id="local-vs.-remote">2. Local vs.&nbsp;remote</h3>
<p>One concept need to be clarified here is local vs.&nbsp;remote. <em>Github</em> is the most popular cloud-based service hosting repos. Those repo is managed by git installed at remote (aka, github here). So what is <em>git</em>? Git is a version control system that lets you manage and keep track of your source code history. It can also be <a href="https://git-scm.com/downloads">installed</a> at local and work as local version control system. In that case, your snapshot of each version will be saved at local instead of cloud.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># to initiate repo at local</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># suppose you have a project working now called repoX</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># all scripts/data/documentation are saved in a folder in your computer called repoX. </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Now you want to start git version control for this project</span></span>
<span id="cb1-5">cd repoX<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb1-6">git init</span>
<span id="cb1-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb1-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"initiate version control"</span></span></code></pre></div>
</details>
</div>
<p>The above code can be run on any shell-like terminal. And congrats, you have sucessefully create version control at local folder repoX/. <code>git commit</code> basically create a snapshot of this folder. If you want to change it back to this moment in the future, you can do it with commit number (it is hash code). It is important to write a meaningful message (like here “initiate version control”) to remind yourself what the snapshot is like. We will discuss how to recover using commit number in a little bit.</p>
</section>
<section id="clone-pull-and-push" class="level3">
<h3 class="anchored" data-anchor-id="clone-pull-and-push">3. clone, pull and push</h3>
<p>To communicate between your local and remote github, you can access through git by downloading (<code>pull</code>) remote to local and uploading (<code>push</code>) local repo to the cloud (github).</p>
<p>If you initiate repo from github first (step 1 above), you can first clone that repo to local. This repo will remember the remote address and allow you later pull from and push to the remote</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># here I use rladiesPHL/PAWS_return_noshow.git as my example</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># clone the repo to local</span></span>
<span id="cb2-4">git clone https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>rladiesPHL<span class="sc" style="color: #5E5E5E;">/</span>PAWS_return_noshow.git</span></code></pre></div>
</details>
</div>
<p>Anyone can clone a public repo to their local computer. However, to be able to <code>pull</code> and <code>push</code>, you need to be included as collaborators for that repo specially, or you are the repo owner yourself. To add someone as collaborator, follow the <a href="https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/inviting-collaborators-to-a-personal-repository">steps</a> by clicking on the webpage. Once you are the owner/collaborator, you can do following command to download and upload.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># initiate clone will create a folder at local called "PAWS_return_noshow", go to that folder</span></span>
<span id="cb3-2">cd PAWS_return_noshow<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># pull (the update) from PAWS_return_noshow (since the clone remember the remote address)</span></span>
<span id="cb3-4">git pull</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># you can do your analysis, do your update at local now</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># when it is time to upload your analysis to cloud, you first want to take a snapshot of what you have done so far</span></span>
<span id="cb3-9">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb3-10">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"my update"</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># now you can push your analysis to the github</span></span>
<span id="cb3-13">git push origin master</span></code></pre></div>
</details>
</div>
</section>
<section id="fork" class="level3">
<h3 class="anchored" data-anchor-id="fork">4. fork</h3>
<p>Above example is to push your analysis directly to the origin’s master branch. So what is <code>origin</code>? (what is the master branch will be explained in the next). Put it simple, you can consider origin as the place where is first downloaded. For example, I download PAWS_return_noshow repo from rladiesPHL account and the origin here will be rladiesPHL repo address (https://github.com/rladiesPHL/PAWS_return_noshow.git).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># to quick check your repo remote origin</span></span>
<span id="cb4-2">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (fetch)</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (push)</span></span></code></pre></div>
</details>
</div>
<p>Why is <code>origin</code> important? The origin determines which repo push and pull will go to/from. Some repo won’t allow you to push and pull because you are not the owner or collaborator. If you do not want request pull and push permission from the owner, you can <code>fork</code> the repo to your own github account. Here <code>fork</code> is like to clone a remote repo belonging to other poeple’s account at that snapshot to your own account. You can develope/make commits on repo without any push/pull permission obstables.</p>
<p>The easiest way to fork a repo is from webpage. You can follow the instruction on this <a href="https://help.github.com/en/enterprise/2.13/user/articles/fork-a-repo">help page</a>.</p>
<p>Be aware, if you <code>git clone</code> the forked repo from your github account, the “origin” is your own account repo. This repo is functionally independent from the upstream repo, although at top of your own repo page it will show “This branch is X commits ahead of/behind XXX:master.” when the upstream repo makes commits after forking. What if you want your own “forked” repo remember where it comes so that you can merge the future changes from the upstream repo to your “forked” repo?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># here I show an example of a forked repo at my own account (sckinta/datahack2020) linking back to the upstream account (CodeForPhilly/datahack2020)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># add a repo description called "upstream" and associated this name with upstream repo. Here "upstream" can be any name (eg. up, ori, ...)</span></span>
<span id="cb6-4">git remote add upstream https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>CodeForPhilly<span class="sc" style="color: #5E5E5E;">/</span>datahack2020.git</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># check remote info again you will find now repo have two remote associated with it. one is called "origin" and another is called "upstream"</span></span>
<span id="cb6-7">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (fetch)</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (push)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (fetch)</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (push)</span></span></code></pre></div>
</details>
</div>
<p>To update your forked repo at github, you need three steps: 1) <code>fetch</code> the upstream repo to your local repo; 2) <code>merge</code> updated fetch content into the main branch at local; 3) <code>push</code> updated local to remote forked repo</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># fecth upstream to local</span></span>
<span id="cb8-2">git fetch upstream</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Merge the updated fetch content into the main branch at local</span></span>
<span id="cb8-5">git merge upstream<span class="sc" style="color: #5E5E5E;">/</span>master</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Update, push to remote(fork) master branch</span></span>
<span id="cb8-8">git push origin master</span></code></pre></div>
</details>
</div>
<p>I highly suggest <code>pull</code> your forked repo to local first before <code>fetch</code> upstream. It will guarantee when you merge the upstream it will not cause the conflicts.</p>
</section>
<section id="branch" class="level3">
<h3 class="anchored" data-anchor-id="branch">5. branch</h3>
<p>After fork origin, another useful tool for collobarative project is using branch. “Branch”, as it is named, means a branch of analysis derived from the mainstream (which is by default named “master”). You can create branches on your own repo or the repo you have been invited as collaborator. This is the biggest difference between branch and a repo fork. To add a branch at local, using code <code>git checkout</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create and switch to a new branch (say, branch "chun")</span></span>
<span id="cb9-2">git checkout <span class="sc" style="color: #5E5E5E;">-</span>b chun</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># go back to the master</span></span>
<span id="cb9-5">git checkout master</span></code></pre></div>
</details>
</div>
<p>Now you can do your analysis in the repo fold. When you are ready to commit your new analysis, how will your repo know this analysis added to branch “chun”? Simple, using <code>git checkout</code> switch to chun branch and commit there. You can also push your new branch to remote, where the branch will show up under the <github_name>/<repo_name>/tree</repo_name></github_name></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># for example I push my new analysis to branch "chun" and finally push it to sckinta/datahack2020</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># switch to branch chun</span></span>
<span id="cb10-4">git checkout chun</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;"># make your new commit</span></span>
<span id="cb10-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb10-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"new analysis"</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;"># push it to github branch</span></span>
<span id="cb10-11">git push origin chun</span></code></pre></div>
</details>
</div>
<p>If you want to continue on other collaborator’s branch (say “abc”), you can pull that branch to local.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># download branch abc to your analysis</span></span>
<span id="cb11-2">git pull origin abc</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># check how many branches current local repo contains</span></span>
<span id="cb11-5">git branch</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># *chun</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">#   master</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">#   abc</span></span></code></pre></div>
</details>
</div>
<p>After everybody did their analysis on their own branch, your group finally determine we are going to merge branch “abc” to master and delete the branch “abc”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># go to the master first</span></span>
<span id="cb13-2">git checkout master</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;"># merge branch "abc" in</span></span>
<span id="cb13-5">git merge abc</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># delete old branch</span></span>
<span id="cb13-8">git checkout <span class="sc" style="color: #5E5E5E;">-</span>d abc</span></code></pre></div>
</details>
</div>
<p>Occasionally, this process doesn’t go smoothly. Conflicts may occur when you try to merge multiple branches in. Then you may need advance tools like <code>mergetool</code> and <code>opendiff</code>. Here I won’t explain them. Please refer to<a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_advanced_merging">git tutorial page</a> for further reading. All the simple branch and merge has also been best explained on <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">git tutorial</a>.</p>
</section>
<section id="recover-a-certain-commit" class="level3">
<h3 class="anchored" data-anchor-id="recover-a-certain-commit">6. Recover a certain commit</h3>
<p>One major reason we want to use version control is that we can revert to a old snapshot/commit if we want. To check the commits done to the current repo, you can try <code>git log</code>. The log is reported in reverse chronical order.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">git log <span class="sc" style="color: #5E5E5E;">--</span>oneline</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># ea03bb2 (HEAD -&gt; chun, origin/chun) clean and EDA on incident county</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># 3c659ec (upstream/master, origin/master, origin/HEAD, master) Merge pull request #7 from CodeForPhilly/branch_dubois</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;"># c76c701 (upstream/branch_dubois) updated outrigger &amp; added presentation</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># 29992c6 Merge pull request #6 from rjake/jake</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;"># 52c88ea Create psp_overdose_events.csv</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;"># 36495db Add codebook</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;"># 714f848 gitignore data files</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># 51e5974 added presentation slides</span></span></code></pre></div>
</details>
</div>
<p>To revert to a commit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># since we are currently at chun branch, we better go back to master where "3c659ec" is at</span></span>
<span id="cb16-2">git checkout master</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;"># revert to a commit</span></span>
<span id="cb16-5">git revert 3c659ec</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># the above command can also be</span></span>
<span id="cb16-8">git reset <span class="sc" style="color: #5E5E5E;">--</span>hard 3c659ec</span></code></pre></div>
</details>
</div>
<p>Remember all of above is only updated at local. If you want to make it show up at github, do a <code>add</code>, <code>commit</code> and <code>push</code> series.</p>
</section>
<section id="link-to-your-remote-account-at-local" class="level3">
<h3 class="anchored" data-anchor-id="link-to-your-remote-account-at-local">7. link to your remote account at local</h3>
<p>After introduce all above basic commands for git, the last thing I want to share is to set up the local git remote account. I probably shoud put it at #2.remote vs.&nbsp;local# part.</p>
<p>To globally set github account at local can save your effort to put account name and password everytime you want to push/pull to your own account.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># for example I set global account as rladiesPHL. This will save the global configuration to a ~/.gitconfig file. It will prompt password for you to input</span></span>
<span id="cb17-2">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.email <span class="st" style="color: #20794D;">"philly@rladies.org"</span></span>
<span id="cb17-3">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.name <span class="st" style="color: #20794D;">"rladiesPHL"</span></span></code></pre></div>
</details>
</div>
<p>Howver, sometimes I want to switch back to my personal account temperally to do a quick push. I wish git will prompt account and password for me to input</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># reset global account a little bit</span></span>
<span id="cb18-2">git config <span class="sc" style="color: #5E5E5E;">--</span>local credential.helper <span class="st" style="color: #20794D;">""</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># when you push, it will prompt account and password for me to input</span></span>
<span id="cb18-5">git push origin master</span></code></pre></div>
</details>
</div>
<p>All above are the frequently used git commands I used. Hope it will help anyone who is willing to use git version in their future project.</p>


</section>

 ]]></description>
  <category>bash</category>
  <category>git</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</guid>
  <pubDate>Tue, 11 Feb 2020 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Network visualization - Part 3</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>In the previous two posts, we discussed about IGRAPH object and how to manipulate, measure and cluster it. In this final post of network analysis series, I will focus on the network work visualization.</p>
<p>Network visualization are supported by two aspects — the aesthetics of network elements (aka, vertices and edges) and layout of network. There are multiple packages available for these aspects. I will focus on the basic igraph plot which is base R plot and the application of <code>ggraph</code> which use similar syntax comparable to ggplot2.</p>
<section id="aesthetics-of-network-elements" class="level1">
<h1>Aesthetics of network elements</h1>
<p>The aesthetics of both vertices and edges can be manipulated at color, transparency. Specially for vertices, we can also manipulate its shape, size and fill. For edges, we can manipulate its width/thickness, linetype, arrow and so on. Here, use simple example “actors” to show you how to present aesthetics using <code>igraph</code> default plot and <code>ggraph</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">actors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">age=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">48</span>,<span class="dv" style="color: #AD0000;">33</span>,<span class="dv" style="color: #AD0000;">45</span>,<span class="dv" style="color: #AD0000;">34</span>,<span class="dv" style="color: #AD0000;">21</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">gender=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>))</span>
<span id="cb1-5">relations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">from=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"David"</span>, <span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">same.dept=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;">friendship=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb1-10">  <span class="at" style="color: #657422;">advice=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-11">  )</span>
<span id="cb1-12">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_data_frame</span>(relations, <span class="at" style="color: #657422;">directed=</span><span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">vertices=</span>actors)</span></code></pre></div>
</details>
</div>
<section id="vertex-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="vertex-aesthetics">Vertex aesthetics</h2>
<p>Specify aesthetics in vertex attribute</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># make female and male color different</span></span>
<span id="cb2-2">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"vertice"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"red"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"blue"</span>))</span>
<span id="cb2-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"color"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>color)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-1.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># make age as size</span></span>
<span id="cb3-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb3-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"size"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>size)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The methods mentioned above can also be done by specify in <code>plot()</code>. One quick example below show the shape aesthetics. Check igraph valid shape names by <code>names(igraph:::.igraph.shapes)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># make gender as shape</span></span>
<span id="cb4-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">shape=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"circle"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"rectangle"</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">vertex.shape=</span>v<span class="sc" style="color: #5E5E5E;">$</span>shape)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">'topleft'</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">21</span>, <span class="dv" style="color: #AD0000;">22</span>),<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Be aware that the aesthetics specified by attributes can be overwritten by specifying in <code>plot()</code>. In addition, those aesthetics can also be used to apply to all vertices like <code>plot(g, vertex.shape="rectangle")</code>. The attributes to be manipulated in igraph (using base R) are limited. To find all the plotting attributes, try <code>?plot.igraph</code> or go to https://igraph.org/r/doc/plot.common.html</p>
<p>We can also draw attention to certain nodes by <code>mark.groups</code> in plot</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># mark dept</span></span>
<span id="cb5-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb5-4">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">plot</span>(g, </span>
<span id="cb5-6">     <span class="at" style="color: #657422;">mark.groups=</span><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-7">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name)),</span>
<span id="cb5-8">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"IT"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name))</span>
<span id="cb5-9">       ), </span>
<span id="cb5-10">     <span class="at" style="color: #657422;">mark.col=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#C5E5E7"</span>,<span class="st" style="color: #20794D;">"#ECD89A"</span>), <span class="at" style="color: #657422;">mark.border=</span><span class="cn" style="color: #8f5902;">NA</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/mark.groups-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> is a ggplot version of graph plotting. Using graph object as input, it can convert vertice attributes to plot attribute automatically or manually.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_range=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">40</span>))</span>
<span id="cb6-3">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"age_range"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size=</span>age_range, <span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">scale_size_continuous</span>(<span class="at" style="color: #657422;">breaks=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">30</span>,<span class="dv" style="color: #AD0000;">40</span>), <span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Almost all the {<code>ggplots</code>} theme, scale functions are available for {<code>ggraph</code>}. Refer to <a href="https://www.rdocumentation.org/packages/ggraph/versions/1.0.2">rdocumentation</a> for more details.</p>
</section>
<section id="edge-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="edge-aesthetics">Edge aesthetics</h2>
<p>Similar to vertex aesthetics, edge plotting aesthetics can be manipulated both {<code>igraph</code>} default plotting and {<code>ggraph</code>} plotting</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># use linetype present whether come from same department, and line width presents friendship</span></span>
<span id="cb7-2">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb7-6">  g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb7-8">  <span class="at" style="color: #657422;">edge.curved=</span>T</span>
<span id="cb7-9">)</span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Using {<code>ggraph</code>} to show edges attribute is much easier.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">edge_linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="facet" class="level2">
<h2 class="anchored" data-anchor-id="facet">Facet</h2>
<p>One big advantage of {<code>ggraph</code>} is to use facet. It can be <code>facet_edges</code> or <code>facet_nodes</code> or <code>facet_graph</code>. Here I will only show example of <code>facet_nodes</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">#  facet based on the dept</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">facet_nodes</span>(<span class="sc" style="color: #5E5E5E;">~</span>dept, <span class="at" style="color: #657422;">drop =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/facet_nodes-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="layout" class="level1">
<h1>Layout</h1>
<p>There are many layouts available for both igraph and ggraph pacakges. Igraph provides a huge amount of layouts. https://igraph.org/r/doc/layout_.html</p>
<ul>
<li><strong>Standard layouts</strong>
<ul>
<li><strong>bipartite</strong>: minimize edge-crossings in a simple two-row (or column) layout for bipartite graphs.</li>
<li><strong>star</strong>: place one node in the center and the rest equidistantly around it. <code>as_star()</code></li>
<li><strong>circle</strong>: place nodes in a circle in the order of their index. Consider using layout_igraph_linear with circular=TRUE for more control. <code>in_circle()</code></li>
<li><strong>nicely</strong>: default, tries to pick an appropriate layout. <code>nicely</code></li>
<li><strong>dh</strong>: uses Davidson and Harels simulated annealing algorithm to place nodes. <code>with_dh()</code></li>
<li><strong>gem</strong>: place nodes on the plane using the GEM force-directed layout algorithm. <code>with_gem</code></li>
<li><strong>graphopt</strong>: uses the Graphopt algorithm based on alternating attraction and repulsion to place nodes. <code>with_graphopt()</code></li>
<li><strong>grid</strong>:place nodes on a rectangular grid. <code>on_grid()</code></li>
<li><strong>mds</strong>: perform a multidimensional scaling of nodes using either the shortest path or a user supplied distance. <code>with_mds()</code></li>
<li><strong>sphere</strong>: place nodes uniformly on a sphere - less relevant for 2D visualizations of networks. <code>with_sphere()</code></li>
<li><strong>randomly</strong>: places nodes uniformly random. <code>randomly</code></li>
<li><strong>fr</strong>: places nodes according to the force-directed algorithm of Fruchterman and Reingold. <code>with_fr()</code></li>
<li><strong>kk</strong>: uses the spring-based algorithm by Kamada and Kawai to place nodes. <code>with_kk()</code></li>
<li><strong>drl</strong>: uses the force directed algorithm from the DrL toolbox to place nodes. <code>with_drl()</code></li>
<li><strong>lgl</strong>: uses the algorithm from Large Graph Layout to place nodes. See with_lgl <code>with_lgl()</code></li>
</ul></li>
<li><strong>Hierarchical layouts</strong>
<ul>
<li><strong>tree</strong>: uses the Reingold-Tilford algorithm to place the nodes below their parent with the parent centered above its children. <code>as_tree()</code></li>
<li><strong>sugiyama</strong>: designed for directed acyclic graphs (that is, hierarchies where multiple parents are allowed) it minimizes the number of crossing edges.</li>
</ul></li>
</ul>
<p>Here we are going to show an example how to switch standard layout using the same data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># star layout -- help determine center</span></span>
<span id="cb10-3">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">as_star</span>())</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"start"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># circle layout</span></span>
<span id="cb10-8">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">in_circle</span>())</span>
<span id="cb10-9"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-10"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"circle"</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb10-13">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">on_grid</span>())</span>
<span id="cb10-14"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-15"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"grid"</span>)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;"># nicely</span></span>
<span id="cb10-18">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb10-19"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-20"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"nicely"</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;"># kk</span></span>
<span id="cb10-23">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_kk</span>())</span>
<span id="cb10-24"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-25"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"Kamada and Kawai(kk)"</span>)</span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;"># fr</span></span>
<span id="cb10-28">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_fr</span>())</span>
<span id="cb10-29"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-30"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"force-directed(fr)"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/layout_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Hierarchical layouts can plot data in layer. Here show example how to use sugiyama layout</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># make different dept nodes at different node</span></span>
<span id="cb11-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb11-4"></span>
<span id="cb11-5">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">layer=</span><span class="fu" style="color: #4758AB;">ifelse</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-7"></span>
<span id="cb11-8">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-11"></span>
<span id="cb11-12">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty)</span>
<span id="cb11-13"></span>
<span id="cb11-14">lay1 <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">layout_with_sugiyama</span>(g, <span class="at" style="color: #657422;">layers=</span>v<span class="sc" style="color: #5E5E5E;">$</span>layer, <span class="at" style="color: #657422;">attributes=</span><span class="st" style="color: #20794D;">"all"</span>)</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="fu" style="color: #4758AB;">plot</span>(lay1<span class="sc" style="color: #5E5E5E;">$</span>extd_graph, <span class="at" style="color: #657422;">edge.curved=</span>T)</span>
<span id="cb11-17"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-18"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-19"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/sugiyama_layout-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> can use all the layout mentioned above by specifying it in <code>ggraph(g, layout=...)</code>. Besides, ggraph has addtional useful layout.</p>
<ul>
<li>dendrogram: dendrogram layout not only take in graph object but also dendrogram object (<code>as.dendrogram(hclust(dist(...)))</code>). ggraph will automatically convert dendrogram to igraph by <code>den_to_igraph</code>. It ususally plots using <code>geom_edge_diagonal()</code> or <code>geom_edge_elbow()</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">den <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.dendrogram</span>(<span class="fu" style="color: #4758AB;">hclust</span>(<span class="fu" style="color: #4758AB;">dist</span>(mtcars)))</span>
<span id="cb12-2">p1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_edge_diagonal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">nudge_y=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-6">p2 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>, <span class="at" style="color: #657422;">circular =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">geom_edge_elbow</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">coord_fixed</span>()<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-11"><span class="fu" style="color: #4758AB;">grid.arrange</span>(p1,p2,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/dendrogram-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>hive: make nodes group into a axis and connecting axis instead.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="st" style="color: #20794D;">'hive'</span>, <span class="at" style="color: #657422;">axis =</span> age_range, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;">geom_edge_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_width=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">geom_axis_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> age_range), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">coord_fixed</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/hive-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>linear: make nodes only the same line so that arc connections were made</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">'linear'</span>, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;">geom_edge_arc</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_alpha=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;">scale_edge_alpha</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.3</span>,<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/linear_arc-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>More functions about ggraph refer to https://www.rdocumentation.org/packages/ggraph/versions/1.0.2</p>
</section>
<section id="other-packages-for-graph-visualization" class="level1">
<h1>other packages for graph visualization</h1>
<p>There are many other packages available for graph visualization and network analysis. In this series, I will only list the link here for the further reference. I may come back to further this topic in the future when necessary.</p>
<p><strong>Network analysis tool</strong>: Statnet<sup>1</sup></p>
<p><strong>Network visualization</strong>: ggnet<sup>2</sup></p>
<p><strong>Interactive network</strong> :</p>
<ul>
<li><p>visNetwork<sup>3</sup></p></li>
<li><p>jstree<sup>4</sup></p></li>
<li><p>Ndtv<sup>5</sup></p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://statnet.org/trac/wiki↩︎</p></li>
<li id="fn2"><p>https://briatte.github.io/ggnet/↩︎</p></li>
<li id="fn3"><p>https://datastorm-open.github.io/visNetwork/↩︎</p></li>
<li id="fn4"><p>https://bwlewis.github.io/rthreejs/↩︎</p></li>
<li id="fn5"><p>http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>network</category>
  <category>visualization</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</guid>
  <pubDate>Wed, 04 Sep 2019 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/thomasp85/ggraph/febab71076d7cf277cdb79b823f262b626651703/man/figures/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Network Analysis in R - Part 2</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2.html</link>
  1`
  [1]  1  3  8  9 10
  
  <?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Learning with sckinta</title>
<link>https://learniningwithsckinta.netlify.app/posts.html</link>
<atom:link href="https://learniningwithsckinta.netlify.app/posts.xml" rel="self" type="application/rss+xml"/>
<description>This is Chun Su's personal blog</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Mon, 28 Feb 2022 05:00:00 GMT</lastBuildDate>
<item>
  <title>Interpreting the coefficients of Generalized Linear Model</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</link>
  <description><![CDATA[ 



<p>Linear model is the most popular model used in various of fields, due to its simple execution and interpretation. It can be not only used to predict like all other machine learning models. but also widely used for statistical inference due to its simplicity.</p>
<p><a href="https://en.wikipedia.org/wiki/Generalized_linear_model">Generalized Linear Model (GLM)</a>, as named indicated, is generalized from linear regression model, and extends linear model default assumptions to include outcome variables following exponential family distribution. It used <a href="https://www.statisticshowto.com/link-function/#:~:text=A%20link%20function%20in%20a,variable%20in%20a%20linear%20way.">link function</a> to transform the outcome so that the transformed Y can be represented by linear combination of predictors. Due to this transformation, it makes coefficients interpretation a little confusing. In this blog, I will use four classical examples (<code>Boston</code>, <code>Default</code>, <code>BrainCancer</code>, and <code>Bikeshare</code> from <a href="https://cran.r-project.org/web/packages/ISLR2/ISLR2.pdf"><code>ISLR2</code></a> package) to illustrate how to interpret the coefficients of GLM from <code>tidymodels</code> fit tidy outcome in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ISLR2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<section id="linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression">Linear regression</h2>
<p>Modeling linear regression in R is simple. The following example used <code>dis</code> (weighted mean of distances to five Boston employment centers) as single predictor to predict <code>medv</code> (median value of house in $1000s) in Boston.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(Boston)</span>
<span id="cb2-2">lm_m1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis, <span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">summary</span>(lm_m1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = medv ~ dis, data = Boston)

Residuals:
    Min      1Q  Median      3Q     Max 
-15.016  -5.556  -1.865   2.288  30.377 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  18.3901     0.8174  22.499  &lt; 2e-16 ***
dis           1.0916     0.1884   5.795 1.21e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 8.914 on 504 degrees of freedom
Multiple R-squared:  0.06246,   Adjusted R-squared:  0.0606 
F-statistic: 33.58 on 1 and 504 DF,  p-value: 1.207e-08</code></pre>
</div>
</div>
<p>Based on coefficients summary, <code>dis</code> is significantly (p-value = 1.21e-08) positively correlated with <code>medv</code>. With 1 unit increase in term of distances to Boston employment centers, the median value of house increase $1091.6 = 1.0916 * 1000.</p>
<section id="multivariate-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="multivariate-linear-regression">Multivariate linear regression</h3>
<p>In multivariate linear regression, when we interpret the coefficients, there are two components taken into account - whether the variables are independent - how to interpret the interaction term</p>
<p>In the following example, we model the <code>medv</code> with <code>dis</code> (weighted mean of distances to five Boston employment centers), <code>rm</code> (average number of rooms per dwelling), <code>crim</code> (per capita crime rate by town) and <code>chas</code> (tract bounds river).</p>
<p>For practice purpose, I will use <code>tidymodels</code> to build linear model in the multivariate linear regression example.</p>
<section id="no-interaction-term" class="level4">
<h4 class="anchored" data-anchor-id="no-interaction-term">No interaction term</h4>
<p>We starts with no interactions among the predictors.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_spec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">lm_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis <span class="sc" style="color: #5E5E5E;">+</span> rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb4-8"></span>
<span id="cb4-9">lm_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb4-11"></span>
<span id="cb4-12"></span>
<span id="cb4-13">lm_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)  -29.1      2.57      -11.3  1.20e-26
2 dis            0.201    0.144       1.40 1.62e- 1
3 rm             8.19     0.406      20.2  9.12e-67
4 crim          -0.243    0.0350     -6.94 1.19e-11
5 chas           3.98     1.10        3.63 3.10e- 4</code></pre>
</div>
</div>
<p>In this model, all predictors except <code>dis</code> show significant correlation with <code>medv</code> (p-value &lt; 0.05). <code>rm</code> and <code>chas</code> are positively while <code>crim</code> is negatively associated with <code>medv</code>. - <code>rm</code>: <strong>when keeping all other variables the same</strong>, increase 1 room per dwelling on average results in $8,194.4 (<code>8.1944 * 1000</code>) increase in median house value. - <code>chas</code>: <strong>when keeping all other variables the same</strong>, having tracts bounds to the Charles river increase median house value $3,982.5 (<code>3.9825 * 1000</code>). <code>chas</code> is a dummy variable where = 1 if tract bounds river and =0 otherwise. Thus =0 (tract do not bound to river) is a baseline here. We will discuss more about baseline in later example. - <code>crim</code>: <strong>when keeping all other variables the same</strong>, 1 unit increase in per capita crime rate will result a decrease of $243.2 (<code>-0.24318 * 1000</code>) in median house value.</p>
</section>
</section>
<section id="with-interaction-term" class="level3">
<h3 class="anchored" data-anchor-id="with-interaction-term">With interaction term</h3>
<p>Based on common sense, usually the house is smaller when it is closer to city center. Adding interaction term between <code>rm</code> and <code>dis</code> we assumed that the number of room and the distance to business center are not independent. We are testing the hypothesis that the linear relationship between <code>dis</code> and <code>medv</code> was affected by the the <code>rm</code>. This affect can be linear or non-linear, can be negative or positive.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(rm)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">geom_histogram</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean number of room per dwelling'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rm =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(rm)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>dis, <span class="at" style="color: #657422;">y=</span>medv, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(rm))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="at" style="color: #657422;">se =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean of distances to five Boston employment centers'</span>, <span class="at" style="color: #657422;">y=</span> <span class="st" style="color: #20794D;">'median value of owner-occupied homes'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"mean number of room per dwelling"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'bottom'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Thus, we added interaction term between <code>dis</code> and <code>rm</code>. The thumb of rule to use interaction term is hierarchical principle, which means, if we include an interaction in a model, we should also include the main effects, even if the p-values associated with main effect coefficients are not significant. Thus we should always use <code>*</code> instead of <code>:</code> when adding the interaction term. <code>dis*rm</code> means <code>dis + rm + dis:rm</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">lm_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis<span class="sc" style="color: #5E5E5E;">*</span>rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb10-4"></span>
<span id="cb10-5">lm_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb10-7"></span>
<span id="cb10-8"></span>
<span id="cb10-9">lm_fit3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)   -5.03     4.70       -1.07 2.85e- 1
2 dis           -7.43     1.27       -5.84 9.30e- 9
3 rm             4.38     0.744       5.89 7.11e- 9
4 crim          -0.270    0.0341     -7.90 1.80e-14
5 chas           3.99     1.06        3.77 1.83e- 4
6 `dis:rm`       1.20     0.198       6.04 3.08e- 9</code></pre>
</div>
</div>
<p>In this example, all predictors including interaction terms are significant. Interestingly, by adding the interaction between <code>dis</code> and <code>rm</code>, the coefficients associated with <code>dis</code> turn negative from positive when using simple single variable model. To interpret the interaction term,</p>
<ul>
<li><code>dis:rm</code>: since interaction term is significant (p-value = 3.077938e-09), thus linear relationship between <code>dis</code> and <code>medv</code> was significantly dependent on the <code>rm</code>, justifying the inclusion of the interaction term in the model.</li>
<li><code>dis</code>: when there are 3 ~ 6 rooms in dwelling, one unit further away from five Boston employment centers, it results in $3,835 to $244 (<code>(-7.426 + range(3,6) * 1.197) * 1000</code>) decrease in median value of house. when there are more than 6 (<code>7.426/1.197</code>) rooms in dwelling, one unit further away from five Boston employment centers, it results in at least $953 (<code>(-7.426 + 7 * 1.197) * 1000</code>) increase in median value of house.</li>
<li><code>rm</code>: <em>keeping the mean distance to five Boston employment centers as constant <code>dis</code></em>, one more room in dwelling will increase <code>1000 * (1.197 * dis + 4.380)</code> in the median value of house. Because the interaction term is positive (<code>1.197</code>), the rate of <code>medv</code> increase in terms of the room number will increase when it is further away from Boston employment centers.</li>
</ul>
<section id="when-to-use-interaction-term" class="level5">
<h5 class="anchored" data-anchor-id="when-to-use-interaction-term">When to use interaction term</h5>
<p>The frequently asked question about interaction term is “when should we include interaction term”. The conventional answer is when two predictors are not independent. However, in reality, unless we have very strong prior knowledge about the predictors, it is hard to determine whether two predictors are dependent or not without exploring the data. From the articles/blogs about interaction term I read so far, two methods are generally used to determine whether add interaction term</p>
<ol type="1">
<li><p>try both with and without adding interaction term, if adding interaction term results in significance on interaction term, then use interaction term.</p></li>
<li><p>like what I did above, plot Y against X1 with X2 as nominal variable (if X2 is not nominal variable itself). If the lines from different X2 levels are parallel, then X1 and X2 are independent and no interaction terms are needed. Otherwise, add interaction term.</p></li>
</ol>
</section>
</section>
</section>
<section id="logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="logistic-regression">Logistic regression</h2>
<p>In the regular linear regression mentioned above, the Y is numeric (aka. quantitative). However, when Y is nominal (aka, qualitative), logistic regression will be used. To make Y still represented by linear combination of predictors, we used logit function (link function) to transform Y (the probability) to <img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)"> (the log odds).</p>
<p><img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)%20=%20%5Csum%5Cbeta%20X"> <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> represents log odds ratio. thus, odds ratio <img src="https://latex.codecogs.com/png.latex?OR%20=%20e%5E%5Cbeta">.</p>
<section id="when-y-is-binomial" class="level3">
<h3 class="anchored" data-anchor-id="when-y-is-binomial">When Y is binomial</h3>
<p>To evaluate whether a customer will default the credit card <code>default</code>, we build a logistic model with three predictors – whether the customer is a <code>student</code>, the <code>balance</code> on the account and the customer <code>income</code>.</p>
<p>Again, for practice purpose, I used <code>tidymodels</code> syntax for demonstration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"Default"</span>)</span>
<span id="cb12-2">lr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6">default_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">add_formula</span>(default <span class="sc" style="color: #5E5E5E;">~</span> .)</span>
<span id="cb12-9"></span>
<span id="cb12-10">default_fit <span class="ot" style="color: #003B4F;">&lt;-</span> default_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-11">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Default)</span>
<span id="cb12-12"></span>
<span id="cb12-13">default_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
  term            estimate  std.error statistic   p.value
  &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept) -10.9        0.492        -22.1   4.91e-108
2 studentYes   -0.647      0.236         -2.74  6.19e-  3
3 balance       0.00574    0.000232      24.7   4.22e-135
4 income        0.00000303 0.00000820     0.370 7.12e-  1</code></pre>
</div>
</div>
<p>In this model, two predictors (<code>student</code> and <code>balance</code>) are significantly associated with <code>default</code>. To interpret coefficients, we first need to know which is the baseline of <code>default</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Default<span class="sc" style="color: #5E5E5E;">$</span>default)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>    Yes
No    0
Yes   1</code></pre>
</div>
</div>
<p>Based on the <code>contrasts</code> output, the baseline of <code>default</code> is <code>No</code>. Thus,</p>
<ul>
<li><p><code>student</code>: <strong>When keeping all other variable constant</strong>, compared to non-student (<code>student = 0</code>), a student (<code>student = 1</code>) is less likely to default credit card. The odds ratio is 0.524 (<code>exp(-6.467758e-01)</code>). In other words, if the odds of defaulting credit card as non-student is 1, the odds of defaulting credit card as a student is 0.524 (<code>exp(-6.467758e-01)</code>).</p></li>
<li><p><code>balance</code>: <strong>When keeping all other variable constant</strong>, 1 dollar increase in account balance will result in increasing odds of 1.005 (<code>exp(5.736505e-03)</code>) to default credit card.</p></li>
</ul>
<p>Note: above modeling is a bad model since there are high correlation between the predictors (<a href="https://www.britannica.com/topic/collinearity-statistics">collinearity</a>). I just used it as an example to interpret the coefficients.</p>
</section>
<section id="multinominal-predictors" class="level3">
<h3 class="anchored" data-anchor-id="multinominal-predictors">Multinominal predictors</h3>
<p>Using multi-nominal predictor <code>diagnosis</code> and other predictors like <code>sex</code> and age <code>time</code> to predict whether the patient survived the brain cancer or not <code>status</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'BrainCancer'</span>)</span>
<span id="cb16-2">BrainCancer <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;">contrasts</span>(BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>           LG glioma HG glioma Other
Meningioma         0         0     0
LG glioma          1         0     0
HG glioma          0         1     0
Other              0         0     1</code></pre>
</div>
</div>
<p>In this example, <code>Meningioma</code> is the baseline for multi-nominal predictor <code>diagnosis</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">BrainCancer_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb18-4">    </span>
<span id="cb18-5">BrainCancer_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec)</span>
<span id="cb18-8"></span>
<span id="cb18-9">BrainCancer_fit <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb18-11"></span>
<span id="cb18-12">BrainCancer_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-13">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term                estimate std.error statistic p.value
   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)           3.56      2.57       1.39  0.166  
 2 sexMale               0.369     0.576      0.640 0.522  
 3 locSupratentorial     1.09      0.901      1.21  0.227  
 4 ki                   -0.0695    0.0326    -2.13  0.0332 
 5 gtv                   0.0382    0.0366     1.04  0.296  
 6 stereoSRT             0.253     0.771      0.328 0.743  
 7 time                 -0.0339    0.0155    -2.18  0.0291 
 8 diagnosis_LG.glioma   1.31      0.844      1.55  0.122  
 9 diagnosis_HG.glioma   2.37      0.778      3.05  0.00231
10 diagnosis_Other       0.765     0.940      0.814 0.416  </code></pre>
</div>
</div>
<p>For multi-nominal predictor <code>diagnosis</code>, the levels (<code>LG glioma</code>, <code>HG glioma</code> and <code>Other</code>) are compared to the baseline <code>Meningioma</code>, and it ends with three terms for coefficient estimation.</p>
<p>Based on above model, only <code>HG glioma</code> show significant association with survival (p-value &lt; 0.05) when choose <code>Meningioma</code> as baseline. <strong>When keeping all other variable constant</strong>, compare to <code>Meningioma</code>, the patient with <code>HG glioma</code> are 10 times more (<code>exp(2.37027243)</code>) likely to survive. If we want to compare <code>HG glioma</code> with <code>Other</code> cancer type, simply use <code>exp(2.37027243-0.76482440)</code> to get odds ratio between <code>HG glioma</code> and <code>Other</code>, in which compare to <code>Other</code>, the patient with <code>HG glioma</code> are 5 times more (<code>exp(2.37027243-0.76482440)</code>) likely to survive. However, in this case, we do not know whether this comparison is statistically significant. We can get p-value for this comparison by switching <code>Other</code> as baseline.</p>
</section>
<section id="contrasts-matrix" class="level3">
<h3 class="anchored" data-anchor-id="contrasts-matrix">Contrasts matrix</h3>
<p>Another baseline assignment is using the global average as baseline. To do that, we need to change the <code>contrasts</code> matrix. The following code replace the default contrasts <code>contr.treatment</code> with <code>contr.sum</code> on <code>globalOptions</code>, then use <code>step_dummy</code> from <code>recipe</code> to realize it</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">BrainCancer_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_LG.glioma diagnosis_HG.glioma diagnosis_Other diagnosis_orginal
                &lt;dbl&gt;               &lt;dbl&gt;           &lt;dbl&gt; &lt;fct&gt;            
1                   0                   0               0 Meningioma       
2                   0                   1               0 HG glioma        
3                   1                   0               0 LG glioma        
4                   0                   0               1 Other            </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">contr_opt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"contrasts"</span>)</span>
<span id="cb22-2">contr_opt</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>        unordered           ordered 
"contr.treatment"      "contr.poly" </code></pre>
</div>
</div>
<p>The original baseline is <code>Meningioma</code>, each <code>diagnosis_</code> is compared to the <code>Meningioma</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">contr_sum_opt <span class="ot" style="color: #003B4F;">&lt;-</span> contr_opt</span>
<span id="cb24-2">contr_sum_opt[<span class="st" style="color: #20794D;">'unordered'</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'contr.sum'</span></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_sum_opt)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># my_naming &lt;- function(var, lvl, ordinal = FALSE, sep = "_"){</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;">#     paste(var, levels(BrainCancer$diagnosis)[lvl])</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;"># }</span></span>
<span id="cb24-8"></span>
<span id="cb24-9">BrainCancer_rec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-11">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb24-12">    </span>
<span id="cb24-13">BrainCancer_rec2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-17">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_X1 diagnosis_X2 diagnosis_X3 diagnosis_orginal
         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt; &lt;fct&gt;            
1            1            0            0 Meningioma       
2            0            0            1 HG glioma        
3            0            1            0 LG glioma        
4           -1           -1           -1 Other            </code></pre>
</div>
</div>
<p>Thus <code>diagnosis_X1</code>, <code>diagnosis_X2</code> and <code>diagnosis_X3</code> now represents <code>Meningioma</code>, <code>HG glioma</code> and <code>LG glioma</code> compared to average baseline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">BrainCancer_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec)</span>
<span id="cb26-4"></span>
<span id="cb26-5">BrainCancer_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb26-7"></span>
<span id="cb26-8">BrainCancer_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-9">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term         estimate std.error statistic p.value
   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)    5.52      2.66       2.07   0.0380
 2 sex1          -0.184     0.288     -0.640  0.522 
 3 loc1          -0.545     0.451     -1.21   0.227 
 4 ki            -0.0695    0.0326    -2.13   0.0332
 5 gtv            0.0382    0.0366     1.04   0.296 
 6 stereo1       -0.127     0.386     -0.328  0.743 
 7 time          -0.0339    0.0155    -2.18   0.0291
 8 diagnosis_X1  -1.11      0.468     -2.37   0.0177
 9 diagnosis_X2   0.195     0.594      0.329  0.742 
10 diagnosis_X3   1.26      0.542      2.33   0.0200</code></pre>
</div>
</div>
<p>Based on the newly trained model <code>BrainCancer_fit2</code>, only <code>Meningioma</code> and <code>LG glioma</code> show significant association with survival (p-value &lt; 0.05) when compared to global average. <strong>When keeping all other variable constant</strong>, <strong>compare to global average</strong>, the patient with <code>Meningioma</code> has only 32.9% (<code>exp(-1.11018843)</code>) average survive rate, while the patient with <code>LG glioma</code> are 3.5 times (<code>exp(1.26008400)</code>) more likely to survive.</p>
<p>More about coding contrasts in base R syntax can be found at this <a href="https://marissabarlaz.github.io/portfolio/contrastcoding/">article</a>.</p>
</section>
<section id="multinomial-outcome" class="level3">
<h3 class="anchored" data-anchor-id="multinomial-outcome">Multinomial outcome</h3>
<p>Using the same dataset <code>BrainCancer</code>, now I try to predict the <code>diagnosis</code> based on the tumor location (<code>loc</code>), Karnofsky index (<code>ki</code>), Gross tumor volume (<code>gtv</code>) and Stereotactic method (<code>stereo</code>). Here we used <code>multinom_reg()</code> to model multinomial regression</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_opt) <span class="co" style="color: #5E5E5E;"># reset contrasts options back to `contr.treatment`</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">ml_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">multinom_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'nnet'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-5">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb28-6"></span>
<span id="cb28-7">BrainCancer_rec3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(diagnosis <span class="sc" style="color: #5E5E5E;">~</span> loc <span class="sc" style="color: #5E5E5E;">+</span> ki <span class="sc" style="color: #5E5E5E;">+</span> gtv <span class="sc" style="color: #5E5E5E;">+</span> stereo, <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-8">    <span class="fu" style="color: #4758AB;">update_role</span>(diagnosis, <span class="at" style="color: #657422;">new_role =</span> <span class="st" style="color: #20794D;">'outcome'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-9">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-10">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span>
<span id="cb28-11"></span>
<span id="cb28-12">BrainCancer_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-13">    <span class="fu" style="color: #4758AB;">add_model</span>(ml_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-14">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec3)</span>
<span id="cb28-15"></span>
<span id="cb28-16">BrainCancer_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-17">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb28-18"></span>
<span id="cb28-19">BrainCancer_fit3</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: multinom_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
2 Recipe Steps

• step_normalize()
• step_dummy()

── Model ───────────────────────────────────────────────────────────────────────
Call:
nnet::multinom(formula = ..y ~ ., data = data, trace = FALSE)

Coefficients:
          (Intercept)          ki         gtv loc_Supratentorial stereo_SRT
LG glioma  -2.3035689  0.23860763 -0.02596393          0.3998414  0.5444269
HG glioma  -2.5894735  0.03684929  0.15897113          0.9417737  1.3658683
Other      -0.4158848 -0.29780559  0.14203552         -2.7892771  1.4289732

Residual Deviance: 187.5196 
AIC: 217.5196 </code></pre>
</div>
</div>
<p>In the multinomial regression, no p-value were reported. The coefficients represent log odds ratio.</p>
<p>Each row in the coefficient table corresponds to the model equation. eg. the first row represents the coefficients for <code>LG glioma</code> in comparison to our baseline <code>Meningioma</code>. Each column in the coefficient table corresponds to specific coefficient estimate. Thus, compared to <code>Meningioma</code>, using <code>SRT</code> Stereotactic method is about 4 times (<code>exp(1.3658683)</code>) more likely diagnose <code>HG glioma</code>. A tumor is only 6% (<code>exp(-2.7892771)</code>) chance to be diagnosed as <code>Other</code> instead of <code>Meningioma</code> if it is located at <code>Supratentorial</code> area.</p>
<p>To perform above model in base R syntax, please refer to the <a href="https://datasciencebeginners.com/2018/12/20/multinomial-logistic-regression-using-r/#:~:text=Multinomial%20regression%20is%20an%20extension,one%20or%20more%20independent%20variable.">blog post</a> by Mohit Sharma.</p>
</section>
</section>
<section id="poisson-regression" class="level2">
<h2 class="anchored" data-anchor-id="poisson-regression">Poisson regression</h2>
<p>Poisson regression is used to model count outcome. Unlike regular linear regression, count outcome is not real continuous variable. Instead, it must be positive integer and usually modeled by Poisson distribution rather than normal distribution.</p>
<p>The link function for Poisson regression is log function <img src="https://latex.codecogs.com/png.latex?%5Cln%5Clambda"> where <img src="https://latex.codecogs.com/png.latex?%5Clambda"> represents the mean of outcome.</p>
<p>In the following example, we use <code>Bikeshare</code> data to predict <code>bikers</code> outcome which represents the <em>count</em> of rental bikers</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'Bikeshare'</span>)</span>
<span id="cb30-2"></span>
<span id="cb30-3">Bikeshare_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(bikers <span class="sc" style="color: #5E5E5E;">~</span> season <span class="sc" style="color: #5E5E5E;">+</span> weekday <span class="sc" style="color: #5E5E5E;">+</span> weathersit <span class="sc" style="color: #5E5E5E;">+</span> temp <span class="sc" style="color: #5E5E5E;">+</span> hum <span class="sc" style="color: #5E5E5E;">+</span> windspeed, <span class="at" style="color: #657422;">data =</span> Bikeshare) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(season, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"winter"</span>,<span class="st" style="color: #20794D;">'spring'</span>,<span class="st" style="color: #20794D;">'summer'</span>,<span class="st" style="color: #20794D;">'fall'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(weekday, <span class="at" style="color: #657422;">transform =</span> <span class="cf" style="color: #003B4F;">function</span>(x) {x<span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>}, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'sunday'</span>,<span class="st" style="color: #20794D;">'monday'</span>,<span class="st" style="color: #20794D;">'tuesday'</span>,<span class="st" style="color: #20794D;">'wednesday'</span>,<span class="st" style="color: #20794D;">'thursday'</span>,<span class="st" style="color: #20794D;">'friday'</span>,<span class="st" style="color: #20794D;">'saturday'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-6">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-8">    <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;"># Bikeshare_rec %&gt;% prep() %&gt;% bake(new_data = NULL)</span></span>
<span id="cb30-11"><span class="fu" style="color: #4758AB;">library</span>(poissonreg)</span>
<span id="cb30-12">pr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">poisson_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-13">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-14">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb30-15"></span>
<span id="cb30-16">Bikeshare_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-17">    <span class="fu" style="color: #4758AB;">add_recipe</span>(Bikeshare_rec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-18">    <span class="fu" style="color: #4758AB;">add_model</span>(pr_spec)</span>
<span id="cb30-19"></span>
<span id="cb30-20">Bikeshare_fit <span class="ot" style="color: #003B4F;">&lt;-</span> Bikeshare_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-21">     parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fit</span>(Bikeshare)</span>
<span id="cb30-22"></span>
<span id="cb30-23">Bikeshare_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-24">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 16 × 5
   term                       estimate std.error statistic   p.value
   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1 (Intercept)                  4.58    0.00385   1191.    0        
 2 temp                         0.426   0.00149    285.    0        
 3 hum                         -0.256   0.00108   -238.    0        
 4 windspeed                    0.0404  0.000949    42.6   0        
 5 season_spring                0.302   0.00384     78.7   0        
 6 season_summer                0.144   0.00449     32.1   1.12e-226
 7 season_fall                  0.613   0.00345    177.    0        
 8 weekday_monday              -0.0464  0.00336    -13.8   1.82e- 43
 9 weekday_tuesday             -0.0405  0.00336    -12.1   1.42e- 33
10 weekday_wednesday           -0.0524  0.00342    -15.3   4.88e- 53
11 weekday_thursday            -0.0804  0.00339    -23.7   2.70e-124
12 weekday_friday              -0.0151  0.00335     -4.51  6.47e-  6
13 weekday_saturday            -0.0187  0.00336     -5.58  2.36e-  8
14 weathersit_cloudy.misty      0.106   0.00223     47.4   0        
15 weathersit_light.rain.snow  -0.163   0.00425    -38.4   0        
16 weathersit_heavy.rain.snow  -0.0368  0.167       -0.221 8.25e-  1</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Bikeshare<span class="sc" style="color: #5E5E5E;">$</span>weathersit)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                cloudy/misty light rain/snow heavy rain/snow
clear                      0               0               0
cloudy/misty               1               0               0
light rain/snow            0               1               0
heavy rain/snow            0               0               1</code></pre>
</div>
</div>
<p>All terms except <code>weathersit_heavy.rain.snow</code> are significantly associated with rental bikers number. - when keeping all other variables constant, compared to <code>season_winter</code>, <code>season_spring</code> will increase the mean of rental biker count by 1.35 <code>exp(0.30234965)</code>. In other words, there will be 135% bikers rental a bike in spring than winter. - when keeping all other variables constant, every unit increase in temperature will result in on average 1.53 (<code>exp(0.42588059)</code>) rental biker customer.</p>
<p><em>note:above model is not optimal model to predict rental bikers. We use the model without interactions to simplify the question and emphasize interpretation of coefficients in the context of poisson regression . To interpret the coefficients with interaction term, refer to previous regular linear regression example</em></p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, I focus on interpret the coefficients in three GLM, and show the examples of coefficients associated with both quantitative and qualitative predictors. I also include the examples to interpret coefficients when 1) add interaction term, 2) with multi-nominal outcome and 3) with alternative contrast matrix.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>GLM</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</guid>
  <pubDate>Mon, 28 Feb 2022 05:00:00 GMT</pubDate>
  <media:content url="https://thumbs.dreamstime.com/b/cartoon-cottage-seamless-pattern-hand-drawn-home-facade-street-townhouse-family-house-countryside-urban-border-decor-202493554.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict chocolate rating with xgboost</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># library(lubridate)</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<section id="clean-data" class="level2">
<h2 class="anchored" data-anchor-id="clean-data">Clean Data</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>chocolate</span>
<span id="cb2-2">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cocoa_percent =</span> <span class="fu" style="color: #4758AB;">parse_number</span>(cocoa_percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">separate</span>(ingredients, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ingredient_num"</span>,<span class="st" style="color: #20794D;">"ingredients"</span>), <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"-"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-6">        <span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">parse_number</span>(ingredient_num),</span>
<span id="cb2-7">        <span class="at" style="color: #657422;">ingredients=</span><span class="fu" style="color: #4758AB;">str_trim</span>(ingredients)</span>
<span id="cb2-8">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">map</span>(ingredients, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x,<span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-11">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_trim</span>(.x))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># select(cocoa_percent, ingredient_num, ingredients, most_memorable_characteristics) %&gt;%</span></span>
<span id="cb2-13">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert gredients to boolean columns</li>
</ul>
<p>using <code>unnest</code> to spread out the list column <code>ingredients</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">gredients <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, ingredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>ingredients, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="st" style="color: #20794D;">"NA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-8">    janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert most_memorable_characteristics to boolean columns</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(most_memorable_characteristics)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># distinct(most_memorable_characteristics) %&gt;% </span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;"># pivot_wider(names_from=most_memorable_characteristics, values_from=tmp) %&gt;% </span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<p>There are 972 most_memorable_characteristics in total</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># mutate(most_memorable_characteristics = fct_lump_min(most_memorable_characteristics, min=100)) %&gt;% </span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">group_by</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort=</span>T) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">20</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>n, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics,n))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>n), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">hjust=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"# of chocolates"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most memorable characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Pick top 12 most_memorable_characteristics to convert to boolean column</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics =</span> <span class="fu" style="color: #4758AB;">fct_lump_min</span>(most_memorable_characteristics, <span class="at" style="color: #657422;">min=</span><span class="dv" style="color: #AD0000;">100</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>most_memorable_characteristics, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x))</span></code></pre></div>
</details>
</div>
<ul>
<li>create chocolate_clean data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb7-2">    chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n=</span><span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>ingredients, <span class="sc" style="color: #5E5E5E;">-</span>most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">left_join</span>(gredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">left_join</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
</section>
<section id="explore-data" class="level2">
<h2 class="anchored" data-anchor-id="explore-data">Explore Data</h2>
<p>Several features are explored in terms of their association with rating.</p>
<ul>
<li><code>country_of_bean_origin</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(country_of_bean_origin, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">10</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Blend and non-blend on <code>country_of_bean_origin</code> shows big difference, thus we convert <code>country_of_bean_origin</code> to <code>country_of_bean_origin_blend</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin_blend =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(country_of_bean_origin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Blend"</span>, country_of_bean_origin, <span class="st" style="color: #20794D;">"Non-blend"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li><code>company_manufacturer</code> and <code>company_location</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_manufacturer =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_manufacturer, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.01</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_manufacturer, rating, median))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_manufacturer)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_manufacturer"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_location =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_location, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_location, rating))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_location)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_location"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>cocoa_percent</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>rating</code> is not as continuous as what i originally imagined. Thus, I convert <code>rating</code> to nominal variable <code>rating_bl</code> using 3 as threshold</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rating_bl =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(rating <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">"&gt;=3"</span>, <span class="st" style="color: #20794D;">"&lt; 3"</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">group_by</span>(rating_bl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">count</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
# Groups:   rating_bl [2]
  rating_bl     n
  &lt;chr&gt;     &lt;int&gt;
1 &lt; 3         566
2 &gt;=3        1964</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating_bl)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"rating"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>most_memorable_characteristics</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(Other<span class="sc" style="color: #5E5E5E;">:</span>creamy), as.factor)</span></code></pre></div>
</details>
</div>
<p>most_memorable_characteristics like <code>cocoa</code> and <code>creamy</code> positive effect rating, while <code>fatty</code>, <code>earthy</code>, <code>sandy</code>, <code>sour</code> and <code>sweet</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, fatty<span class="sc" style="color: #5E5E5E;">:</span>creamy) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-7">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb17-9">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-10">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-11">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"is most_memorable_characteristics?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-12">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>ingredients</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb18-2">    chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">igrdt_beans=</span>b, <span class="at" style="color: #657422;">igrdt_sugar=</span>s, <span class="at" style="color: #657422;">igrdt_cocoa=</span>c, <span class="at" style="color: #657422;">igrdt_lecithin=</span>l, <span class="at" style="color: #657422;">igrdt_vanilla=</span>v, <span class="at" style="color: #657422;">igrdt_salt=</span>sa, <span class="at" style="color: #657422;">igrdt_sweeter=</span>s_2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)), as.factor)</span></code></pre></div>
</details>
</div>
<p>ingredient number <code>ingredient_num</code> between 2-3 are associated with higher rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">as.factor</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ingredient_num, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>ingrediants like <code>beans</code> and <code>sugar</code> positively effect rating, while <code>vanilla</code>, <code>sweeter</code> and <code>salt</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>,<span class="st" style="color: #20794D;">""</span>,ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(ingredients, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-8">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb20-9">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb20-10">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-11">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"contain the ingredient?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-13">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="ml" class="level2">
<h2 class="anchored" data-anchor-id="ml">ML</h2>
<p>Based on the exploratory analysis, to study the effect on overall rating of chocolates, the following features are selected for building ML models. Plus, using nominal feature <code>rating_bl</code> instead of numeric feature <code>rating</code> as outcome.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">chocolate_df <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">    <span class="fu" style="color: #4758AB;">select</span>(rating_bl, company_manufacturer, country_of_bean_origin_blend, cocoa_percent, ingredient_num, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">'igrdt_'</span>), cocoa, creamy, fatty, earthy, sandy, sour, sweet) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>igrdt_cocoa, <span class="sc" style="color: #5E5E5E;">-</span>igrdt_lecithin) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span></code></pre></div>
</details>
</div>
<section id="split-samples" class="level3">
<h3 class="anchored" data-anchor-id="split-samples">split samples</h3>
<ul>
<li><code>initial_split</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb22-2">chocolate_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(chocolate_df, <span class="at" style="color: #657422;">strata =</span> rating_bl)</span>
<span id="cb22-3">chocolate_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(chocolate_split)</span>
<span id="cb22-4">chocolate_testing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(chocolate_split)</span></code></pre></div>
</details>
</div>
<ul>
<li>resample</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb23-2">folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(chocolate_train, <span class="at" style="color: #657422;">v =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb23-3">folds</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>#  10-fold cross-validation 
# A tibble: 10 × 2
   splits             id    
   &lt;list&gt;             &lt;chr&gt; 
 1 &lt;split [1647/184]&gt; Fold01
 2 &lt;split [1648/183]&gt; Fold02
 3 &lt;split [1648/183]&gt; Fold03
 4 &lt;split [1648/183]&gt; Fold04
 5 &lt;split [1648/183]&gt; Fold05
 6 &lt;split [1648/183]&gt; Fold06
 7 &lt;split [1648/183]&gt; Fold07
 8 &lt;split [1648/183]&gt; Fold08
 9 &lt;split [1648/183]&gt; Fold09
10 &lt;split [1648/183]&gt; Fold10</code></pre>
</div>
</div>
</section>
<section id="recipe" class="level3">
<h3 class="anchored" data-anchor-id="recipe">recipe</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">chocolate_rec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb25-2">    <span class="fu" style="color: #4758AB;">recipe</span>(rating_bl <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> chocolate_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">step_other</span>(company_manufacturer, <span class="at" style="color: #657422;">threshold=</span><span class="fl" style="color: #AD0000;">0.01</span>, <span class="at" style="color: #657422;">other=</span><span class="st" style="color: #20794D;">"otherCompany"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;"># step_mutate_at(c("company_manufacturer","country_of_bean_origin_blend", "rating_bl"), fn = ~as.factor(.x)) %&gt;% </span></span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span>
<span id="cb25-7"></span>
<span id="cb25-8">chocolate_rec</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
<p>check preprocessed data.frame</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">chocolate_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">    <span class="fu" style="color: #4758AB;">prep</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;">juice</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,831 × 20
   cocoa_percent ingre…¹ ratin…² compa…³ compa…⁴ compa…⁵ compa…⁶ compa…⁷ count…⁸
           &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1            70       4 &lt; 3           0       0       0       0       0       1
 2            70       4 &lt; 3           0       0       0       0       0       1
 3            60       3 &lt; 3           0       0       0       0       1       1
 4            70       2 &lt; 3           0       0       0       0       1       1
 5            70       2 &lt; 3           0       0       0       0       1       1
 6            75       4 &lt; 3           0       0       0       0       1       1
 7            75       4 &lt; 3           0       0       0       0       1       1
 8            75       5 &lt; 3           0       0       0       0       1       1
 9            75       5 &lt; 3           0       0       0       0       1       1
10            65       6 &lt; 3           0       0       0       0       1       1
# … with 1,821 more rows, 11 more variables: igrdt_sugar_X1 &lt;dbl&gt;,
#   igrdt_vanilla_X1 &lt;dbl&gt;, igrdt_salt_X1 &lt;dbl&gt;, igrdt_sweeter_X1 &lt;dbl&gt;,
#   cocoa_X1 &lt;dbl&gt;, creamy_X1 &lt;dbl&gt;, fatty_X1 &lt;dbl&gt;, earthy_X1 &lt;dbl&gt;,
#   sandy_X1 &lt;dbl&gt;, sour_X1 &lt;dbl&gt;, sweet_X1 &lt;dbl&gt;, and abbreviated variable
#   names ¹​ingredient_num, ²​rating_bl, ³​company_manufacturer_Arete,
#   ⁴​company_manufacturer_Bonnat, ⁵​company_manufacturer_Fresco,
#   ⁶​company_manufacturer_Soma, ⁷​company_manufacturer_otherCompany, …
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
</section>
<section id="grid-tune-xgboost" class="level3">
<h3 class="anchored" data-anchor-id="grid-tune-xgboost">grid tune xgboost</h3>
<ul>
<li>create model <code>boost_tree</code></li>
</ul>
<p>Details about <code>boost_tree</code> can be found https://parsnip.tidymodels.org/reference/details_boost_tree_xgboost.html</p>
<p><em>require library <code>xgboost</code> installed.</em></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">xg_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb29-2">    <span class="fu" style="color: #4758AB;">boost_tree</span>(</span>
<span id="cb29-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), <span class="co" style="color: #5E5E5E;"># the number (or proportion) of predictors that will be randomly sampled</span></span>
<span id="cb29-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>() <span class="co" style="color: #5E5E5E;"># minimum number of data points in a node</span></span>
<span id="cb29-5">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"xgboost"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># importance="permutation"</span></span>
<span id="cb29-7">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>define grid</li>
</ul>
<p><code>grid_max_entropy</code>, <code>grid_regular</code>, <code>grid_random</code> can be used for quickly specify levels for tuned hyperparameters.</p>
<p>be aware that <code>mtry</code> usually requires <code>range</code> parameters, it usually contains the <code>sqrt(predictor_num)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">xg_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">grid_regular</span>(</span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;">mtry</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;">min_n</span>(),</span>
<span id="cb30-4">    <span class="at" style="color: #657422;">levels =</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># each tune how many levels</span></span>
<span id="cb30-5">)</span>
<span id="cb30-6"></span>
<span id="cb30-7">xg_grid</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 2
    mtry min_n
   &lt;int&gt; &lt;int&gt;
 1     3     2
 2     4     2
 3     6     2
 4     8     2
 5    10     2
 6     3    11
 7     4    11
 8     6    11
 9     8    11
10    10    11
# … with 15 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li>create workflow</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">xg_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">    <span class="fu" style="color: #4758AB;">add_model</span>(xg_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-3">    <span class="fu" style="color: #4758AB;">add_recipe</span>(chocolate_rec)</span>
<span id="cb32-4"></span>
<span id="cb32-5">xg_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = tune()
  min_n = tune()

Computational engine: xgboost </code></pre>
</div>
</div>
<ul>
<li>tune model to get result</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">system.time</span>(</span>
<span id="cb34-2">    xg_res <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb34-3">        xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-4">        <span class="fu" style="color: #4758AB;">tune_grid</span>(</span>
<span id="cb34-5">            <span class="at" style="color: #657422;">resamples =</span> folds,</span>
<span id="cb34-6">            <span class="at" style="color: #657422;">grid =</span> xg_grid</span>
<span id="cb34-7">            )</span>
<span id="cb34-8">    )</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 30.965   0.215  31.417 </code></pre>
</div>
</div>
<ul>
<li>evaluate models</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> min_n, <span class="at" style="color: #657422;">y=</span>mean, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-4">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>.metric, <span class="at" style="color: #657422;">scales=</span><span class="st" style="color: #20794D;">"free"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-5">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-6">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-8">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"metrics estimate"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">'minimum number of data points in a node (min_n)'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">'the number of predictors that will be randomly sampled (mtry)'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-9">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>select hyperparameters and finalize wf</li>
</ul>
<p><code>show_best(metric = )</code> allows to see the top 5 from <code>xg_res %&gt;% collect_metrics()</code></p>
<p><code>select_best</code>, <code>select_by_pct_loss</code>, <code>select_by_one_std_err</code> select hyperparameters and corresponding <code>.config</code> to a tibble.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">xg_tune_hy <span class="ot" style="color: #003B4F;">&lt;-</span> xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">    <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"accuracy"</span>)</span>
<span id="cb37-3"></span>
<span id="cb37-4">xg_tune_hy</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
   mtry min_n .config              
  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                
1    10    11 Preprocessor1_Model10</code></pre>
</div>
</div>
<p>finalize model using selected hyperparameters</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb39-2">  xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(xg_tune_hy)</span>
<span id="cb39-4"></span>
<span id="cb39-5">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = 10
  min_n = 11

Computational engine: xgboost </code></pre>
</div>
</div>
</section>
<section id="last_fit-model" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-model"><code>last_fit</code> model</h3>
<ul>
<li>use <code>last_fit(split)</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">final_fit <span class="ot" style="color: #003B4F;">&lt;-</span> final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">    <span class="fu" style="color: #4758AB;">last_fit</span>(chocolate_split)</span>
<span id="cb41-3"></span>
<span id="cb41-4">final_fit</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># Resampling results
# Manual resampling 
# A tibble: 1 × 6
  splits             id               .metrics .notes   .predictions .workflow 
  &lt;list&gt;             &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    
1 &lt;split [1831/612]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;</code></pre>
</div>
</div>
<ul>
<li><code>collect_metrics</code> for overall data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric  .estimator .estimate .config             
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy binary         0.786 Preprocessor1_Model1
2 roc_auc  binary         0.668 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>metrics are comparable to training data, so not overfiting.</p>
<ul>
<li><code>collect_predictions</code> for test data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb45-2">    <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 612 × 7
   id               `.pred_&lt; 3` `.pred_&gt;=3`  .row .pred_class rating_bl .config 
   &lt;chr&gt;                  &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;     &lt;chr&gt;   
 1 train/test split      0.141        0.859     3 &gt;=3         &gt;=3       Preproc…
 2 train/test split      0.125        0.875    10 &gt;=3         &lt; 3       Preproc…
 3 train/test split      0.0668       0.933    11 &gt;=3         &lt; 3       Preproc…
 4 train/test split      0.156        0.844    17 &gt;=3         &gt;=3       Preproc…
 5 train/test split      0.0668       0.933    24 &gt;=3         &gt;=3       Preproc…
 6 train/test split      0.0668       0.933    25 &gt;=3         &gt;=3       Preproc…
 7 train/test split      0.0711       0.929    32 &gt;=3         &gt;=3       Preproc…
 8 train/test split      0.236        0.764    42 &gt;=3         &lt; 3       Preproc…
 9 train/test split      0.491        0.509    46 &gt;=3         &lt; 3       Preproc…
10 train/test split      0.385        0.615    55 &gt;=3         &lt; 3       Preproc…
# … with 602 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li><code>roc_auc</code> and <code>roc_curve</code> on test data</li>
</ul>
<p>calculate <code>roc_auc</code> manually on test data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;">roc_auc</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric .estimator .estimate
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
1 roc_auc binary         0.668</code></pre>
</div>
</div>
<p>plot <code>roc_curve</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;">autoplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>extract_workflow()</code> to save <code>final_trained_wf</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">final_trained_wf <span class="ot" style="color: #003B4F;">&lt;-</span> final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">    <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb50-3"></span>
<span id="cb50-4">final_trained_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><p><code>extract_*</code> information from <code>final_trained_wf</code></p>
<ul>
<li><code>extract_fit_engine()</code> is engine-specific model</li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;">extract_fit_engine</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_fit_parsnip()</code> is parsnip model object</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>parsnip model object

##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_recipe</code> or <code>extract_preprocessing</code> to get recipe/preprocessing</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">extract_preprocessor</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
</section>
<section id="feature-importance" class="level3">
<h3 class="anchored" data-anchor-id="feature-importance">feature importance</h3>
<ul>
<li><code>vip()</code> plot top 10</li>
<li><code>vi_model()</code> return tibble</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;">vip</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="final-notes" class="level2">
<h2 class="anchored" data-anchor-id="final-notes">Final notes</h2>
<ul>
<li>I convert numeric <code>rating</code> to categorical rating using threshold because, based on the exploratory analysis, the <code>rating</code> values are not continuous.</li>
<li>The <code>boost_tree</code> did not produce good estimate for the data.
<ul>
<li>Other models, like <code>rand_forest()</code>, <code>logistic_reg</code> and <code>svm_linear</code> are worth to try.</li>
<li>Tuning other hyperparameters <code>tree_depth</code>, <code>learning_rate</code> and <code>trees</code> are worth to try. <em>I don’t know which tune-able hyperparameter corresponds to regularization <code>gamma</code></em>.</li>
</ul></li>
<li>Julia Silge posted a <a href="https://www.youtube.com/watch?v=w-lF65hKtrQ">screencast</a> and <a href="https://juliasilge.com/blog/chocolate-ratings/">blog</a> of using <code>rand_forest()</code> and <code>svm_linear</code> training rating as linear model on the same dataset.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</guid>
  <pubDate>Sun, 23 Jan 2022 05:00:00 GMT</pubDate>
  <media:content url="https://www.history.com/.image/ar_4:3%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTc3OTk5Njc1MTU5MjI1OTY1/valentines-day-chocolate-gettyimages-923430892.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict ultra race time</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span></code></pre></div>
</details>
</div>
<section id="data-skim" class="level2">
<h2 class="anchored" data-anchor-id="data-skim">data skim</h2>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ultra_rankings <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>ultra_rankings</span>
<span id="cb2-2">race <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>race</span>
<span id="cb2-3"></span>
<span id="cb2-4">ultra_join <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb2-5">    ultra_rankings <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">left_join</span>(race, <span class="at" style="color: #657422;">by=</span><span class="st" style="color: #20794D;">"race_year_id"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">skimr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">skim</span>(ultra_join)</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">ultra_join</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">137803</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">20</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Date</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">difftime</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="even">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">runner</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">73629</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">time</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">72840</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gender</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">nationality</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">133</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">event</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">57</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">435</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">race</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">63</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">371</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">city</td>
<td style="text-align: right;">15599</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">308</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">country</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">60</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participation</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: Date</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">date</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">2012-01-14</td>
<td style="text-align: left;">2021-09-03</td>
<td style="text-align: left;">2017-10-13</td>
<td style="text-align: right;">711</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: difftime</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 18%">
<col style="width: 13%">
<col style="width: 18%">
<col style="width: 9%">
<col style="width: 14%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">start_time</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">0 secs</td>
<td style="text-align: left;">82800 secs</td>
<td style="text-align: left;">05:00:00</td>
<td style="text-align: right;">39</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 15%">
<col style="width: 9%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">race_year_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">26678.70</td>
<td style="text-align: right;">20156.18</td>
<td style="text-align: right;">2320</td>
<td style="text-align: right;">8670.0</td>
<td style="text-align: right;">21795.0</td>
<td style="text-align: right;">40621</td>
<td style="text-align: right;">72496.0</td>
<td style="text-align: left;">▇▃▃▂▂</td>
</tr>
<tr class="even">
<td style="text-align: left;">rank</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">253.56</td>
<td style="text-align: right;">390.80</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">31.0</td>
<td style="text-align: right;">87.0</td>
<td style="text-align: right;">235</td>
<td style="text-align: right;">1962.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">age</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">46.25</td>
<td style="text-align: right;">10.11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">40.0</td>
<td style="text-align: right;">46.0</td>
<td style="text-align: right;">53</td>
<td style="text-align: right;">133.0</td>
<td style="text-align: left;">▁▇▂▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">time_in_seconds</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">122358.26</td>
<td style="text-align: right;">37234.38</td>
<td style="text-align: right;">3600</td>
<td style="text-align: right;">96566.0</td>
<td style="text-align: right;">114167.0</td>
<td style="text-align: right;">148020</td>
<td style="text-align: right;">296806.0</td>
<td style="text-align: left;">▁▇▆▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">distance</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">154.08</td>
<td style="text-align: right;">39.22</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">160.9</td>
<td style="text-align: right;">162.6</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">179.1</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">elevation_gain</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">6473.94</td>
<td style="text-align: right;">3293.50</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3910.0</td>
<td style="text-align: right;">6640.0</td>
<td style="text-align: right;">9618</td>
<td style="text-align: right;">14430.0</td>
<td style="text-align: left;">▅▆▆▇▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">elevation_loss</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">-6512.20</td>
<td style="text-align: right;">3305.73</td>
<td style="text-align: right;">-14440</td>
<td style="text-align: right;">-9618.0</td>
<td style="text-align: right;">-6810.0</td>
<td style="text-align: right;">-3950</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: left;">▁▇▆▅▅</td>
</tr>
<tr class="even">
<td style="text-align: left;">aid_stations</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">9.58</td>
<td style="text-align: right;">7.56</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">12.0</td>
<td style="text-align: right;">16</td>
<td style="text-align: right;">56.0</td>
<td style="text-align: left;">▇▇▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participants</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">510.75</td>
<td style="text-align: right;">881.25</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">65.0</td>
<td style="text-align: right;">400</td>
<td style="text-align: right;">2900.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<p>We want to estimate the time (time_in_seconds) for runner to finish based on the features.</p>
<section id="the-effect-of-gender-and-age" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-gender-and-age">the effect of gender and age</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_decade =</span> <span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">*</span> (age <span class="sc" style="color: #5E5E5E;">%/%</span> <span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, gender, age, age_decade) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">group_by</span>(age_decade, gender) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb4-9">        <span class="at" style="color: #657422;">time_in_seconds_sd =</span> <span class="fu" style="color: #4758AB;">sd</span>(time_in_seconds),</span>
<span id="cb4-10">         <span class="at" style="color: #657422;">time_in_seconds =</span> <span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb4-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age_decade, <span class="at" style="color: #657422;">color=</span>gender, <span class="at" style="color: #657422;">group=</span>gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.2</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;">scale_color_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"age"</span>, <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-18">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="the-effect-of-nationality-age-gender" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-nationality-age-gender">the effect of nationality, age, gender</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">count</span>(nationality, <span class="at" style="color: #657422;">sort=</span><span class="cn" style="color: #8f5902;">TRUE</span>) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  nationality     n
  &lt;fct&gt;       &lt;int&gt;
1 Other       50563
2 USA         47259
3 FRA         28905
4 GBR         11076</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age, <span class="at" style="color: #657422;">fill=</span>nationality), <span class="at" style="color: #657422;">group=</span>nationality) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat=</span><span class="st" style="color: #20794D;">"density"</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>nationality</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(nationality, time_in_seconds), <span class="at" style="color: #657422;">y=</span>time_in_seconds, <span class="at" style="color: #657422;">fill=</span>nationality)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-8">    <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"runner's nationality"</span>, <span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-10">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-distance" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-distance">effect of distance</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>distance, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-elevation" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-elevation">effect of elevation</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb10-5">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), elevation_gain,  <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb10-6">        )) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>elevation , <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-9">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-date" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-date">effect of date</h3>
<p>The year of the race</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb11-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb11-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb11-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb11-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb11-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb11-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_year, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The month of race can be the proxy to estimate the season when race was hosted. However, here I did not take the geographic information (hemisphere) into consideration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb12-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb12-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_month) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb12-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb12-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb12-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_month, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="learning-models" class="level2">
<h2 class="anchored" data-anchor-id="learning-models">learning models</h2>
<p>Here I will perform two distinct models – linear regression and random forest to predict the race time using runner’s gender, age, nationality, elevation and distance of race.</p>
<section id="data-budget" class="level3">
<h3 class="anchored" data-anchor-id="data-budget">data budget</h3>
<p>inistal split to train and test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">ultra_df <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb13-7">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), </span>
<span id="cb13-8">        elevation_gain,</span>
<span id="cb13-9">        <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb13-10">        )</span>
<span id="cb13-11">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, age, gender, nationality, distance, elevation)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">2021</span>)</span>
<span id="cb13-15">ultra_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(ultra_df, <span class="at" style="color: #657422;">strata =</span> time_in_seconds)</span>
<span id="cb13-16">ultra_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(ultra_split)</span>
<span id="cb13-17">ultra_test <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<p>create resamples for cross validation</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">124</span>)</span>
<span id="cb14-2">ultra_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(ultra_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="recipes-for-feature-engineer" class="level3">
<h3 class="anchored" data-anchor-id="recipes-for-feature-engineer">recipes for feature engineer</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ultra_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(time_in_seconds <span class="sc" style="color: #5E5E5E;">~</span>., <span class="at" style="color: #657422;">data =</span> ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">step_other</span>(nationality) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">step_string2factor</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="co" style="color: #5E5E5E;"># step_dummy(all_nominal_predictors()) %&gt;% </span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># want to test whether dummy variables affect the model behave</span></span>
<span id="cb15-9">ind_rec <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-linear-model" class="level3">
<h3 class="anchored" data-anchor-id="fit-linear-model">fit linear model</h3>
<p>specify models</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lm_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span></code></pre></div>
</details>
</div>
<p>Does linear model need dummy variable? Using <code>workflow_set</code> to test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">lm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_set</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;">preproc =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="st" style="color: #20794D;">"nodummy"</span><span class="ot" style="color: #003B4F;">=</span>ultra_rec, <span class="st" style="color: #20794D;">"dummy"</span><span class="ot" style="color: #003B4F;">=</span>ind_rec),</span>
<span id="cb17-3">  <span class="at" style="color: #657422;">models =</span> <span class="fu" style="color: #4758AB;">list</span>(lm_spec)</span>
<span id="cb17-4">)</span>
<span id="cb17-5"></span>
<span id="cb17-6">lm_rs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_map</span>(</span>
<span id="cb17-7">  lm_wf, <span class="st" style="color: #20794D;">'fit_resamples'</span>, <span class="at" style="color: #657422;">resamples=</span>ultra_folds</span>
<span id="cb17-8">  )</span>
<span id="cb17-9"></span>
<span id="cb17-10">lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 9
  wflow_id           .config preproc model .metric .esti…¹    mean     n std_err
  &lt;chr&gt;              &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
1 nodummy_linear_reg Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
2 nodummy_linear_reg Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
3 dummy_linear_reg   Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
4 dummy_linear_reg   Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
# … with abbreviated variable name ¹​.estimator</code></pre>
</div>
</div>
<p>Based on the r-square value, the linear model with age, distance, elevation, gender and nationality explained ~57% variance of time_in_seconds.</p>
<p>Using dummy variable or not does not change the metrics. In fact, the number of coefficients will be exactly same no matter whether using dummy or not. Below shows coefficients of linear regression by fitting the “nodummy_linear_reg” workflow to the training data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">lm_coef <span class="ot" style="color: #003B4F;">&lt;-</span> lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">fit</span>(ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">tidy</span>()</span>
<span id="cb19-5"></span>
<span id="cb19-6">lm_coef</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 5
  term             estimate std.error statistic   p.value
  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept)       142711.     217.      658.  0        
2 age                 4220.      83.3      50.6 0        
3 genderW             6315.     236.       26.8 1.82e-157
4 nationalityGBR    -25432.     389.      -65.3 0        
5 nationalityJPN    -20211.     406.      -49.8 0        
6 nationalityUSA    -30025.     302.      -99.6 0        
7 nationalityother  -19682.     254.      -77.6 0        
8 distance            2630.      99.2      26.5 2.65e-154
9 elevation          17421.     117.      149.  0        </code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lm_coef <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">filter</span>(term<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"(Intercept)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> estimate, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(term, estimate))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>(estimate <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>)), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xmin=</span>estimate <span class="sc" style="color: #5E5E5E;">-</span> std.error, <span class="at" style="color: #657422;">xmax =</span> estimate <span class="sc" style="color: #5E5E5E;">+</span> std.error), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Elevation, being a women (compare to being a men), age and distance positively affect race time, while racers from JPN/GBR/USA/other (compare to racers from FRA) finish the race in shorter time.</p>
</section>
<section id="fit-random-forest-model-using-workflow" class="level3">
<h3 class="anchored" data-anchor-id="fit-random-forest-model-using-workflow">fit random forest model using workflow</h3>
<p>Using random forest as model to get Resampling results</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">rf_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'ranger'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb22-4"></span>
<span id="cb22-5">rf_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">add_model</span>(rf_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;">add_recipe</span>(ultra_rec)</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;"># resample evaluate </span></span>
<span id="cb22-10">rf_rs  <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-11">  <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb22-12">    <span class="at" style="color: #657422;">resamples =</span> ultra_folds</span>
<span id="cb22-13">  )</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 6
  .metric .estimator      mean     n  std_err .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18535.       10 57.2     Preprocessor1_Model1
2 rsq     standard       0.738    10  0.00219 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Compared to linear model shown above, random forest with same predictors can explain more variance of Y (74% vs.&nbsp;56%) and show smaller rmse (1.8e4 vs.&nbsp;2.4e4).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb25-2">  rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"random forest"</span>),</span>
<span id="cb25-6">  lm_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-7">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;">filter</span>(wflow_id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-9">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"linear reg"</span>)</span>
<span id="cb25-11">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> model, <span class="at" style="color: #657422;">y =</span> mean)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(.metric), <span class="at" style="color: #657422;">scales =</span> <span class="st" style="color: #20794D;">'free'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>mean <span class="sc" style="color: #5E5E5E;">-</span> std_err, <span class="at" style="color: #657422;">ymax=</span>mean <span class="sc" style="color: #5E5E5E;">+</span> std_err), <span class="at" style="color: #657422;">width=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notes: above plot can also be done by autoplot if we perform the comparison between linear regression and random forest models using <code>workflow_set</code>.</p>
</section>
<section id="last_fit-test-data-using-random-forest-result" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-test-data-using-random-forest-result"><code>last_fit</code> test data using random forest result</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_final_rs <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">last_fit</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric .estimator .estimate .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18558.    Preprocessor1_Model1
2 rsq     standard       0.737 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Different from <code>fit_resample</code> results, these metrics are calculated on the test data. The value is very close to the values done on training data (resample data), thus the model is not over-fitted.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb29-3"></span>
<span id="cb29-4">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: rand_forest()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_normalize()
• step_string2factor()

── Model ───────────────────────────────────────────────────────────────────────
Ranger result

Call:
 ranger::ranger(x = maybe_data_frame(x), y = y, num.threads = 1,      verbose = FALSE, seed = sample.int(10^5, 1)) 

Type:                             Regression 
Number of trees:                  500 
Sample size:                      83042 
Number of independent variables:  5 
Mtry:                             2 
Target node size:                 5 
Variable importance mode:         none 
Splitrule:                        variance 
OOB prediction error (MSE):       342750489 
R squared (OOB):                  0.7386915 </code></pre>
</div>
</div>
<p>The above <strong>trained</strong> workflow from <code>last_fit</code> can be saved in <code>.rda</code> for future prediction</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># using final_wf for prediction</span></span>
<span id="cb31-2">final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">predict</span>(<span class="at" style="color: #657422;">new_data =</span> ultra_train <span class="sc" style="color: #5E5E5E;">%&gt;%</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>)) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
    .pred
    &lt;dbl&gt;
1 108741.</code></pre>
</div>
</div>
</section>
</section>
<section id="what-techniques-i-learned" class="level2">
<h2 class="anchored" data-anchor-id="what-techniques-i-learned">what techniques i learned</h2>
<ul>
<li>deal with high-levels nominal features (<code>fct_lump</code> and <code>step_other</code>) in EDA and modeling</li>
<li><code>workflow_set</code> and <code>map_workflow</code> to create multiple workflows for model and/or recipes comparison.</li>
<li><code>fit_resample</code> for cross-validation. The metrics collected from cross-validation results are used for workflow comparison.</li>
<li><code>last_fit</code> model and save <strong>trained</strong> workflow for future use</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</guid>
  <pubDate>Tue, 02 Nov 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Taking options from command line</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</link>
  <description><![CDATA[ 



<p>Taking in options from command line is an essential step towards generalized usage of scripts. However, it is a chapter I skipped in almost all language textbooks since my primary goal was to code for a specific problem and did not mind re-writing the scripts in different situations.</p>
<p>Usually the options following the scripts have two types</p>
<ul>
<li>direct inputs (with default definition within the script).</li>
<li>the “true”” options with “-” or “–” to allow optional manipulation</li>
</ul>
<p>For the second type of options, it becomes a little bit complicated. First, this type options can be further grouped based whether there is argument value followed specified option (“options with argument” vs “options without argument”). In addition, it can also be classified by whether this option is mandatory or optional (although all mandatory options can be converted to optional by specifying the default value).</p>
<p>In this post, I will catch up on the options taken-in scripting in Bash, R and Perl.</p>
<section id="Bash" class="level3">
<h3 class="anchored" data-anchor-id="Bash">Bash</h3>
<p>Bash script takes in first type of options using special variables based on the input orders <code>$1</code>, <code>$2</code>, … For the unknown number of inputs, <code>$@</code> array is used to represents all arguments after script file (<code>$0</code>).</p>
<p>For the second type of options, there are two methods to take in options. One method is to use <code>while :; do; done</code> to read through all arguments (<code>$@</code>) after scripts by considering <code>--option</code> as an argument itself and <code>shift</code> it off in the loop. For each <code>--option</code>, we can use <a href="https://www.tutorialspoint.com/unix/case-esac-statement.htm"><code>case; esac</code></a> matching to specify what exact value should be.</p>
<p>In the following script, I listed the examples of “mandatory non-empty option argument”, “optional empty option argument” and “optional non-empty option argument”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">## specifiy usage function</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">usage()</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-6">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> [-h] -p p1 [-v] [-o output_file] bam1 bam2"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">## setting defaults</span></span>
<span id="cb1-10"><span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span>0 <span class="co" style="color: #5E5E5E;"># default for optional empty option argument</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># p1=0 # all mandatory options can be converted to optional by specifying the default value</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">:</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">$1</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb1-15">        <span class="ss" style="color: #20794D;">-p</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--para</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># mandatory non-empty option argument (mandatory enforced later, or we can set default to make it optional)</span></span>
<span id="cb1-16">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;">!</span> <span class="va" style="color: #111111;">$2</span> <span class="ot" style="color: #003B4F;">=~</span> <span class="st" style="color: #20794D;">"-"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-17">                        <span class="va" style="color: #111111;">p1</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-18">                        <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-19">                <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-20">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para requires non-empty option argument'</span></span>
<span id="cb1-21">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-22">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-24">        <span class="ss" style="color: #20794D;">-v</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--verbose</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional empty option argument (with default)</span></span>
<span id="cb1-25">                <span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$((verbose</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-27">        <span class="ss" style="color: #20794D;">-o</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--output</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional non-empty option argument</span></span>
<span id="cb1-28">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-f</span> <span class="va" style="color: #111111;">$2</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span> <span class="co" style="color: #5E5E5E;"># prevent overwrite into a file exist in directory</span></span>
<span id="cb1-29">                        <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARNING: --output argument %s is a file existing in directory\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-30">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Are you sure about overwriting?"</span></span>
<span id="cb1-31">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Press any key to continue"</span></span>
<span id="cb1-32">                        <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">[</span> true <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-33">                                <span class="bu" style="color: null;">read</span> <span class="at" style="color: #657422;">-n</span> 1</span>
<span id="cb1-34">                                <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">=</span> 0 <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-35">                                        <span class="cf" style="color: #003B4F;">break</span> <span class="ex" style="color: null;">1</span> <span class="co" style="color: #5E5E5E;"># break the while [ true ] loop</span></span>
<span id="cb1-36">                                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-37">                        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-38">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-39">                <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-40">                <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-41">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-42">        <span class="ss" style="color: #20794D;">-h</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--help</span> <span class="kw" style="color: #003B4F;">)</span>           </span>
<span id="cb1-43">                <span class="ex" style="color: null;">usage</span></span>
<span id="cb1-44">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-46">        <span class="ss" style="color: #20794D;">-</span><span class="pp" style="color: #AD0000;">?*</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb1-47">                <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARN: Unknown option (ignored): %s\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$1</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-48">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-50">        <span class="pp" style="color: #AD0000;">*</span><span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># Default case: No more options, so break out of the loop.</span></span>
<span id="cb1-51">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb1-53">    <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;"># mandatory argument</span></span>
<span id="cb1-57"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$p1</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-58">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para is mandatory argument'</span></span>
<span id="cb1-59">        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-60"><span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;"># input after options are put into $@</span></span>
<span id="cb1-63"><span class="va" style="color: #111111;">bams</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span>
<span id="cb1-64"></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;"># a simple function to execute </span></span>
<span id="cb1-66"><span class="fu" style="color: #4758AB;">print_out()</span></span>
<span id="cb1-67"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;">for</span> bam <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">${bams</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-69">                <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$bam</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-70">        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-71"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;"># show what --para take in</span></span>
<span id="cb1-74"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$p1</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-75"></span>
<span id="cb1-76"><span class="co" style="color: #5E5E5E;"># execute function output</span></span>
<span id="cb1-77"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">!</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$output</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-78">        <span class="ex" style="color: null;">print_out</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="va" style="color: #111111;">$output</span></span>
<span id="cb1-79"><span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-80">        <span class="ex" style="color: null;">print_out</span></span>
<span id="cb1-81"><span class="cf" style="color: #003B4F;">fi</span></span></code></pre></div>
</details>
</div>
<p>The second method is to use <code>getopts</code> function with function-specific variables <code>$OPTARG</code> and <code>$OPTIND</code> to track the option value and option number. It can only take in the short format “-” options. The <code>:</code> following the <code>-o</code> will be passed to $OPTARG, thus, the different between “options with argument” and “options without argument” are shown in <code>o:</code> and <code>o</code> in <code>getopts</code> format.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">getopts</span> <span class="st" style="color: #20794D;">":ho:"</span> <span class="va" style="color: #111111;">opt</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb2-2">        <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">${opt}</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb2-3">                <span class="ss" style="color: #20794D;">h</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-4">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> -o output_file folder1 folder2 ..."</span></span>
<span id="cb2-5">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-6">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-7">                <span class="ss" style="color: #20794D;">o</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-8">                        <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$OPTARG</span></span>
<span id="cb2-9">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-10">                <span class="dt" style="color: #AD0000;">\?</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-11">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;">"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-12">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-13">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-14">                <span class="ss" style="color: #20794D;">:</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-15">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;"> requires an argument"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-16">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb2-19"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb2-20"><span class="bu" style="color: null;">shift</span> <span class="va" style="color: #111111;">$((OPTIND</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb2-21"><span class="va" style="color: #111111;">dirs</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span></code></pre></div>
</details>
</div>
<p>Personally, I would recommend the first method. The additional reading can be found http://mywiki.wooledge.org/BashFAQ/035</p>
</section>
<section id="R" class="level3">
<h3 class="anchored" data-anchor-id="R">R</h3>
<p>Most R users execute the R script in Rstudio or R Console, and may never need to take in options. However, to execute R script in HPC environment, we submit <code>Rscript script.R</code> to the cluster for the jobs requiring high resources from command line.</p>
<p>For first type of options, <code>commandArgs</code> is all you need. It parses all arguments after script.R to the arguments vector.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">args <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">commandArgs</span>(<span class="at" style="color: #657422;">trailingOnly=</span><span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-2">file1<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-3">file2<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
</details>
</div>
<p>For the second type of options, package <code>optparse</code> is useful. Function <code>make_option</code> is used to specify each option type (matching pattern, option type, default value, …). To distinguish “options with argument” and “options without argument”, we can specify <code>action</code> argument in <code>make_option</code> function.</p>
<ul>
<li>options with argument: <code>action="store", type="character"</code> (# this is default)</li>
<li>options without argument: <code>action="store_true"</code> (# by default, <code>type="logical"</code>)</li>
</ul>
<p>After making option list, we use <code>parse_args(OptionParser(option_list))</code> to assign options to a list value (with long flag option as list element name).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(optparse)</span>
<span id="cb4-2"></span>
<span id="cb4-3">option_list <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;"># parameter 1 </span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-p"</span>,<span class="st" style="color: #20794D;">"--para"</span>),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"integer"</span>, </span>
<span id="cb4-8">    <span class="at" style="color: #657422;">default=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb4-9">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"parameter 1 [default= %default]"</span></span>
<span id="cb4-10">    ),</span>
<span id="cb4-11">  <span class="co" style="color: #5E5E5E;"># optional output</span></span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-o"</span>, <span class="st" style="color: #20794D;">"--out"</span>), </span>
<span id="cb4-14">      <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"character"</span>, </span>
<span id="cb4-15">      <span class="at" style="color: #657422;">default=</span><span class="fu" style="color: #4758AB;">stdout</span>(), </span>
<span id="cb4-16">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"output file name [default= STDOUT]"</span>, </span>
<span id="cb4-17">      <span class="at" style="color: #657422;">metavar=</span><span class="st" style="color: #20794D;">"character"</span></span>
<span id="cb4-18">     ),</span>
<span id="cb4-19">  <span class="co" style="color: #5E5E5E;"># verbose</span></span>
<span id="cb4-20">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-v"</span>, <span class="st" style="color: #20794D;">"--verbose"</span>), </span>
<span id="cb4-22">      <span class="at" style="color: #657422;">action=</span><span class="st" style="color: #20794D;">"store_true"</span>,</span>
<span id="cb4-23">      <span class="at" style="color: #657422;">default=</span>F</span>
<span id="cb4-24">     )</span>
<span id="cb4-25">)</span>
<span id="cb4-26"> </span>
<span id="cb4-27">opts <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list))</span>
<span id="cb4-28">opts</span></code></pre></div>
</details>
</div>
<p>Things need to be cautious</p>
<ul>
<li>final list, by default, have help function, thus no need to specify <code>-h</code>. To visualize the help page</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list), <span class="at" style="color: #657422;">args =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"--help"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li>long flag option is required.</li>
<li><code>default</code> argument in function <code>make_option</code> must not be NULL, otherwise, the option will not be included in the final list.</li>
<li>There are other useful arguments including <code>dest</code>, <code>callback</code> and <code>metavar</code>. Learn more from</li>
</ul>
<p>Besides package <code>optparse</code>, <code>argparser</code> is another popular package. Please read <a href="https://blog.sellorm.com/2017/12/30/command-line-utilities-in-r-pt-6/">this blog</a> for tutorial.</p>
</section>
<section id="Perl" class="level3">
<h3 class="anchored" data-anchor-id="Perl">Perl</h3>
<p>Perl script takes every argument (after script) from command line into a special array <code>@ARGV</code>. We can easily read first type of options by parsing through <code>@ARGV</code>. This is very similar to <code>commandArgs</code> in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb6-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> file1 [file2 file3...]</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;">This script is to print out first column of each file</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;">It requires at least one input file </span></span>
<span id="cb6-5"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>; <span class="co" style="color: #5E5E5E;"># ensure there are arguments following the script</span></span>
<span id="cb6-9">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb6-10">  <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){ <span class="co" style="color: #5E5E5E;"># go through each input file</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span><span class="st" style="color: #20794D;">[</span><span class="dt" style="color: #AD0000;">$i</span><span class="st" style="color: #20794D;">]</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb6-13">      <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb6-14">      <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@items</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/\t/</span>,<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb6-15">      <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$items</span><span class="st" style="color: #20794D;">[0]</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-16">    }</span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb6-18">  }</span>
<span id="cb6-19">}</span></code></pre></div>
</details>
</div>
<p>In above script, another special variable <code>$0</code> was used. It represents the script name itself (for example we can save above script as “print_col1.pl”). Thus, when the script is not followed by an input file, it will print usage</p>
<blockquote class="blockquote">
<p>print_col1.pl file1 [file2 file3…]<br>
This script is to print out first column of each file It requires at least one input file</p>
</blockquote>
<p>For the second type of options, perl uses a module <code>Getopt</code> to parse options. The following script shows an example to print sequence length based on file format (<a href="https://compgenomr.github.io/book/fasta-and-fastq-formats.html">fasta vs fastq</a>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb7-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">use</span> <span class="fu" style="color: #4758AB;">Getopt::Long</span>;</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> [--format fasta] [--seqN] [--header] file [file2 file3 ...]</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;">this script is to calculate sequence file from fastq/fasta file</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;">--format fasta|fastq # default is fasta</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;">--seqN integer # default is everything</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;">--header # default no header added</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;">output directly to STDOUT as seq_name[tab]length</span></span>
<span id="cb7-10"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$format</span>=<span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>; <span class="co" style="color: #5E5E5E;"># set default as fasta format.</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seqN</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># set default for number of sequence to print (0 here means print all sequences)</span></span>
<span id="cb7-14"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span> = <span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># option variable with default value (false)</span></span>
<span id="cb7-15">GetOptions(</span>
<span id="cb7-16">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">format=s</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$format</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as string (s)</span></span>
<span id="cb7-17">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seqN=i</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$seqN</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as numeric (i)</span></span>
<span id="cb7-18">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">header</span><span class="ot" style="color: #003B4F;">"</span>  =&gt; \<span class="dt" style="color: #AD0000;">$header</span>  <span class="co" style="color: #5E5E5E;"># flag: if --header specified, it will become true</span></span>
<span id="cb7-19">);</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$n</span>;</span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-23">  <span class="dt" style="color: #AD0000;">$n</span>=<span class="dv" style="color: #AD0000;">0</span>;</span>
<span id="cb7-24">}</span>
<span id="cb7-25"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-26">        <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>;</span>
<span id="cb7-27">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-28">        OUTER: <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){</span>
<span id="cb7-29">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$header</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-30">                  <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seq_name</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">seq_len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-31">                }</span>
<span id="cb7-32">                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$file</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span>[<span class="dt" style="color: #AD0000;">$i</span>];</span>
<span id="cb7-33">                <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="dt" style="color: #AD0000;">$file</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-34">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-35">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-36">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-37">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-38">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-39">                                <span class="kw" style="color: #003B4F;">if</span>(<span class="ot" style="color: #003B4F;">/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;/</span>){</span>
<span id="cb7-40">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-41">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-42">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-43">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-44">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-45">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-46">                                                }</span>
<span id="cb7-47">                                        }</span>
<span id="cb7-48">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;//</span>;</span>
<span id="cb7-49">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-50">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-51">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="ot" style="color: #003B4F;">""</span>;</span>
<span id="cb7-52">                                }<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-53">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="dt" style="color: #AD0000;">$seq</span>.<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-54">                                }</span>
<span id="cb7-55">                        }</span>
<span id="cb7-56">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-57">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-58">                }</span>
<span id="cb7-59">                <span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fastq</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-60">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-61">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-62">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$line</span>;</span>
<span id="cb7-63">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-64">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-65">                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-66">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-67">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-68">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-69">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-70">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-71">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-72">                                                }</span>
<span id="cb7-73">                                        }</span>
<span id="cb7-74">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="dt" style="color: #AD0000;">@</span><span class="ot" style="color: #003B4F;">//</span>;</span>
<span id="cb7-75">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-76">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-77">                                        </span>
<span id="cb7-78">                                }<span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-79">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-80">                                }</span>
<span id="cb7-81">                                <span class="dt" style="color: #AD0000;">$line</span>++;</span>
<span id="cb7-82">                        }</span>
<span id="cb7-83">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-84">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-85">                }</span>
<span id="cb7-86">                <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb7-87">        }</span>
<span id="cb7-88">}</span></code></pre></div>
</details>
</div>
<p>For more usage example of <code>Getopt</code>, please refer to its <a href="https://perldoc.perl.org/Getopt/Long.html">perldoc</a> page.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>bash</category>
  <category>perl</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</guid>
  <pubDate>Sat, 22 Aug 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.source-data.com/wp-content/uploads/2019/11/options_0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transition from dplyr to data.table</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</link>
  <description><![CDATA[ 



<p><code>dplyr</code> and <code>tidyr</code> have totally changed the way we code in R. I particularly love the pipe <code>%&gt;%</code> which comes from <code>magrittr</code> package and makes the code easy to read and understand. While I am obessed with simplicity of <code>dplyr</code> coding style, I am also fascinated with how fast <code>data.table</code> wrangles data. Below is an example showing the speed difference using <code>dplyr</code> and <code>data.table</code> in a user function <code>gene_lookup</code> for one of my shiny app.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># dplyr version</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb1-3">        old_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup_old</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb1-4">})</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># 2.727   0.122   2.898  </span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># data.table version</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb2-3">        new_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb2-4">})</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># 0.505   0.054   0.293 </span></span></code></pre></div>
</details>
</div>
<p>Last year, Hadley Wickham and his team launched a hybrid package <a href="https://github.com/tidyverse/dtplyr"><code>dtplyr</code></a> which uses the syntax of <code>dplyr</code> but runs <code>data.table</code> on the backend. It is a brilliant idea and I believe a lot of dplyr fan would love it, but dtplyr is still slower than data.table. Considering speed is the highest priority in some applications, I would like to switch to data.table completely. It took me only half day to get used to data.table syntax anyway. Plus, <a href="https://martinctc.github.io/blog/using-data.table-with-magrittr-pipes-best-of-both-worlds/">this post</a>, which shows using pipe in data.table, makes this transition more smooth and pleasant.</p>
<p>In this blog, I will list <code>data.table</code> and <code>dplyr</code>/<code>tidyr</code> syntax back to back, providing an easy reference for dplyr users who want to quickly pick up <code>data.table</code>.</p>
<section id="read-file" class="level3">
<h3 class="anchored" data-anchor-id="read-file">read file</h3>
<p><code>read_delim</code> and <code>read_csv</code> are the two functions commonly used to read-in data from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_delim</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>, <span class="at" style="color: #657422;">delim=</span><span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb3-2">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_df)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "spec_tbl_df" "tbl_df"      "tbl"         "data.frame" </code></pre>
</div>
</div>
<p>The equivalent command in <code>data.table</code> is <code>fread</code>. Like “read_delim”, <code>fread</code> automatically searches for header and defines column data type, but it is faster and automatically searches for separators as well.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_dt)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.table" "data.frame"</code></pre>
</div>
</div>
<p>To switch between tibble and data.table class, use <code>tbl_df</code> to convert data.table to tibble, and <code>as.data.table()</code> to convert tibble/data.frame to data.table.</p>
</section>
<section id="subset-rows" class="level3">
<h3 class="anchored" data-anchor-id="subset-rows">subset rows</h3>
<p>Subsetting rows is done by the function <code>filter</code> from <code>dplyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb7-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model))</span></code></pre></div>
</details>
</div>
<p>Subsetting rows in <code>data.table</code> is very similar to the base R, placing boolean vector at row index. The index separator <code>,</code> can even be omitted. Also if boolean expression contains column variables, we can use the variable names directly instead of using df$var.</p>
<p>Pipe can be used in the format of <code>%&gt;% .[]</code> to connect the code.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb8-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  .[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model)]</span></code></pre></div>
</details>
</div>
</section>
<section id="subset-columns" class="level3">
<h3 class="anchored" data-anchor-id="subset-columns">subset columns</h3>
<p>Subsetting columns is done by the function <code>select</code> from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb9-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb9-6">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"ar"</span>))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses variable names to subset columns. Like base R, the variable name vector is a character class placed at column index position. Index separator <code>,</code> cannot be omitted here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb10-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  .[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"model"</span>,<span class="st" style="color: #20794D;">"mpg"</span>,<span class="st" style="color: #20794D;">"cyl"</span>)]</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb10-6">col_ar <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt)[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"ar"</span>,<span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt))]</span>
<span id="cb10-7">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-8">  .[,<span class="sc" style="color: #5E5E5E;">-</span>..col_ar]</span></code></pre></div>
</details>
</div>
</section>
<section id="add-new-variable" class="level3">
<h3 class="anchored" data-anchor-id="add-new-variable">add new variable</h3>
<p><code>dplyr</code> uses <code>mutate</code> to add column.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># assign car size based on the weight</span></span>
<span id="cb11-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb11-4">    wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb11-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb11-6">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span></span>
<span id="cb11-7">  ))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses <code>:=</code> to assign values to column variables. Be aware that, different from <code>mutate</code> which returns the updated data frame without assignment, data.table is modified by reference and returned invisibly when <code>:=</code> or any <code>set*</code> functions are used. If you do not want to change the original data.table, take a copy first <code>DT2 = copy(DT)</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">untidy_mtcars_dt2<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">copy</span>(untidy_mtcars_dt)</span>
<span id="cb12-2">untidy_mtcars_dt2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">  .[,size<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="fu" style="color: #4758AB;">case_when</span>(wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb12-4">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb12-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span>)]</span></code></pre></div>
</details>
</div>
<p><code>:=</code> can also be used for multiple column assignment and functional form. More details refer to the <a href="https://www.rdocumentation.org/packages/data.table/versions/1.12.8/topics/%3A%3D">usage manual</a></p>
</section>
<section id="pivot" class="level3">
<h3 class="anchored" data-anchor-id="pivot">pivot</h3>
<p>Table pivoting is done by the functions <code>spread</code> and <code>gather</code> (or <code>pivot_wider</code> and <code>pivot_longer</code>) from <code>tidyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># wide to long (gather) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-2">tidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">value=</span><span class="st" style="color: #20794D;">"tmp"</span>,automatic,manual) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># wide to long (pivot_longer) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-8">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>),<span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 12
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb trans…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     4     4 manual 
 2 Mazda RX…  21       6  160    110  3.9   2.88  17.0     0     4     4 manual 
 3 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     4     1 manual 
 4 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1 automa…
 5 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2 automa…
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1 automa…
 7 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4 automa…
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2 automa…
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2 automa…
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4 automa…
# … with 22 more rows, and abbreviated variable name ¹​transmission
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># long to wide (spread) -- make transmission to group automatic and manual</span></span>
<span id="cb15-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">spread</span>(transmission, tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># long to wide (pivot_wider) -- </span></span>
<span id="cb17-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>transmission, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
<p>The <code>data.table</code> uses <code>dcast</code> for long-to-wide and <code>melt</code> for wide-to-long pivoting.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># wide to long (melt) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb19-2">tidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">melt</span>(<span class="at" style="color: #657422;">measure.vars=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>), <span class="at" style="color: #657422;">variable.name=</span><span class="st" style="color: #20794D;">"transmission"</span>, <span class="at" style="color: #657422;">value.name=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  .[tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-5">  .[,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"tmp"</span>)]</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># long to wide (dcast) -- split transmission column to automatic manual</span></span>
<span id="cb19-8">tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-9">  .[, tmp<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb19-10"></span>
<span id="cb19-11">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span>   </span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;">dcast</span>(model <span class="sc" style="color: #5E5E5E;">+</span> mpg <span class="sc" style="color: #5E5E5E;">+</span> cyl <span class="sc" style="color: #5E5E5E;">+</span> disp <span class="sc" style="color: #5E5E5E;">+</span> hp <span class="sc" style="color: #5E5E5E;">+</span> drat <span class="sc" style="color: #5E5E5E;">+</span> wt <span class="sc" style="color: #5E5E5E;">+</span> qsec <span class="sc" style="color: #5E5E5E;">+</span> vs <span class="sc" style="color: #5E5E5E;">+</span> gear <span class="sc" style="color: #5E5E5E;">+</span> carb <span class="sc" style="color: #5E5E5E;">~</span>transmission, <span class="at" style="color: #657422;">value.var=</span><span class="st" style="color: #20794D;">"tmp"</span>)</span>
<span id="cb19-13"></span>
<span id="cb19-14">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-15">  .[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>) <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">replace</span>(.SD,<span class="fu" style="color: #4758AB;">is.na</span>(.SD),<span class="dv" style="color: #AD0000;">0</span>), .SDcols<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>)]</span></code></pre></div>
</details>
</div>
</section>
<section id="merge" class="level3">
<h3 class="anchored" data-anchor-id="merge">merge</h3>
<p><code>dplyr</code> uses SQL-like join functions to merge two or more tables together. There are <code>inner_join</code>, <code>full_join</code>, <code>left_join</code>, <code>right_join</code>, <code>semi_join</code> and <code>anti_join</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># generate two tables</span></span>
<span id="cb20-2">tidy_mtcars_df_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl, hp, vs)</span>
<span id="cb20-4">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">select</span>(model, disp, qsec, transmission, gear, carb)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb20-8"><span class="fu" style="color: #4758AB;">left_join</span>(</span>
<span id="cb20-9">  tidy_mtcars_df_engine,</span>
<span id="cb20-10">  tidy_mtcars_df_other</span>
<span id="cb20-11">)</span></code></pre></div>
</details>
</div>
<p><code>data.table</code>, from the other end, use <code>merge</code> for all the joins. By default, <code>merge</code> is <code>inner_join</code>, but we can adjust <code>by</code> variables to fulfill other join functions.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tidy_mtcars_dt_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_engine <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-2">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_other <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># inner_join</span></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-6">  tidy_mtcars_dt_engine,</span>
<span id="cb21-7">  tidy_mtcars_df_other,</span>
<span id="cb21-8">  <span class="at" style="color: #657422;">all=</span><span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb21-9">)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb21-12"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-13">  tidy_mtcars_dt_engine,</span>
<span id="cb21-14">  tidy_mtcars_df_other,</span>
<span id="cb21-15">  <span class="at" style="color: #657422;">all.x=</span>T</span>
<span id="cb21-16">)</span>
<span id="cb21-17"></span>
<span id="cb21-18"><span class="co" style="color: #5E5E5E;"># right_join</span></span>
<span id="cb21-19"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-20">  tidy_mtcars_dt_engine,</span>
<span id="cb21-21">  tidy_mtcars_df_other,</span>
<span id="cb21-22">  <span class="at" style="color: #657422;">all.y=</span>T</span>
<span id="cb21-23">)</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;"># full_join</span></span>
<span id="cb21-26"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-27">  tidy_mtcars_dt_engine,</span>
<span id="cb21-28">  tidy_mtcars_df_other,</span>
<span id="cb21-29">  <span class="at" style="color: #657422;">all=</span>T</span>
<span id="cb21-30">)</span></code></pre></div>
</details>
</div>
</section>
<section id="group-and-summarize" class="level3">
<h3 class="anchored" data-anchor-id="group-and-summarize">group and summarize</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>summarize</code> to calculate the new variable based on the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># calculate weight mean for each group of differrent cylinder number</span></span>
<span id="cb22-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
    cyl wt_mean
  &lt;dbl&gt;   &lt;dbl&gt;
1     4    2.29
2     6    3.12
3     8    4.00</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>by</code> to specify the group, and <code>=</code> to summarize.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  .[,.(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)),by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl  wt_mean
1:   8 3.999214
2:   4 2.285727
3:   6 3.117143</code></pre>
</div>
</div>
</section>
<section id="group-and-subsetting" class="level3">
<h3 class="anchored" data-anchor-id="group-and-subsetting">group and subsetting</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>slice</code> to subset rows within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb26-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 13
  model        mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
1 Merc 240D   24.4     4  147.    62  3.69  3.19  20       1     4     2       1
2 Valiant     18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
3 Lincoln C…  10.4     8  460    215  3     5.42  17.8     0     3     4       1
# … with 1 more variable: manual &lt;dbl&gt;, and abbreviated variable name
#   ¹​automatic
# ℹ Use `colnames()` to see all variable names</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>.SD</code> and <code>by</code> to subset within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb28-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-3">  .[,.SD[<span class="fu" style="color: #4758AB;">which.max</span>(wt)], by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl               model  mpg  disp  hp drat    wt  qsec vs gear carb
1:   8 Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0    3    4
2:   4           Merc 240D 24.4 146.7  62 3.69 3.190 20.00  1    4    2
3:   6             Valiant 18.1 225.0 105 2.76 3.460 20.22  1    3    1
   automatic manual
1:         1      0
2:         1      0
3:         1      0</code></pre>
</div>
</div>
<p>For more <code>.SD</code> reading, refer to https://cran.r-project.org/web/packages/data.table/vignettes/datatable-sd-usage.html</p>
</section>
<section id="last-bits" class="level3">
<h3 class="anchored" data-anchor-id="last-bits">last bits</h3>
<p>There are other accessory functions useful in <code>dplyr</code> and some of them have corresponding functions in <code>data.table</code> too.</p>
<div class="cell">
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> usage </th>
   <th style="text-align:left;"> dplyr </th>
   <th style="text-align:left;"> data.table </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> get unique rows </td>
   <td style="text-align:left;"> distinct() </td>
   <td style="text-align:left;"> unique() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> sort by column(s) </td>
   <td style="text-align:left;"> arrange() </td>
   <td style="text-align:left;"> setorder()/setorderv() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> change column names </td>
   <td style="text-align:left;"> rename(new=old) </td>
   <td style="text-align:left;"> setnames(old, new) </td>
  </tr>
</tbody>
</table>

</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>data wrangle</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</guid>
  <pubDate>Thu, 25 Jun 2020 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Rdatatable/data.table/master/.graphics/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>ML pipeline with tidymodels vs. caret</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</link>
  <description><![CDATA[ 



<p>As a DS beginner, I first came across ML in R by studying the book <a href="https://bradleyboehmke.github.io/HOML/">Hands-On Machine Learning with R</a>. The book mainly focuses on the package <code>caret</code> with general introductions to packages like <code>recipe</code> and <code>h2o</code>. Most examples use the workflow in which feature engineering is performed by <code>recipe</code> and the modeling/learning part is done using <code>caret</code>.</p>
<p>It was a great pleasure to take the <a href="https://www.tidymodels.org/">tidymodels</a> workshop hosted by <a href="https://twitter.com/apreshill">Dr.&nbsp;Alison Hill</a> last week. <code>tidymodels</code> was recently launched as a collection of packages for ML using tidyverse principles. It is built on <code>recipes</code> for feature engineering and <code>parsnip</code> as the major modeling package, and links ML steps together with <code>workflow</code>.</p>
<p>In this post, I am going to present the general ML frameworks using <code>caret</code> and <code>tidymodels</code>, independently. The data used as an example is “Watson churn data” from <a href="https://modeldata.tidymodels.org/reference/index.html">modeldata</a></p>
<section id="required-libraries-and-data" class="level2">
<h2 class="anchored" data-anchor-id="required-libraries-and-data">0. required libraries and data</h2>
<p>Since tidymodels is a collection of packages like <code>tidyverse</code>, we can just use <code>library(tidymodels)</code> to load all the required libraries for the tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<p>For the <code>caret</code> pipeline, additional helper pacakges, like <code>recipes</code> and <code>rsample</code>, were needed to process the data. Most of those packages are already collected in the <code>tidymodels</code> pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(caret)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>For the data, I used “Watson churn data” from modeldata which is also a part of <code>tidymodels</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(modeldata)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">data</span>(wa_churn)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># quick view and summarize data</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">glimpse</span>(wa_churn)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># visdat::vis_miss(wa_churn)</span></span>
<span id="cb4-6">Hmisc<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">describe</span>(wa_churn)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># relevel factors</span></span>
<span id="cb4-9">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">churn=</span><span class="fu" style="color: #4758AB;">relevel</span>(churn, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-11">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">multiple_lines=</span><span class="fu" style="color: #4758AB;">relevel</span>(multiple_lines, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No phone service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">internet_service=</span><span class="fu" style="color: #4758AB;">relevel</span>(internet_service, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-13">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_security=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_security, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_backup=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_backup, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-15">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">device_protection=</span><span class="fu" style="color: #4758AB;">relevel</span>(device_protection, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-16">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tech_support=</span><span class="fu" style="color: #4758AB;">relevel</span>(tech_support, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_tv=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_tv, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_movies=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_movies, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-19">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">contract=</span><span class="fu" style="color: #4758AB;">relevel</span>(contract, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"Month-to-month"</span>))</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;"># to simplify the case here, we are going to remove missing variable</span></span>
<span id="cb4-22">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-23">        na.omit      </span></code></pre></div>
</details>
</div>
</section>
<section id="data-split" class="level2">
<h2 class="anchored" data-anchor-id="data-split">1. data split</h2>
<p>Both frameworks use <code>rsample::initial_split</code> to split the data into training and testing data. Here, we choose the standard 7:3 split between training and testing, with stratification on the target variable “churn”</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># split</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb5-3">data_splits <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"churn"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb5-4">data_train<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">training</span>(data_splits)</span>
<span id="cb5-5">data_test<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">testing</span>(data_splits)</span></code></pre></div>
</details>
</div>
<p>To stratify on the numeric variables, we can add the <code>breaks</code> parameter.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"tenure"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">breaks=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="feature-engineer" class="level2">
<h2 class="anchored" data-anchor-id="feature-engineer">2. feature engineer</h2>
<p>General <a href="http://www.feat.engineering/">feature engineering</a> steps include</p>
<ul>
<li>removing variables with zero variance or near zero variance: <code>step_zv</code>, <code>step_nzv</code></li>
<li>lumping nominal variables: <code>step_other</code></li>
<li>normalizing (scale + center) numeric variables (specific for regression-based models): <code>step_scale</code>, <code>step_center</code>, <code>step_normalize</code></li>
<li>encoding nominal variables to dummy features: <code>step_novel</code> + <code>step_dummy</code>, <code>step_integer</code></li>
<li>value transformation to fit normal distribution: <code>step_log</code>, <code>step_YeoJohnson</code>, <code>step_BoxCox</code></li>
<li>feature dimension reduction: <code>step_pca</code></li>
<li>dealing with missing values with imputation: <code>step_medianimpute</code>, <code>step_knnimpute</code>, <code>step_bagimpute</code></li>
</ul>
<p>Feature engineering is done by <code>recipes</code> in both <code>tidymodels</code> and <code>caret</code>. The functions in <code>recipes</code> starts with <code>step_*</code> and create a blueprint for feature engineering. The complete list of step is at https://tidymodels.github.io/recipes/reference/index.html</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(churn <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">        <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">        <span class="fu" style="color: #4758AB;">step_nzv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())  <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-4">        <span class="fu" style="color: #4758AB;">step_novel</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span></code></pre></div>
</details>
</div>
<p>The blueprint will not change the data until it is <code>fit</code> in the modeling step. We can use <code>prep</code> and <code>bake</code> to see “transformed” data in data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">        <span class="fu" style="color: #4758AB;">prep</span>(wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">        <span class="fu" style="color: #4758AB;">bake</span>(wa_churn)</span></code></pre></div>
</details>
</div>
<p>One reason to use <code>recipe</code> is to avoid <a href="https://www.quora.com/Whats-data-leakage-in-data-science">data leakage</a>. Data leakage is when information from outside the training data set is used to create the model.</p>
</section>
<section id="resample" class="level2">
<h2 class="anchored" data-anchor-id="resample">3. resample</h2>
<p>Resampling methods split the training data into additional sets. It will generate train set and validation set. Typical resampling method include cross-validation (cv), repeated cross-validation (repeated cv), leave-one-out and bootstrapping (with replacement).</p>
<p>We can use <code>rsample::vfold_cv</code> for both caret and tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># 10 fold cross validation stratified on target variable churn</span></span>
<span id="cb9-2">cv_folds <span class="ot" style="color: #003B4F;">=</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vfold_cv</span>(<span class="at" style="color: #657422;">data=</span>data_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">strata=</span>churn)</span></code></pre></div>
</details>
</div>
<p>However to make above <code>cv_folds</code> compatible with <code>caret</code>, we need to used <code>rsample2caret</code> to convert a <code>trainControl</code> list</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cv_folds_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rsample2caret</span>(cv_folds)</span>
<span id="cb10-2">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(</span>
<span id="cb10-3">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>,</span>
<span id="cb10-4">        <span class="at" style="color: #657422;">verboseIter =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb10-5">        <span class="at" style="color: #657422;">classProbs =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-6">        <span class="at" style="color: #657422;">summaryFunction =</span> twoClassSummary,</span>
<span id="cb10-7">        <span class="at" style="color: #657422;">returnResamp =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-8">        <span class="at" style="color: #657422;">savePredictions =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-9">        <span class="at" style="color: #657422;">index =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>index,</span>
<span id="cb10-10">        <span class="at" style="color: #657422;">indexOut =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>indexOut</span>
<span id="cb10-11">  )</span></code></pre></div>
</details>
</div>
<p>Or we can simply use caret function <code>trainControl</code> function to generate split. However, no stratify option is available here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>, <span class="at" style="color: #657422;">number=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="hyperparameters-grid" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameters-grid">4. hyperparameters grid</h2>
<p>A hyperparameter is a parameter whose value is set before the learning process begins. It is distinguished from other parameters by the fact that it is not used for fitting the machine to the training set. For different models, there are a different number of hyperparameters you can tune. Here I choose to use random forest to model the data. The hyperparameters for random forest from <code>ranger</code> include</p>
<ol type="1">
<li>the number of trees – <code>num.trees</code> or <code>trees</code></li>
<li>depth of tree – <code>max.depth</code></li>
<li>number of features to consider at every split – <code>mtry</code></li>
<li>minimum number of samples required to split a node – <code>min.node.size</code> or <code>min_n</code></li>
<li>whether using boostrapping to select samples for training – <code>replace</code>.</li>
<li>fraction of observation to sample – <code>sample.fraction</code>. Specifying <code>sample.fraction</code> requires <code>replace</code> being set as TRUE</li>
</ol>
<p>A rule of thumb to start is</p>
<ul>
<li><code>num.trees</code> start with 10x p (p means number of features).</li>
<li><code>max.depth</code></li>
<li><code>mtry</code>: sqrt(p) for classification and p/3 for regression</li>
<li><code>min.node.size</code> default values of 1 for classification and 5 for regression</li>
<li><code>replace</code> and <code>sample.fraction</code>: Default is 1 for sampling with replacement and 0.632 for sampling without replacement.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">hyp_grid <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb12-2">        <span class="at" style="color: #657422;">trees =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">500</span>,<span class="dv" style="color: #AD0000;">1000</span>),</span>
<span id="cb12-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb12-5">)</span></code></pre></div>
</details>
</div>
<p>The hyperparameters can be checked by function <code>args(rand_forest)</code></p>
<p><code>rf</code> method (from RandomForest) for <code>caret</code> has only one hyperparameter (mtry) by default.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">hyp_grid_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">mtry=</span><span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-3">)</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-model" class="level2">
<h2 class="anchored" data-anchor-id="fit-model">5. fit model</h2>
<p>Here is the step where tidymodel and caret start to diverge in syntax. Typically, tidymodel builds a model using <code>workflow</code> pipe which specifies formular/recipe and model, while caret uses <code>train</code> to fit model.</p>
<p><strong>tidymodel</strong></p>
<p>default version of model fit <code>fit_resamples</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># without grid_tune -&gt; fit_resamples() at train</span></span>
<span id="cb14-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-3">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"permutation"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-4">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-7">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb14-11">default_tm_fit<span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-12">        <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb14-13">                <span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb14-14">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_resamples</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb14-15">                )</span></code></pre></div>
</details>
</div>
<p>grid version of model fit <code>grid_tune</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># with grid_tune -&gt; set tune() at model, use tune_grid() at train</span></span>
<span id="cb15-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>(</span>
<span id="cb15-3">                <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-4">                <span class="at" style="color: #657422;">trees=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-5">                <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>()</span>
<span id="cb15-6">        ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-7">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"impurity"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-8">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-11">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-12">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb15-15">grid_tm_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-16">        <span class="fu" style="color: #4758AB;">tune_grid</span>(<span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb15-17">            <span class="at" style="color: #657422;">grid =</span> hyp_grid,</span>
<span id="cb15-18">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_grid</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb15-19">            )</span></code></pre></div>
</details>
</div>
<p>Notes: 1. <code>control</code> specification will be <code>control_grid()</code> in <code>grid_tune()</code> 2. <code>grid</code> parameter here can also be a integer which test for top N parameters.</p>
<p>Follow the thread https://github.com/tidymodels/parsnip/issues/235 to find how to print out default hyperparameters.</p>
<p><strong>caret</strong></p>
<p>default version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># without hyp grid</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb16-3">default_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb16-4">        rec,</span>
<span id="cb16-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb16-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb16-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb16-8">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb16-9">)</span></code></pre></div>
</details>
</div>
<p>grid version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># with grid --- tuneGrid</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb17-3">grid_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb17-4">        rec,</span>
<span id="cb17-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb17-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb17-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">tuneGrid =</span> hyp_grid_cr,</span>
<span id="cb17-9">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb17-10">)</span></code></pre></div>
</details>
</div>
</section>
<section id="collect-metrics" class="level2">
<h2 class="anchored" data-anchor-id="collect-metrics">6. collect metrics</h2>
<p>Metrics are used to determine how good the model fit. For classification problem, accuracy and ROC/AUC are commonly used. For regression problem, RSEM is the most commonly used approach.</p>
<p>We used <code>collect_metrics</code> in <code>tidymodels</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># for default model</span></span>
<span id="cb18-2">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># for grid tune model</span></span>
<span id="cb18-5">grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
</div>
<p>list <code>results</code> stores metrics for <code>caret</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results</span></code></pre></div>
</details>
</div>
<p>From the results, we can tell that <code>train</code> fit 3 hyperparameters by default.</p>
</section>
<section id="collect-prediction-for-training-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-training-data">7. collect prediction for training data</h2>
<p>Besides model metrics, we also care about what predicted value of target variable is in training data.</p>
<p><strong>tidymodels</strong></p>
<p>To see predicted target value for data_train, we can use <code>collect_predictions</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb20-6">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb20-7">                default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_predictions</span>(), churn, .pred_Yes</span>
<span id="cb20-8">        )</span>
<span id="cb20-9">)</span></code></pre></div>
</details>
</div>
<p><em>Notes: collect_predictions() only works when specifying <code>save_pred = TRUE</code> in control.</em></p>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb21-5">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb21-6">                default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df, </span>
<span id="cb21-7">                obs, Yes</span>
<span id="cb21-8">        )</span>
<span id="cb21-9">)</span></code></pre></div>
</details>
</div>
<p><em>For both caret and tidymodels, it is possible that each row of the original data point might be represented multiple times per tuning paramete if boostrap or repeated cv is used</em></p>
</section>
<section id="collect-prediction-for-testing-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-testing-data">8. collect prediction for testing data</h2>
<p>For default fit, only one set of hyperparameters is specified, thus we can just apply the fitted model to <code>data_test</code>. However, for grid fit, we end up with multiple sets of hyperparameters. Thus, before fitting the model, we need to pick the best set of hyperparameters based on metrics on training data (which is summarized using specified rsample method), then apply the best model to test_data</p>
<p><strong>tidymodels</strong></p>
<p><code>last_fit</code> is a function that is applied to workflow and fits to test data. By default, it generates predictions that can be reported by <code>collect_prediction</code> (no need to specify <code>control</code> in the fit). We can also use <code>collect_metrics</code> to check the metrics in testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb22-2">default_last_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">        <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb22-4"></span>
<span id="cb22-5">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb22-7"></span>
<span id="cb22-8">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-9">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p>To select best set of hyperparameters from <code>grid_tune</code>, we use <code>select_best</code> by specifying which metrics to use. Then we apply this set of hyperparameters to original workflow by <code>finalize_workflow</code>. Finally, like default, apply <code>last_fit</code> to the best workflow and get predictions and metrics for the testing data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># grid tune</span></span>
<span id="cb23-2">best_hyp <span class="ot" style="color: #003B4F;">&lt;-</span> grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-3">        <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"roc_auc"</span>)</span>
<span id="cb23-4"></span>
<span id="cb23-5">best_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-6">        <span class="fu" style="color: #4758AB;">finalize_workflow</span>(best_hyp)</span>
<span id="cb23-7"></span>
<span id="cb23-8">grid_last_fit <span class="ot" style="color: #003B4F;">&lt;-</span> best_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-9">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb23-10"></span>
<span id="cb23-11">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-12">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb23-13"></span>
<span id="cb23-14">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-15">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<p>The <code>predict</code> function can be directly applied to fitted model to test data. For grid fit, it will automatically detect the best hyperparameters (here mtry=5) and apply it to the testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb24-2">test_prediction <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb24-3">    default_cr_fit,</span>
<span id="cb24-4">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb24-5">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb24-11"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb24-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb24-13">test_prediction <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># best hyp</span></span>
<span id="cb25-3">grid_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">        <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(ROC))</span>
<span id="cb25-5"></span>
<span id="cb25-6">test_prediction2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb25-7">    grid_cr_fit,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb25-9">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-11">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb25-15"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction2, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb25-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb25-17">test_prediction2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-19">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-20">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
</section>
<section id="importance-of-variables" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-variables">9. importance of variables</h2>
<p>Lastly, we can use fit result to find most important variables by <code>vip</code> package or caret function <code>varImp</code>. Be aware that, for <code>tidymodels</code> different <code>importance</code> specified in the model will result in different ranks</p>
<p><strong>tidymodels</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pull_workflow_fit</span>(default_last_fit<span class="sc" style="color: #5E5E5E;">$</span>.workflow[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb26-2">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit)<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb26-3">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit, <span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"point"</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;"># model-specific variable importance scores are currently not available for objects of class "_rangermodel_fit"</span></span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">varImp</span>(default_cr_fit, <span class="at" style="color: #657422;">scale =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)<span class="sc" style="color: #5E5E5E;">$</span>importance <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span></code></pre></div>
</details>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The following table summarizes the ML workflow using caret versus tidymodels:</p>
</section>
<section id="thank-you" class="level2">
<h2 class="anchored" data-anchor-id="thank-you">Thank you</h2>
<p>Special thanks to <a href="https://www.linkedin.com/in/amygoodwindavies/">Amy Goodwin Davies</a> who helped editing and proof-reading this post!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>ML</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</guid>
  <pubDate>Thu, 30 Apr 2020 04:00:00 GMT</pubDate>
</item>
<item>
  <title>External persistent data I/O using ShinyApp</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</link>
  <description><![CDATA[ 



<p>Shiny App is a fantastic application in Rstudio and makes the data processing more accessible (and fun!). Most easy shiny apps are made to represent data based on a given user input which is read into memory or temporal file by R and spit out tables or figures in the same process. However, to make an app that need to keep the user input data for persistent storage and present in the future process require some external data I/O.</p>
<p>One of example app is survey app, in which user inputs will be accumulated for future presentation. Shiny rstudio presents this topic in an <a href="https://shiny.rstudio.com/articles/persistent-data-storage.html">article</a> written in 2017. However, my recent trial of those methods caused some troubles, either the packages/functions are deprecated or more strict authorization applied. In this post, I am going to introduce three persistent storage I have tried in my recent projects and complement that 2017 article with the updates.</p>
<section id="data-input-app" class="level2">
<h2 class="anchored" data-anchor-id="data-input-app">Data input app</h2>
<p>To start, I want to mention a <a href="https://gupsych.github.io/tquant/data-input.html">tutorial</a> on how to make survey app. In the tutorial, it mentioned how to read, save and re-load user input data from shiny app on a local machine. The critical part include:</p>
<ul>
<li>Create a table field to store each widget input (keep widget <code>inputId</code> and table field name same)</li>
<li>Save each user input data with a unique name in provided storage directory (<code>sprintf("%s_%s.rds", as.integer(Sys.time()), digest::digest(data))</code>)<br>
</li>
<li>Reload data file by file and field by field.<br>
</li>
<li>Reset survey by <code>update</code> widget</li>
</ul>
<p>In the tutorial example, the “provided storage directory” is in a local machine. Here I am going to introduce three external storage methods (AWS, dropbox and google spreadsheet) in the context of this dummy <a href="https://sckinta.shinyapps.io/SpeakerSignup/">survey app</a> I experiment with for Rladies Philly mentor-ship program.</p>
<p>In this dummy app, following widgets were made.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># define global options</span></span>
<span id="cb1-2">types<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Speaker"</span>,<span class="st" style="color: #20794D;">"Mentor"</span>)</span>
<span id="cb1-3">expertises<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academia to industry transition"</span>,<span class="st" style="color: #20794D;">"Transition to new field/industry"</span>,<span class="st" style="color: #20794D;">"Project/team management"</span>,<span class="st" style="color: #20794D;">"Making data science more accessible"</span>,<span class="st" style="color: #20794D;">"Working with big datasets"</span>,<span class="st" style="color: #20794D;">"Language research"</span>,<span class="st" style="color: #20794D;">"Data cleaning"</span>,<span class="st" style="color: #20794D;">"Capacity building"</span>,<span class="st" style="color: #20794D;">"Global health"</span>,<span class="st" style="color: #20794D;">"Data visualization"</span>,<span class="st" style="color: #20794D;">"Package creation"</span>,<span class="st" style="color: #20794D;">"Geospatial science"</span>,<span class="st" style="color: #20794D;">"Ecological modeling"</span>,<span class="st" style="color: #20794D;">"Mental health"</span>,<span class="st" style="color: #20794D;">"Building scalable tools"</span>,<span class="st" style="color: #20794D;">"Reproducible research"</span>,<span class="st" style="color: #20794D;">"App development"</span>)</span>
<span id="cb1-4">employment<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academic"</span>,<span class="st" style="color: #20794D;">"Pharmaceutical"</span>,<span class="st" style="color: #20794D;">"Financial"</span>,<span class="st" style="color: #20794D;">"Business"</span>,<span class="st" style="color: #20794D;">"Research"</span>,<span class="st" style="color: #20794D;">"Quality assurance"</span>,<span class="st" style="color: #20794D;">"Government/public sector"</span>)</span>
<span id="cb1-5">meets<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"In-person"</span>,<span class="st" style="color: #20794D;">"Remote (e.g. by phone or online)"</span>)</span>
<span id="cb1-6">genders<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"She/her"</span>, <span class="st" style="color: #20794D;">"He/him"</span>, <span class="st" style="color: #20794D;">"They/them"</span>,<span class="st" style="color: #20794D;">"Other"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># define user input widgets, put inputId into a field vector for late saveData/loadData</span></span>
<span id="cb1-10">fields <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"gender_wig"</span>, <span class="st" style="color: #20794D;">"linkedin_wig"</span>, <span class="st" style="color: #20794D;">"photo_wig"</span>,</span>
<span id="cb1-11">            <span class="st" style="color: #20794D;">"type_wig"</span>, <span class="st" style="color: #20794D;">"expertise_wig"</span>, <span class="st" style="color: #20794D;">"employment_wig"</span>, <span class="st" style="color: #20794D;">"meet_wig"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># user input widgets</span></span>
<span id="cb1-14">name_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"Name:"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-15">gender_wig  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;">"gender_wig"</span>, </span>
<span id="cb1-17">        <span class="st" style="color: #20794D;">"Pronouns:"</span>,</span>
<span id="cb1-18">        genders, </span>
<span id="cb1-19">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb1-20">        <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"none"</span></span>
<span id="cb1-21">)</span>
<span id="cb1-22">linkedin_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"linkedin_wig"</span>,<span class="st" style="color: #20794D;">"LinkedIn Profile Link:"</span>,<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-23">photo_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"photo_wig"</span>, <span class="st" style="color: #20794D;">"Your photo (eg. .jpeg, .png)"</span>, <span class="at" style="color: #657422;">accept =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"jpeg"</span>,<span class="st" style="color: #20794D;">"png"</span>))</span>
<span id="cb1-24">type_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-25">        <span class="st" style="color: #20794D;">"type_wig"</span>,</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;">"Available as mentor and/or speaker?"</span>, </span>
<span id="cb1-27">        types</span>
<span id="cb1-28">)</span>
<span id="cb1-29">expertise_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-30">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"expertise_wig"</span>,</span>
<span id="cb1-31">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Areas of expertise"</span>, </span>
<span id="cb1-32">        <span class="at" style="color: #657422;">choices =</span>  expertises,</span>
<span id="cb1-33">        <span class="at" style="color: #657422;">multiple =</span> T,</span>
<span id="cb1-34">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-35">)</span>
<span id="cb1-36">employment_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-37">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"employment_wig"</span>,</span>
<span id="cb1-38">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Primary type of employment"</span>, </span>
<span id="cb1-39">        <span class="at" style="color: #657422;">choices =</span>  employment,</span>
<span id="cb1-40">        <span class="at" style="color: #657422;">multiple =</span> F,</span>
<span id="cb1-41">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-42">)</span>
<span id="cb1-43">meet_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-44">        <span class="st" style="color: #20794D;">"meet_wig"</span>,</span>
<span id="cb1-45">        <span class="st" style="color: #20794D;">"If you are willing to serve as a mentor, </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">what is your preferred method of communication with your mentees?"</span>, </span>
<span id="cb1-46">        meets</span>
<span id="cb1-47">)</span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;"># button widgets</span></span>
<span id="cb1-50">clear_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"clear"</span>, <span class="st" style="color: #20794D;">"Clear Form"</span>)</span>
<span id="cb1-51">submit_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"submit"</span>, <span class="st" style="color: #20794D;">"Submit"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="aws" class="level2">
<h2 class="anchored" data-anchor-id="aws">AWS</h2>
<p>In 2017 rstudio article, <code>{aws.s3}</code> package is used for communication between app and AWS.S3 external database. <code>{aws.s3}</code> can be installed through.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"aws.s3"</span>, <span class="at" style="color: #657422;">repos =</span> <span class="st" style="color: #20794D;">"https://cloud.R-project.org"</span>)</span></code></pre></div>
</details>
</div>
<p><em>When I was making the app, the CRAN repo was orphan. The <a href="https://github.com/cloudyr/aws.s3">github repo of aws.s3</a> could not easily be installed while publishing the app on shinyapps.io or rstudio connect, because their github repo missed creator assignment in DESCRIPTION. Also Now it is back to normal with new <a href="https://github.com/cloudyr/aws.s3/issues/335">commit</a>.</em></p>
<section id="authentication" class="level4">
<h4 class="anchored" data-anchor-id="authentication">Authentication</h4>
<p>Next step is to set up aws.s3, same as 2017 rstudio artical, use the code below to set up in R</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">s3BucketName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"&lt;bucket_name&gt;"</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="st" style="color: #20794D;">"AWS_ACCESS_KEY_ID"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_ACCESS_KEY_ID&gt;"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;">"AWS_SECRET_ACCESS_KEY"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_SECRET_ACCESS_KEY&gt;"</span>,</span>
<span id="cb3-4">           <span class="st" style="color: #20794D;">"AWS_DEFAULT_REGION"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"us-east-2"</span>)</span></code></pre></div>
</details>
</div>
<p>To use aws.s3, we first need to have a AWS account and set up s3 bucket. To set up a s3 bucket, you can sign in to the <a href="https://aws.amazon.com/console/">Console</a> and click S3 under “Storage”. Under Amazon S3, you can create a bucket with a unique bucket name (Keep this name to <code>s3BucketName</code>) and selected region (Remember this selected region, it will become value for <code>AWS_DEFAULT_REGION</code>. Mine is us-east-2). Then you will be back to the bucket list page.</p>
<p>To obtain the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY, drop down your profile name on the top right menu, click “My Security Credentials”,</p>
<p><img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/nRL7M41/pic1.png" class="img-fluid"></p>
<p>Then at “Access keys (access key ID and secret access key” click “Create New Access Key”. Remember to save this, you cannot find this access key listed later. <img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/89ZXJrd/pic2.png" class="img-fluid"></p>
</section>
<section id="savedata" class="level4">
<h4 class="anchored" data-anchor-id="savedata">saveData</h4>
<p>In the <a href="https://sckinta.shinyapps.io/SpeakerSignup/">demo app</a>, each user entry include text input and a picture file. To make the picture file and text input match for each entry, I keep the same prefix and save new image name as one variable in data.frame.</p>
<p>The <code>saveData</code> function code:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb4-2">        <span class="co" style="color: #5E5E5E;"># create a empty data frame</span></span>
<span id="cb4-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-4">        <span class="co" style="color: #5E5E5E;"># loop through every field</span></span>
<span id="cb4-5">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb4-6">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb4-7">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-8">                  <span class="co" style="color: #5E5E5E;"># fileInput widget with value</span></span>
<span id="cb4-9">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb4-10">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb4-11">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb4-12">                        }</span>
<span id="cb4-13">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb4-14">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb4-15">                        }</span>
<span id="cb4-16">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-17">                  <span class="co" style="color: #5E5E5E;"># fileInput widget without value, assign a place holder image saved in bucket</span></span>
<span id="cb4-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-19">                }</span>
<span id="cb4-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-22">                          <span class="co" style="color: #5E5E5E;"># text widgets without value</span></span>
<span id="cb4-23">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb4-24">                        }</span>
<span id="cb4-25">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb4-26">                          <span class="co" style="color: #5E5E5E;"># text widgets (checkboxGroupInput) with multiple values</span></span>
<span id="cb4-27">                                </span>
<span id="cb4-28">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb4-29">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-30">                          <span class="co" style="color: #5E5E5E;"># text widgets with single value</span></span>
<span id="cb4-31">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb4-32">                        }</span>
<span id="cb4-33">                }</span>
<span id="cb4-34">        }</span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;"># input timestamp</span></span>
<span id="cb4-36">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb4-37">        </span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb4-39">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb4-40">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb4-41">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-42">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb4-43">                name1, </span>
<span id="cb4-44">                name2</span>
<span id="cb4-45">        )</span>
<span id="cb4-46">        </span>
<span id="cb4-47">        <span class="co" style="color: #5E5E5E;"># rename imagefilename and save image file to s3</span></span>
<span id="cb4-48">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb4-49">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-50">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb4-51">                        name1, </span>
<span id="cb4-52">                        name2</span>
<span id="cb4-53">                )</span>
<span id="cb4-54">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb4-55">                <span class="co" style="color: #5E5E5E;"># save the image file to aws s3</span></span>
<span id="cb4-56">                aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">put_object</span>(</span>
<span id="cb4-57">                  <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName), </span>
<span id="cb4-58">                  <span class="at" style="color: #657422;">object =</span> img_newName, </span>
<span id="cb4-59">                  <span class="at" style="color: #657422;">bucket =</span> s3BucketName, </span>
<span id="cb4-60">                  <span class="at" style="color: #657422;">check_region =</span> F, <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb4-61">                  )</span>
<span id="cb4-62">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-63">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-64">        }</span>
<span id="cb4-65">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"https://rladiesmentor.s3.us-east-2.amazonaws.com/"</span>,img_newName)</span>
<span id="cb4-66">        </span>
<span id="cb4-67">        <span class="co" style="color: #5E5E5E;"># save df as rds to the aws s3</span></span>
<span id="cb4-68">        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3save</span>(data, <span class="at" style="color: #657422;">bucket =</span> s3BucketName, <span class="at" style="color: #657422;">object =</span> fileName)</span>
<span id="cb4-69">        </span>
<span id="cb4-70">        </span>
<span id="cb4-71">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata" class="level4">
<h4 class="anchored" data-anchor-id="loaddata">loadData</h4>
<p>To retrive the data from bucket, we can use following <code>loadData</code> function</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb5-2">        <span class="co" style="color: #5E5E5E;"># read all the rds files into a list</span></span>
<span id="cb5-3">        files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">get_bucket</span>(s3BucketName), <span class="cf" style="color: #003B4F;">function</span>(x){x[[<span class="st" style="color: #20794D;">"Key"</span>]]})</span>
<span id="cb5-4">        files <span class="ot" style="color: #003B4F;">&lt;-</span> files[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.rds"</span>,files)]</span>
<span id="cb5-5">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(files) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb5-6">                <span class="co" style="color: #5E5E5E;"># create an empty data frame with additional timestamp column if no entries at aws s3</span></span>
<span id="cb5-7">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb5-8">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb5-9">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb5-10">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-11">                <span class="co" style="color: #5E5E5E;"># load data s3load entry by entry if there are entries at aws s3</span></span>
<span id="cb5-12">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(files, <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb5-13">                        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3load</span>(x, <span class="at" style="color: #657422;">bucket =</span> s3BucketName)</span>
<span id="cb5-14">                        data</span>
<span id="cb5-15">                })</span>
<span id="cb5-16">                </span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;"># concatenate all data together into one data.frame</span></span>
<span id="cb5-18">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, data)</span>
<span id="cb5-19">        }</span>
<span id="cb5-20">        </span>
<span id="cb5-21">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb5-22">        </span>
<span id="cb5-23"></span>
<span id="cb5-24">        <span class="co" style="color: #5E5E5E;"># make image src as one output column</span></span>
<span id="cb5-25">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb5-26">                <span class="at" style="color: #657422;">photo=</span><span class="fu" style="color: #4758AB;">sapply</span>(data<span class="sc" style="color: #5E5E5E;">$</span>photo.link,<span class="cf" style="color: #003B4F;">function</span>(pic){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'&lt;img src='</span>,pic,<span class="st" style="color: #20794D;">' height=52&gt;&lt;/img&gt;'</span>)})</span>
<span id="cb5-27">        )</span>
<span id="cb5-28">        <span class="co" style="color: #5E5E5E;"># make name column a link</span></span>
<span id="cb5-29">        out <span class="ot" style="color: #003B4F;">=</span> out <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-30">                <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(<span class="cf" style="color: #003B4F;">function</span>(url,text){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)}, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name))</span>
<span id="cb5-31">        </span>
<span id="cb5-32">        <span class="co" style="color: #5E5E5E;"># output data frame for dataTableRender</span></span>
<span id="cb5-33">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb5-34">                out <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb5-35">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb5-36">        )</span>
<span id="cb5-37">        out</span>
<span id="cb5-38">}</span></code></pre></div>
</details>
</div>
<p>To make the image file readable by link, you have to change the bucket public access permission, and make anyone can read it.</p>
</section>
</section>
<section id="dropbox" class="level2">
<h2 class="anchored" data-anchor-id="dropbox">Dropbox</h2>
<p><code>rdrop2</code> is the package R used to communicate with dropbox, and can be directly installed from CRAN.</p>
<section id="authentication-1" class="level4">
<h4 class="anchored" data-anchor-id="authentication-1">Authentication</h4>
<p>After installation, we need to authenticate R to access your dropbox (like AWS authentication key). Instead of obtaining directly from website, first time <code>drop_auth()</code> will direct you to web browser for dropbox authentication.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(rdrop2)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"># for remote use (deploy app to shinyapps.io or rstudio connect), you can save your auth to rds and load it to host platform</span></span>
<span id="cb6-6">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;">saveRDS</span>(token, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"token.rds"</span>)</span></code></pre></div>
</details>
</div>
<p>Caution: this token authorize anyone with token file an access to all the files in your dropbox account.</p>
<p>When you are ready to use the token to allow access the data at remote setting, you can do</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># this part should be included in your shinyapp code</span></span>
<span id="cb7-2">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load</span>(<span class="st" style="color: #20794D;">"token.rds"</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">drop_acc</span>(<span class="at" style="color: #657422;">dtoken =</span> token)</span></code></pre></div>
</details>
</div>
</section>
<section id="savedata-1" class="level4">
<h4 class="anchored" data-anchor-id="savedata-1">saveData</h4>
<p>Unlike AWS S3, I choose to aggregate individual entries into one csv file (You can do the same thing in AWS S3 too). The <code>saveData</code> function for dropbox is</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb8-2">        <span class="co" style="color: #5E5E5E;"># read previously stored csv file</span></span>
<span id="cb8-3">        old_df <span class="ot" style="color: #003B4F;">=</span> rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb8-4">        </span>
<span id="cb8-5">        <span class="co" style="color: #5E5E5E;"># save one user entry to a new data frame (like AWS above)</span></span>
<span id="cb8-6">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb8-8">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb8-9">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-10">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb8-11">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb8-12">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb8-13">                        }</span>
<span id="cb8-14">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb8-15">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb8-16">                        }</span>
<span id="cb8-17">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-19">                }</span>
<span id="cb8-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-22">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb8-23">                        }</span>
<span id="cb8-24">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb8-25">                                <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb8-26">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb8-27">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-28">                                <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb8-29">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb8-30">                        }</span>
<span id="cb8-31">                }</span>
<span id="cb8-32">        }</span>
<span id="cb8-33">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb8-35">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb8-36">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb8-37">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-38">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb8-39">                name1, </span>
<span id="cb8-40">                name2</span>
<span id="cb8-41">        )</span>
<span id="cb8-42">        </span>
<span id="cb8-43">        <span class="co" style="color: #5E5E5E;"># rename and save imagefilename</span></span>
<span id="cb8-44">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb8-45">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-46">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb8-47">                        name1, </span>
<span id="cb8-48">                        name2</span>
<span id="cb8-49">                )</span>
<span id="cb8-50">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-51">                rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-52">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-53">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-54">        }</span>
<span id="cb8-55">        </span>
<span id="cb8-56">        <span class="co" style="color: #5E5E5E;"># add phone name to data column</span></span>
<span id="cb8-57">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span>img_newName</span>
<span id="cb8-58">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb8-59">        </span>
<span id="cb8-60">        <span class="co" style="color: #5E5E5E;"># append new entry to the old_df</span></span>
<span id="cb8-61">        new_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(old_df, data)</span>
<span id="cb8-62">        <span class="co" style="color: #5E5E5E;"># write new_df csv to a temp file</span></span>
<span id="cb8-63">        <span class="fu" style="color: #4758AB;">write.csv</span>(new_df, <span class="at" style="color: #657422;">file=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-64">        <span class="co" style="color: #5E5E5E;"># upload this temp file to dropbox</span></span>
<span id="cb8-65">        rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-66">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-1" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-1">loadData</h4>
<p>From above example, you may notice that all the file need to be saved at local for a moment before uploading dropbox. In other words, rdrop2 only deals file level data. Thus, if you want to retrieve unstructural file (not csv), you have to download the file to local, then show it. It will not work for links (because no way to set public access permissions in dropbox). Thus at loadData, I cannot make the image readable unless I download data to the local. The following example only show the data frame load, comment out the image part.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb9-2">        <span class="co" style="color: #5E5E5E;"># read csv</span></span>
<span id="cb9-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb9-4">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">nrow</span>(data) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb9-5">                <span class="co" style="color: #5E5E5E;"># create empty data frame with correct columns</span></span>
<span id="cb9-6">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb9-7">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb9-8">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb9-9">        } </span>
<span id="cb9-10">        </span>
<span id="cb9-11">        <span class="co" style="color: #5E5E5E;"># drop_get("jigglypuff.jpeg")</span></span>
<span id="cb9-12">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb9-13">        <span class="co" style="color: #5E5E5E;"># out = tibble(</span></span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;">#         photo=sapply(data$photo.link,function(pic){paste0('&lt;img src=',pic,' height=52&gt;&lt;/img&gt;')})</span></span>
<span id="cb9-15">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;"># out = out %&gt;%</span></span>
<span id="cb9-17">        <span class="co" style="color: #5E5E5E;">#         mutate(name=mapply(function(url,text){paste0("&lt;a href='",url,"'&gt;",text,"&lt;/a&gt;")}, data$linkedin, data$name))</span></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;"># out = bind_cols(</span></span>
<span id="cb9-19">        <span class="co" style="color: #5E5E5E;">#         out %&gt;% as.data.frame(),</span></span>
<span id="cb9-20">        <span class="co" style="color: #5E5E5E;">#         data[,c("pronoun","signUp.type","expertises","primary.employment","preferred.mentor.method")]</span></span>
<span id="cb9-21">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-22">        out<span class="ot" style="color: #003B4F;">=</span>data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb9-23">        out</span>
<span id="cb9-24">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="googlesheets" class="level2">
<h2 class="anchored" data-anchor-id="googlesheets">googlesheets</h2>
<p>Two packages <code>googledrive</code> and <code>googlesheets4</code> are required for googlesheet data I/O. The main reason is that googlesheets4 have updated their security setting and made spreadsheet direct writing impossible. The way to get around is to use <code>googledrive::drive_download</code> to download the file to local, update the dataframe and save to a local file with same name like before, then use <code>googledrive::drive_update</code> to push the new file to the google drive. It is very similar to <code>rdrop2</code> file-level communication method. (Note: both <code>googledrive</code> and <code>googlesheets4</code> needs <code>gargle_oauth</code>).</p>
<section id="authentication-2" class="level4">
<h4 class="anchored" data-anchor-id="authentication-2">Authentication</h4>
<p>Googlesheets used <code>gargle_oauth</code> to prompt a web page for authentication. The code to set up authentication at local</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb10-2">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drive_auth</span>()</span>
<span id="cb10-3">googlesheets4<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">sheets_auth</span>()</span></code></pre></div>
</details>
</div>
<p>Usually you do not need to explicitly prompt auth using above code. Using functions in <code>googledrive</code> and <code>googlesheets4</code> will automatically trigger the authentication.</p>
<p>After authentication, you can check your tokens by</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gargle_oauth_sitrep</span>()</span></code></pre></div>
</details>
</div>
<p>The authentication step automatically generated token files under <code>~/.R/gargle/gargle-oauth/</code>. If the app work in local, that is all we need to do. If you want to deploy to hosting platform, we need to make this authentication non-interactive (no need for web browser to prompt a page). One way is to make your token files available for remote server access.</p>
<p>To make tokens available for remote server access, you can copy the email account authentication to the same directory app.R saved at. Since we have tokens associated with both <code>googledrive</code> and <code>googlesheets4</code>, we will end up have two token files. To move both token files to app directory. Using following shell code</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mkdir .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-2">cd .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-3">cp <span class="sc" style="color: #5E5E5E;">~</span><span class="er" style="color: #AD0000;">/</span>.R<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">-</span>oauth<span class="sc" style="color: #5E5E5E;">/</span><span class="er" style="color: #AD0000;">*</span>youremailname<span class="sc" style="color: #5E5E5E;">*</span> .</span></code></pre></div>
</details>
</div>
<p>When it is time to depoly, select .secret/ to upload to platform. In the app.R code, we just need to add following line to designate project-specific cache.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">options</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">gargle_oauth_cache =</span> <span class="st" style="color: #20794D;">".secret"</span>,</span>
<span id="cb13-3">        <span class="at" style="color: #657422;">gargle_oauth_email =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb13-4">)</span></code></pre></div>
</details>
</div>
<p>This is not the most secure way, but easiest way. If you want to explore more secure way for this purpose, please ref to <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html">non-interacive authentication in gargle</a></p>
</section>
<section id="savedata-2" class="level4">
<h4 class="anchored" data-anchor-id="savedata-2">saveData</h4>
<p>As alreadly mentioned, googledrive use file-level communication. We first used <code>drive_fine</code> to find which spreadsheet to read, then download using <code>googledrive::drive_download</code>, finally update/unload spreadsheet <code>googledrive::drive_update</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb14-2">        <span class="co" style="color: #5E5E5E;"># download previous spreadsheet to tempfile</span></span>
<span id="cb14-3">        tmpDir<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb14-4">        mentors<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)</span>
<span id="cb14-5">        <span class="fu" style="color: #4758AB;">drive_download</span>(<span class="fu" style="color: #4758AB;">as_id</span>(mentors), <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"csv"</span>, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">overwrite=</span>T)</span>
<span id="cb14-6">        </span>
<span id="cb14-7">        <span class="co" style="color: #5E5E5E;"># read spreadsheet to df</span></span>
<span id="cb14-8">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(tmpDir)</span>
<span id="cb14-9">        </span>
<span id="cb14-10">        <span class="co" style="color: #5E5E5E;"># read input to data</span></span>
<span id="cb14-11">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb14-12">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb14-13">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb14-14">                <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb14-15">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb14-16">                }</span>
<span id="cb14-17">                <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb14-18">                        <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb14-19">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(var,<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">", "</span>)</span>
<span id="cb14-20">                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb14-21">                        <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb14-22">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb14-23">                }</span>
<span id="cb14-24">        }</span>
<span id="cb14-25">        </span>
<span id="cb14-26">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb14-27">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"email"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>)</span>
<span id="cb14-28">        </span>
<span id="cb14-29">        <span class="co" style="color: #5E5E5E;"># append new data</span></span>
<span id="cb14-30">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(df, data)</span>
<span id="cb14-31">        </span>
<span id="cb14-32">        <span class="co" style="color: #5E5E5E;"># write into tempfile</span></span>
<span id="cb14-33">        <span class="fu" style="color: #4758AB;">write_csv</span>(df, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">na=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb14-34">        </span>
<span id="cb14-35">        <span class="co" style="color: #5E5E5E;"># update mentors spreadsheet</span></span>
<span id="cb14-36">        mentors <span class="ot" style="color: #003B4F;">&lt;-</span> mentors <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-37">          <span class="fu" style="color: #4758AB;">drive_update</span>(</span>
<span id="cb14-38">                tmpDir,</span>
<span id="cb14-39">                <span class="at" style="color: #657422;">name=</span><span class="st" style="color: #20794D;">"mentors"</span></span>
<span id="cb14-40">        )</span>
<span id="cb14-41">        <span class="co" style="color: #5E5E5E;"># drive_rm(mentors)</span></span>
<span id="cb14-42">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-2" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-2">loadData</h4>
<p><code>googlesheets</code> have a function <code>read_sheet</code> to read googlesheets directly to data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb15-2">        <span class="co" style="color: #5E5E5E;"># read spreadsheet</span></span>
<span id="cb15-3">        sheet_id<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)<span class="sc" style="color: #5E5E5E;">$</span>id</span>
<span id="cb15-4">        data<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">read_sheet</span>(sheet_id)</span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb15-6">        names <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-7">                <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-8">                        <span class="cf" style="color: #003B4F;">function</span>(url,text){</span>
<span id="cb15-9">                                <span class="cf" style="color: #003B4F;">if</span>(url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-10">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-11">                                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-12">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-13">                                }</span>
<span id="cb15-14">                        }, </span>
<span id="cb15-15">                        data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-16">                        )</span>
<span id="cb15-17">        )</span>
<span id="cb15-18">        links <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-19">                <span class="at" style="color: #657422;">links=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-20">                        <span class="cf" style="color: #003B4F;">function</span>(email, linkedin,text){</span>
<span id="cb15-21">                                <span class="cf" style="color: #003B4F;">if</span>(email<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> linkedin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-22">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-23">                                } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (linkedin<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> email<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-24">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-25">                                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb15-26">                                        <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb15-27">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>),</span>
<span id="cb15-28">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-29">                                        )</span>
<span id="cb15-30">                                }</span>
<span id="cb15-31">                        }, </span>
<span id="cb15-32">                        data<span class="sc" style="color: #5E5E5E;">$</span>email, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-33">                )</span>
<span id="cb15-34">        )</span>
<span id="cb15-35">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb15-36">                names <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb15-37">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)],</span>
<span id="cb15-38">                links <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb15-39">        )</span>
<span id="cb15-40">        out</span>
<span id="cb15-41">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, we introduce three ways to load and save data to external storage clound. AWS s3 is most secure and fleasible among three. It can store and load unstructure data easily, thus it does not require much memory cache from host server. But it is not free when data is very big. Dropbox can save both tubular and unstructural data, but retrieve unstructure requires downloading file to cache. Googlesheets can only read/save tubular data. Both dropbox and googlesheets have some secure concerns, but you can create a free account and designate that account for app development/test only to reduce concerns for security. The complete codes for finished app can be accessed from my <a href="https://github.com/sckinta/example_code/tree/master/shinyapp_examples">github</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>shiny</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</guid>
  <pubDate>Mon, 30 Mar 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.acsgrp.com/sites/default/files/sb-5.png" medium="image" type="image/png"/>
</item>
<item>
  <title>All about git</title>
  <dc:creator>Sckinta</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</link>
  <description><![CDATA[ 



<p>Recently I have actively participated two team projects (PAWS and 2020datahack) which involves multiple team members and a lot of group decisions. For the first time, I realized how important to use github as the platform for code sharing and communication. Here I am going to share several commands that I frequently used at this process and hope it will help people quickly pick up this useful collaboration tool.</p>
<section id="initiate-a-new-repo-at-github" class="level3">
<h3 class="anchored" data-anchor-id="initiate-a-new-repo-at-github">1. initiate a new repo at github</h3>
<p>Repository, aka repo, is a collection of codes, data and documentation designated for project(s). As far as you have github account, you can create public repo(s) through github webpage easily. Follow the step 1-5 on <a href="https://help.github.com/en/github/getting-started-with-github/create-a-repo">this website</a>, then you will create a repo with a few clicks. New repo usually comes with a README.md file. Using markdown format, you can describe the project in this README.md file which will be loaded to your repo main page when you open it. Here is the <a href="https://github.com/rladiesPHL/PAWS_return_noshow">repo</a> I created for Rladies-Philly PAWS projects.</p>
</section>
<section id="local-vs.-remote" class="level3">
<h3 class="anchored" data-anchor-id="local-vs.-remote">2. Local vs.&nbsp;remote</h3>
<p>One concept need to be clarified here is local vs.&nbsp;remote. <em>Github</em> is the most popular cloud-based service hosting repos. Those repo is managed by git installed at remote (aka, github here). So what is <em>git</em>? Git is a version control system that lets you manage and keep track of your source code history. It can also be <a href="https://git-scm.com/downloads">installed</a> at local and work as local version control system. In that case, your snapshot of each version will be saved at local instead of cloud.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># to initiate repo at local</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># suppose you have a project working now called repoX</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># all scripts/data/documentation are saved in a folder in your computer called repoX. </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Now you want to start git version control for this project</span></span>
<span id="cb1-5">cd repoX<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb1-6">git init</span>
<span id="cb1-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb1-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"initiate version control"</span></span></code></pre></div>
</details>
</div>
<p>The above code can be run on any shell-like terminal. And congrats, you have sucessefully create version control at local folder repoX/. <code>git commit</code> basically create a snapshot of this folder. If you want to change it back to this moment in the future, you can do it with commit number (it is hash code). It is important to write a meaningful message (like here “initiate version control”) to remind yourself what the snapshot is like. We will discuss how to recover using commit number in a little bit.</p>
</section>
<section id="clone-pull-and-push" class="level3">
<h3 class="anchored" data-anchor-id="clone-pull-and-push">3. clone, pull and push</h3>
<p>To communicate between your local and remote github, you can access through git by downloading (<code>pull</code>) remote to local and uploading (<code>push</code>) local repo to the cloud (github).</p>
<p>If you initiate repo from github first (step 1 above), you can first clone that repo to local. This repo will remember the remote address and allow you later pull from and push to the remote</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># here I use rladiesPHL/PAWS_return_noshow.git as my example</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># clone the repo to local</span></span>
<span id="cb2-4">git clone https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>rladiesPHL<span class="sc" style="color: #5E5E5E;">/</span>PAWS_return_noshow.git</span></code></pre></div>
</details>
</div>
<p>Anyone can clone a public repo to their local computer. However, to be able to <code>pull</code> and <code>push</code>, you need to be included as collaborators for that repo specially, or you are the repo owner yourself. To add someone as collaborator, follow the <a href="https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/inviting-collaborators-to-a-personal-repository">steps</a> by clicking on the webpage. Once you are the owner/collaborator, you can do following command to download and upload.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># initiate clone will create a folder at local called "PAWS_return_noshow", go to that folder</span></span>
<span id="cb3-2">cd PAWS_return_noshow<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># pull (the update) from PAWS_return_noshow (since the clone remember the remote address)</span></span>
<span id="cb3-4">git pull</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># you can do your analysis, do your update at local now</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># when it is time to upload your analysis to cloud, you first want to take a snapshot of what you have done so far</span></span>
<span id="cb3-9">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb3-10">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"my update"</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># now you can push your analysis to the github</span></span>
<span id="cb3-13">git push origin master</span></code></pre></div>
</details>
</div>
</section>
<section id="fork" class="level3">
<h3 class="anchored" data-anchor-id="fork">4. fork</h3>
<p>Above example is to push your analysis directly to the origin’s master branch. So what is <code>origin</code>? (what is the master branch will be explained in the next). Put it simple, you can consider origin as the place where is first downloaded. For example, I download PAWS_return_noshow repo from rladiesPHL account and the origin here will be rladiesPHL repo address (https://github.com/rladiesPHL/PAWS_return_noshow.git).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># to quick check your repo remote origin</span></span>
<span id="cb4-2">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (fetch)</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (push)</span></span></code></pre></div>
</details>
</div>
<p>Why is <code>origin</code> important? The origin determines which repo push and pull will go to/from. Some repo won’t allow you to push and pull because you are not the owner or collaborator. If you do not want request pull and push permission from the owner, you can <code>fork</code> the repo to your own github account. Here <code>fork</code> is like to clone a remote repo belonging to other poeple’s account at that snapshot to your own account. You can develope/make commits on repo without any push/pull permission obstables.</p>
<p>The easiest way to fork a repo is from webpage. You can follow the instruction on this <a href="https://help.github.com/en/enterprise/2.13/user/articles/fork-a-repo">help page</a>.</p>
<p>Be aware, if you <code>git clone</code> the forked repo from your github account, the “origin” is your own account repo. This repo is functionally independent from the upstream repo, although at top of your own repo page it will show “This branch is X commits ahead of/behind XXX:master.” when the upstream repo makes commits after forking. What if you want your own “forked” repo remember where it comes so that you can merge the future changes from the upstream repo to your “forked” repo?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># here I show an example of a forked repo at my own account (sckinta/datahack2020) linking back to the upstream account (CodeForPhilly/datahack2020)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># add a repo description called "upstream" and associated this name with upstream repo. Here "upstream" can be any name (eg. up, ori, ...)</span></span>
<span id="cb6-4">git remote add upstream https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>CodeForPhilly<span class="sc" style="color: #5E5E5E;">/</span>datahack2020.git</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># check remote info again you will find now repo have two remote associated with it. one is called "origin" and another is called "upstream"</span></span>
<span id="cb6-7">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (fetch)</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (push)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (fetch)</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (push)</span></span></code></pre></div>
</details>
</div>
<p>To update your forked repo at github, you need three steps: 1) <code>fetch</code> the upstream repo to your local repo; 2) <code>merge</code> updated fetch content into the main branch at local; 3) <code>push</code> updated local to remote forked repo</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># fecth upstream to local</span></span>
<span id="cb8-2">git fetch upstream</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Merge the updated fetch content into the main branch at local</span></span>
<span id="cb8-5">git merge upstream<span class="sc" style="color: #5E5E5E;">/</span>master</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Update, push to remote(fork) master branch</span></span>
<span id="cb8-8">git push origin master</span></code></pre></div>
</details>
</div>
<p>I highly suggest <code>pull</code> your forked repo to local first before <code>fetch</code> upstream. It will guarantee when you merge the upstream it will not cause the conflicts.</p>
</section>
<section id="branch" class="level3">
<h3 class="anchored" data-anchor-id="branch">5. branch</h3>
<p>After fork origin, another useful tool for collobarative project is using branch. “Branch”, as it is named, means a branch of analysis derived from the mainstream (which is by default named “master”). You can create branches on your own repo or the repo you have been invited as collaborator. This is the biggest difference between branch and a repo fork. To add a branch at local, using code <code>git checkout</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create and switch to a new branch (say, branch "chun")</span></span>
<span id="cb9-2">git checkout <span class="sc" style="color: #5E5E5E;">-</span>b chun</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># go back to the master</span></span>
<span id="cb9-5">git checkout master</span></code></pre></div>
</details>
</div>
<p>Now you can do your analysis in the repo fold. When you are ready to commit your new analysis, how will your repo know this analysis added to branch “chun”? Simple, using <code>git checkout</code> switch to chun branch and commit there. You can also push your new branch to remote, where the branch will show up under the <github_name>/<repo_name>/tree</repo_name></github_name></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># for example I push my new analysis to branch "chun" and finally push it to sckinta/datahack2020</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># switch to branch chun</span></span>
<span id="cb10-4">git checkout chun</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;"># make your new commit</span></span>
<span id="cb10-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb10-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"new analysis"</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;"># push it to github branch</span></span>
<span id="cb10-11">git push origin chun</span></code></pre></div>
</details>
</div>
<p>If you want to continue on other collaborator’s branch (say “abc”), you can pull that branch to local.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># download branch abc to your analysis</span></span>
<span id="cb11-2">git pull origin abc</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># check how many branches current local repo contains</span></span>
<span id="cb11-5">git branch</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># *chun</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">#   master</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">#   abc</span></span></code></pre></div>
</details>
</div>
<p>After everybody did their analysis on their own branch, your group finally determine we are going to merge branch “abc” to master and delete the branch “abc”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># go to the master first</span></span>
<span id="cb13-2">git checkout master</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;"># merge branch "abc" in</span></span>
<span id="cb13-5">git merge abc</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># delete old branch</span></span>
<span id="cb13-8">git checkout <span class="sc" style="color: #5E5E5E;">-</span>d abc</span></code></pre></div>
</details>
</div>
<p>Occasionally, this process doesn’t go smoothly. Conflicts may occur when you try to merge multiple branches in. Then you may need advance tools like <code>mergetool</code> and <code>opendiff</code>. Here I won’t explain them. Please refer to<a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_advanced_merging">git tutorial page</a> for further reading. All the simple branch and merge has also been best explained on <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">git tutorial</a>.</p>
</section>
<section id="recover-a-certain-commit" class="level3">
<h3 class="anchored" data-anchor-id="recover-a-certain-commit">6. Recover a certain commit</h3>
<p>One major reason we want to use version control is that we can revert to a old snapshot/commit if we want. To check the commits done to the current repo, you can try <code>git log</code>. The log is reported in reverse chronical order.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">git log <span class="sc" style="color: #5E5E5E;">--</span>oneline</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># ea03bb2 (HEAD -&gt; chun, origin/chun) clean and EDA on incident county</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># 3c659ec (upstream/master, origin/master, origin/HEAD, master) Merge pull request #7 from CodeForPhilly/branch_dubois</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;"># c76c701 (upstream/branch_dubois) updated outrigger &amp; added presentation</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># 29992c6 Merge pull request #6 from rjake/jake</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;"># 52c88ea Create psp_overdose_events.csv</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;"># 36495db Add codebook</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;"># 714f848 gitignore data files</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># 51e5974 added presentation slides</span></span></code></pre></div>
</details>
</div>
<p>To revert to a commit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># since we are currently at chun branch, we better go back to master where "3c659ec" is at</span></span>
<span id="cb16-2">git checkout master</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;"># revert to a commit</span></span>
<span id="cb16-5">git revert 3c659ec</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># the above command can also be</span></span>
<span id="cb16-8">git reset <span class="sc" style="color: #5E5E5E;">--</span>hard 3c659ec</span></code></pre></div>
</details>
</div>
<p>Remember all of above is only updated at local. If you want to make it show up at github, do a <code>add</code>, <code>commit</code> and <code>push</code> series.</p>
</section>
<section id="link-to-your-remote-account-at-local" class="level3">
<h3 class="anchored" data-anchor-id="link-to-your-remote-account-at-local">7. link to your remote account at local</h3>
<p>After introduce all above basic commands for git, the last thing I want to share is to set up the local git remote account. I probably shoud put it at #2.remote vs.&nbsp;local# part.</p>
<p>To globally set github account at local can save your effort to put account name and password everytime you want to push/pull to your own account.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># for example I set global account as rladiesPHL. This will save the global configuration to a ~/.gitconfig file. It will prompt password for you to input</span></span>
<span id="cb17-2">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.email <span class="st" style="color: #20794D;">"philly@rladies.org"</span></span>
<span id="cb17-3">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.name <span class="st" style="color: #20794D;">"rladiesPHL"</span></span></code></pre></div>
</details>
</div>
<p>Howver, sometimes I want to switch back to my personal account temperally to do a quick push. I wish git will prompt account and password for me to input</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># reset global account a little bit</span></span>
<span id="cb18-2">git config <span class="sc" style="color: #5E5E5E;">--</span>local credential.helper <span class="st" style="color: #20794D;">""</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># when you push, it will prompt account and password for me to input</span></span>
<span id="cb18-5">git push origin master</span></code></pre></div>
</details>
</div>
<p>All above are the frequently used git commands I used. Hope it will help anyone who is willing to use git version in their future project.</p>


</section>

 ]]></description>
  <category>bash</category>
  <category>git</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</guid>
  <pubDate>Tue, 11 Feb 2020 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Network visualization - Part 3</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>In the previous two posts, we discussed about IGRAPH object and how to manipulate, measure and cluster it. In this final post of network analysis series, I will focus on the network work visualization.</p>
<p>Network visualization are supported by two aspects — the aesthetics of network elements (aka, vertices and edges) and layout of network. There are multiple packages available for these aspects. I will focus on the basic igraph plot which is base R plot and the application of <code>ggraph</code> which use similar syntax comparable to ggplot2.</p>
<section id="aesthetics-of-network-elements" class="level1">
<h1>Aesthetics of network elements</h1>
<p>The aesthetics of both vertices and edges can be manipulated at color, transparency. Specially for vertices, we can also manipulate its shape, size and fill. For edges, we can manipulate its width/thickness, linetype, arrow and so on. Here, use simple example “actors” to show you how to present aesthetics using <code>igraph</code> default plot and <code>ggraph</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">actors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">age=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">48</span>,<span class="dv" style="color: #AD0000;">33</span>,<span class="dv" style="color: #AD0000;">45</span>,<span class="dv" style="color: #AD0000;">34</span>,<span class="dv" style="color: #AD0000;">21</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">gender=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>))</span>
<span id="cb1-5">relations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">from=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"David"</span>, <span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">same.dept=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;">friendship=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb1-10">  <span class="at" style="color: #657422;">advice=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-11">  )</span>
<span id="cb1-12">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_data_frame</span>(relations, <span class="at" style="color: #657422;">directed=</span><span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">vertices=</span>actors)</span></code></pre></div>
</details>
</div>
<section id="vertex-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="vertex-aesthetics">Vertex aesthetics</h2>
<p>Specify aesthetics in vertex attribute</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># make female and male color different</span></span>
<span id="cb2-2">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"vertice"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"red"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"blue"</span>))</span>
<span id="cb2-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"color"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>color)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-1.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># make age as size</span></span>
<span id="cb3-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb3-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"size"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>size)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The methods mentioned above can also be done by specify in <code>plot()</code>. One quick example below show the shape aesthetics. Check igraph valid shape names by <code>names(igraph:::.igraph.shapes)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># make gender as shape</span></span>
<span id="cb4-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">shape=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"circle"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"rectangle"</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">vertex.shape=</span>v<span class="sc" style="color: #5E5E5E;">$</span>shape)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">'topleft'</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">21</span>, <span class="dv" style="color: #AD0000;">22</span>),<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Be aware that the aesthetics specified by attributes can be overwritten by specifying in <code>plot()</code>. In addition, those aesthetics can also be used to apply to all vertices like <code>plot(g, vertex.shape="rectangle")</code>. The attributes to be manipulated in igraph (using base R) are limited. To find all the plotting attributes, try <code>?plot.igraph</code> or go to https://igraph.org/r/doc/plot.common.html</p>
<p>We can also draw attention to certain nodes by <code>mark.groups</code> in plot</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># mark dept</span></span>
<span id="cb5-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb5-4">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">plot</span>(g, </span>
<span id="cb5-6">     <span class="at" style="color: #657422;">mark.groups=</span><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-7">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name)),</span>
<span id="cb5-8">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"IT"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name))</span>
<span id="cb5-9">       ), </span>
<span id="cb5-10">     <span class="at" style="color: #657422;">mark.col=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#C5E5E7"</span>,<span class="st" style="color: #20794D;">"#ECD89A"</span>), <span class="at" style="color: #657422;">mark.border=</span><span class="cn" style="color: #8f5902;">NA</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/mark.groups-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> is a ggplot version of graph plotting. Using graph object as input, it can convert vertice attributes to plot attribute automatically or manually.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_range=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">40</span>))</span>
<span id="cb6-3">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"age_range"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size=</span>age_range, <span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">scale_size_continuous</span>(<span class="at" style="color: #657422;">breaks=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">30</span>,<span class="dv" style="color: #AD0000;">40</span>), <span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Almost all the {<code>ggplots</code>} theme, scale functions are available for {<code>ggraph</code>}. Refer to <a href="https://www.rdocumentation.org/packages/ggraph/versions/1.0.2">rdocumentation</a> for more details.</p>
</section>
<section id="edge-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="edge-aesthetics">Edge aesthetics</h2>
<p>Similar to vertex aesthetics, edge plotting aesthetics can be manipulated both {<code>igraph</code>} default plotting and {<code>ggraph</code>} plotting</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># use linetype present whether come from same department, and line width presents friendship</span></span>
<span id="cb7-2">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb7-6">  g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb7-8">  <span class="at" style="color: #657422;">edge.curved=</span>T</span>
<span id="cb7-9">)</span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Using {<code>ggraph</code>} to show edges attribute is much easier.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">edge_linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="facet" class="level2">
<h2 class="anchored" data-anchor-id="facet">Facet</h2>
<p>One big advantage of {<code>ggraph</code>} is to use facet. It can be <code>facet_edges</code> or <code>facet_nodes</code> or <code>facet_graph</code>. Here I will only show example of <code>facet_nodes</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">#  facet based on the dept</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">facet_nodes</span>(<span class="sc" style="color: #5E5E5E;">~</span>dept, <span class="at" style="color: #657422;">drop =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/facet_nodes-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="layout" class="level1">
<h1>Layout</h1>
<p>There are many layouts available for both igraph and ggraph pacakges. Igraph provides a huge amount of layouts. https://igraph.org/r/doc/layout_.html</p>
<ul>
<li><strong>Standard layouts</strong>
<ul>
<li><strong>bipartite</strong>: minimize edge-crossings in a simple two-row (or column) layout for bipartite graphs.</li>
<li><strong>star</strong>: place one node in the center and the rest equidistantly around it. <code>as_star()</code></li>
<li><strong>circle</strong>: place nodes in a circle in the order of their index. Consider using layout_igraph_linear with circular=TRUE for more control. <code>in_circle()</code></li>
<li><strong>nicely</strong>: default, tries to pick an appropriate layout. <code>nicely</code></li>
<li><strong>dh</strong>: uses Davidson and Harels simulated annealing algorithm to place nodes. <code>with_dh()</code></li>
<li><strong>gem</strong>: place nodes on the plane using the GEM force-directed layout algorithm. <code>with_gem</code></li>
<li><strong>graphopt</strong>: uses the Graphopt algorithm based on alternating attraction and repulsion to place nodes. <code>with_graphopt()</code></li>
<li><strong>grid</strong>:place nodes on a rectangular grid. <code>on_grid()</code></li>
<li><strong>mds</strong>: perform a multidimensional scaling of nodes using either the shortest path or a user supplied distance. <code>with_mds()</code></li>
<li><strong>sphere</strong>: place nodes uniformly on a sphere - less relevant for 2D visualizations of networks. <code>with_sphere()</code></li>
<li><strong>randomly</strong>: places nodes uniformly random. <code>randomly</code></li>
<li><strong>fr</strong>: places nodes according to the force-directed algorithm of Fruchterman and Reingold. <code>with_fr()</code></li>
<li><strong>kk</strong>: uses the spring-based algorithm by Kamada and Kawai to place nodes. <code>with_kk()</code></li>
<li><strong>drl</strong>: uses the force directed algorithm from the DrL toolbox to place nodes. <code>with_drl()</code></li>
<li><strong>lgl</strong>: uses the algorithm from Large Graph Layout to place nodes. See with_lgl <code>with_lgl()</code></li>
</ul></li>
<li><strong>Hierarchical layouts</strong>
<ul>
<li><strong>tree</strong>: uses the Reingold-Tilford algorithm to place the nodes below their parent with the parent centered above its children. <code>as_tree()</code></li>
<li><strong>sugiyama</strong>: designed for directed acyclic graphs (that is, hierarchies where multiple parents are allowed) it minimizes the number of crossing edges.</li>
</ul></li>
</ul>
<p>Here we are going to show an example how to switch standard layout using the same data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># star layout -- help determine center</span></span>
<span id="cb10-3">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">as_star</span>())</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"start"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># circle layout</span></span>
<span id="cb10-8">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">in_circle</span>())</span>
<span id="cb10-9"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-10"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"circle"</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb10-13">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">on_grid</span>())</span>
<span id="cb10-14"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-15"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"grid"</span>)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;"># nicely</span></span>
<span id="cb10-18">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb10-19"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-20"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"nicely"</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;"># kk</span></span>
<span id="cb10-23">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_kk</span>())</span>
<span id="cb10-24"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-25"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"Kamada and Kawai(kk)"</span>)</span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;"># fr</span></span>
<span id="cb10-28">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_fr</span>())</span>
<span id="cb10-29"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-30"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"force-directed(fr)"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/layout_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Hierarchical layouts can plot data in layer. Here show example how to use sugiyama layout</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># make different dept nodes at different node</span></span>
<span id="cb11-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb11-4"></span>
<span id="cb11-5">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">layer=</span><span class="fu" style="color: #4758AB;">ifelse</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-7"></span>
<span id="cb11-8">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-11"></span>
<span id="cb11-12">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty)</span>
<span id="cb11-13"></span>
<span id="cb11-14">lay1 <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">layout_with_sugiyama</span>(g, <span class="at" style="color: #657422;">layers=</span>v<span class="sc" style="color: #5E5E5E;">$</span>layer, <span class="at" style="color: #657422;">attributes=</span><span class="st" style="color: #20794D;">"all"</span>)</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="fu" style="color: #4758AB;">plot</span>(lay1<span class="sc" style="color: #5E5E5E;">$</span>extd_graph, <span class="at" style="color: #657422;">edge.curved=</span>T)</span>
<span id="cb11-17"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-18"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-19"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/sugiyama_layout-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> can use all the layout mentioned above by specifying it in <code>ggraph(g, layout=...)</code>. Besides, ggraph has addtional useful layout.</p>
<ul>
<li>dendrogram: dendrogram layout not only take in graph object but also dendrogram object (<code>as.dendrogram(hclust(dist(...)))</code>). ggraph will automatically convert dendrogram to igraph by <code>den_to_igraph</code>. It ususally plots using <code>geom_edge_diagonal()</code> or <code>geom_edge_elbow()</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">den <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.dendrogram</span>(<span class="fu" style="color: #4758AB;">hclust</span>(<span class="fu" style="color: #4758AB;">dist</span>(mtcars)))</span>
<span id="cb12-2">p1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_edge_diagonal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">nudge_y=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-6">p2 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>, <span class="at" style="color: #657422;">circular =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">geom_edge_elbow</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">coord_fixed</span>()<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-11"><span class="fu" style="color: #4758AB;">grid.arrange</span>(p1,p2,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/dendrogram-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>hive: make nodes group into a axis and connecting axis instead.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="st" style="color: #20794D;">'hive'</span>, <span class="at" style="color: #657422;">axis =</span> age_range, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;">geom_edge_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_width=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">geom_axis_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> age_range), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">coord_fixed</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/hive-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>linear: make nodes only the same line so that arc connections were made</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">'linear'</span>, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;">geom_edge_arc</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_alpha=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;">scale_edge_alpha</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.3</span>,<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/linear_arc-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>More functions about ggraph refer to https://www.rdocumentation.org/packages/ggraph/versions/1.0.2</p>
</section>
<section id="other-packages-for-graph-visualization" class="level1">
<h1>other packages for graph visualization</h1>
<p>There are many other packages available for graph visualization and network analysis. In this series, I will only list the link here for the further reference. I may come back to further this topic in the future when necessary.</p>
<p><strong>Network analysis tool</strong>: Statnet<sup>1</sup></p>
<p><strong>Network visualization</strong>: ggnet<sup>2</sup></p>
<p><strong>Interactive network</strong> :</p>
<ul>
<li><p>visNetwork<sup>3</sup></p></li>
<li><p>jstree<sup>4</sup></p></li>
<li><p>Ndtv<sup>5</sup></p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://statnet.org/trac/wiki↩︎</p></li>
<li id="fn2"><p>https://briatte.github.io/ggnet/↩︎</p></li>
<li id="fn3"><p>https://datastorm-open.github.io/visNetwork/↩︎</p></li>
<li id="fn4"><p>https://bwlewis.github.io/rthreejs/↩︎</p></li>
<li id="fn5"><p>http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>network</category>
  <category>visualization</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</guid>
  <pubDate>Wed, 04 Sep 2019 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/thomasp85/ggraph/febab71076d7cf277cdb79b823f262b626651703/man/figures/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Network Analysis in R - Part 2</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2.html</link>
  2`
  [1] 2 5 6
  
  <?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Learning with sckinta</title>
<link>https://learniningwithsckinta.netlify.app/posts.html</link>
<atom:link href="https://learniningwithsckinta.netlify.app/posts.xml" rel="self" type="application/rss+xml"/>
<description>This is Chun Su's personal blog</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Mon, 28 Feb 2022 05:00:00 GMT</lastBuildDate>
<item>
  <title>Interpreting the coefficients of Generalized Linear Model</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</link>
  <description><![CDATA[ 



<p>Linear model is the most popular model used in various of fields, due to its simple execution and interpretation. It can be not only used to predict like all other machine learning models. but also widely used for statistical inference due to its simplicity.</p>
<p><a href="https://en.wikipedia.org/wiki/Generalized_linear_model">Generalized Linear Model (GLM)</a>, as named indicated, is generalized from linear regression model, and extends linear model default assumptions to include outcome variables following exponential family distribution. It used <a href="https://www.statisticshowto.com/link-function/#:~:text=A%20link%20function%20in%20a,variable%20in%20a%20linear%20way.">link function</a> to transform the outcome so that the transformed Y can be represented by linear combination of predictors. Due to this transformation, it makes coefficients interpretation a little confusing. In this blog, I will use four classical examples (<code>Boston</code>, <code>Default</code>, <code>BrainCancer</code>, and <code>Bikeshare</code> from <a href="https://cran.r-project.org/web/packages/ISLR2/ISLR2.pdf"><code>ISLR2</code></a> package) to illustrate how to interpret the coefficients of GLM from <code>tidymodels</code> fit tidy outcome in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ISLR2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<section id="linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression">Linear regression</h2>
<p>Modeling linear regression in R is simple. The following example used <code>dis</code> (weighted mean of distances to five Boston employment centers) as single predictor to predict <code>medv</code> (median value of house in $1000s) in Boston.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(Boston)</span>
<span id="cb2-2">lm_m1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis, <span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">summary</span>(lm_m1)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = medv ~ dis, data = Boston)

Residuals:
    Min      1Q  Median      3Q     Max 
-15.016  -5.556  -1.865   2.288  30.377 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  18.3901     0.8174  22.499  &lt; 2e-16 ***
dis           1.0916     0.1884   5.795 1.21e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 8.914 on 504 degrees of freedom
Multiple R-squared:  0.06246,   Adjusted R-squared:  0.0606 
F-statistic: 33.58 on 1 and 504 DF,  p-value: 1.207e-08</code></pre>
</div>
</div>
<p>Based on coefficients summary, <code>dis</code> is significantly (p-value = 1.21e-08) positively correlated with <code>medv</code>. With 1 unit increase in term of distances to Boston employment centers, the median value of house increase $1091.6 = 1.0916 * 1000.</p>
<section id="multivariate-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="multivariate-linear-regression">Multivariate linear regression</h3>
<p>In multivariate linear regression, when we interpret the coefficients, there are two components taken into account - whether the variables are independent - how to interpret the interaction term</p>
<p>In the following example, we model the <code>medv</code> with <code>dis</code> (weighted mean of distances to five Boston employment centers), <code>rm</code> (average number of rooms per dwelling), <code>crim</code> (per capita crime rate by town) and <code>chas</code> (tract bounds river).</p>
<p>For practice purpose, I will use <code>tidymodels</code> to build linear model in the multivariate linear regression example.</p>
<section id="no-interaction-term" class="level4">
<h4 class="anchored" data-anchor-id="no-interaction-term">No interaction term</h4>
<p>We starts with no interactions among the predictors.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_spec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">lm_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis <span class="sc" style="color: #5E5E5E;">+</span> rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb4-8"></span>
<span id="cb4-9">lm_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb4-11"></span>
<span id="cb4-12"></span>
<span id="cb4-13">lm_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)  -29.1      2.57      -11.3  1.20e-26
2 dis            0.201    0.144       1.40 1.62e- 1
3 rm             8.19     0.406      20.2  9.12e-67
4 crim          -0.243    0.0350     -6.94 1.19e-11
5 chas           3.98     1.10        3.63 3.10e- 4</code></pre>
</div>
</div>
<p>In this model, all predictors except <code>dis</code> show significant correlation with <code>medv</code> (p-value &lt; 0.05). <code>rm</code> and <code>chas</code> are positively while <code>crim</code> is negatively associated with <code>medv</code>. - <code>rm</code>: <strong>when keeping all other variables the same</strong>, increase 1 room per dwelling on average results in $8,194.4 (<code>8.1944 * 1000</code>) increase in median house value. - <code>chas</code>: <strong>when keeping all other variables the same</strong>, having tracts bounds to the Charles river increase median house value $3,982.5 (<code>3.9825 * 1000</code>). <code>chas</code> is a dummy variable where = 1 if tract bounds river and =0 otherwise. Thus =0 (tract do not bound to river) is a baseline here. We will discuss more about baseline in later example. - <code>crim</code>: <strong>when keeping all other variables the same</strong>, 1 unit increase in per capita crime rate will result a decrease of $243.2 (<code>-0.24318 * 1000</code>) in median house value.</p>
</section>
</section>
<section id="with-interaction-term" class="level3">
<h3 class="anchored" data-anchor-id="with-interaction-term">With interaction term</h3>
<p>Based on common sense, usually the house is smaller when it is closer to city center. Adding interaction term between <code>rm</code> and <code>dis</code> we assumed that the number of room and the distance to business center are not independent. We are testing the hypothesis that the linear relationship between <code>dis</code> and <code>medv</code> was affected by the the <code>rm</code>. This affect can be linear or non-linear, can be negative or positive.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(rm)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">geom_histogram</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean number of room per dwelling'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">Boston <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rm =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(rm)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>dis, <span class="at" style="color: #657422;">y=</span>medv, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(rm))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="at" style="color: #657422;">se =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'mean of distances to five Boston employment centers'</span>, <span class="at" style="color: #657422;">y=</span> <span class="st" style="color: #20794D;">'median value of owner-occupied homes'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"mean number of room per dwelling"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'bottom'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Thus, we added interaction term between <code>dis</code> and <code>rm</code>. The thumb of rule to use interaction term is hierarchical principle, which means, if we include an interaction in a model, we should also include the main effects, even if the p-values associated with main effect coefficients are not significant. Thus we should always use <code>*</code> instead of <code>:</code> when adding the interaction term. <code>dis*rm</code> means <code>dis + rm + dis:rm</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">lm_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">add_model</span>(lm_spec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">add_formula</span>(medv <span class="sc" style="color: #5E5E5E;">~</span> dis<span class="sc" style="color: #5E5E5E;">*</span>rm <span class="sc" style="color: #5E5E5E;">+</span> crim <span class="sc" style="color: #5E5E5E;">+</span> chas)</span>
<span id="cb10-4"></span>
<span id="cb10-5">lm_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> lm_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Boston)</span>
<span id="cb10-7"></span>
<span id="cb10-8"></span>
<span id="cb10-9">lm_fit3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)   -5.03     4.70       -1.07 2.85e- 1
2 dis           -7.43     1.27       -5.84 9.30e- 9
3 rm             4.38     0.744       5.89 7.11e- 9
4 crim          -0.270    0.0341     -7.90 1.80e-14
5 chas           3.99     1.06        3.77 1.83e- 4
6 `dis:rm`       1.20     0.198       6.04 3.08e- 9</code></pre>
</div>
</div>
<p>In this example, all predictors including interaction terms are significant. Interestingly, by adding the interaction between <code>dis</code> and <code>rm</code>, the coefficients associated with <code>dis</code> turn negative from positive when using simple single variable model. To interpret the interaction term,</p>
<ul>
<li><code>dis:rm</code>: since interaction term is significant (p-value = 3.077938e-09), thus linear relationship between <code>dis</code> and <code>medv</code> was significantly dependent on the <code>rm</code>, justifying the inclusion of the interaction term in the model.</li>
<li><code>dis</code>: when there are 3 ~ 6 rooms in dwelling, one unit further away from five Boston employment centers, it results in $3,835 to $244 (<code>(-7.426 + range(3,6) * 1.197) * 1000</code>) decrease in median value of house. when there are more than 6 (<code>7.426/1.197</code>) rooms in dwelling, one unit further away from five Boston employment centers, it results in at least $953 (<code>(-7.426 + 7 * 1.197) * 1000</code>) increase in median value of house.</li>
<li><code>rm</code>: <em>keeping the mean distance to five Boston employment centers as constant <code>dis</code></em>, one more room in dwelling will increase <code>1000 * (1.197 * dis + 4.380)</code> in the median value of house. Because the interaction term is positive (<code>1.197</code>), the rate of <code>medv</code> increase in terms of the room number will increase when it is further away from Boston employment centers.</li>
</ul>
<section id="when-to-use-interaction-term" class="level5">
<h5 class="anchored" data-anchor-id="when-to-use-interaction-term">When to use interaction term</h5>
<p>The frequently asked question about interaction term is “when should we include interaction term”. The conventional answer is when two predictors are not independent. However, in reality, unless we have very strong prior knowledge about the predictors, it is hard to determine whether two predictors are dependent or not without exploring the data. From the articles/blogs about interaction term I read so far, two methods are generally used to determine whether add interaction term</p>
<ol type="1">
<li><p>try both with and without adding interaction term, if adding interaction term results in significance on interaction term, then use interaction term.</p></li>
<li><p>like what I did above, plot Y against X1 with X2 as nominal variable (if X2 is not nominal variable itself). If the lines from different X2 levels are parallel, then X1 and X2 are independent and no interaction terms are needed. Otherwise, add interaction term.</p></li>
</ol>
</section>
</section>
</section>
<section id="logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="logistic-regression">Logistic regression</h2>
<p>In the regular linear regression mentioned above, the Y is numeric (aka. quantitative). However, when Y is nominal (aka, qualitative), logistic regression will be used. To make Y still represented by linear combination of predictors, we used logit function (link function) to transform Y (the probability) to <img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)"> (the log odds).</p>
<p><img src="https://latex.codecogs.com/png.latex?ln(%5Cfrac%7Bp%7D%7B1-p%7D)%20=%20%5Csum%5Cbeta%20X"> <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> represents log odds ratio. thus, odds ratio <img src="https://latex.codecogs.com/png.latex?OR%20=%20e%5E%5Cbeta">.</p>
<section id="when-y-is-binomial" class="level3">
<h3 class="anchored" data-anchor-id="when-y-is-binomial">When Y is binomial</h3>
<p>To evaluate whether a customer will default the credit card <code>default</code>, we build a logistic model with three predictors – whether the customer is a <code>student</code>, the <code>balance</code> on the account and the customer <code>income</code>.</p>
<p>Again, for practice purpose, I used <code>tidymodels</code> syntax for demonstration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"Default"</span>)</span>
<span id="cb12-2">lr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6">default_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">add_formula</span>(default <span class="sc" style="color: #5E5E5E;">~</span> .)</span>
<span id="cb12-9"></span>
<span id="cb12-10">default_fit <span class="ot" style="color: #003B4F;">&lt;-</span> default_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-11">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> Default)</span>
<span id="cb12-12"></span>
<span id="cb12-13">default_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
  term            estimate  std.error statistic   p.value
  &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept) -10.9        0.492        -22.1   4.91e-108
2 studentYes   -0.647      0.236         -2.74  6.19e-  3
3 balance       0.00574    0.000232      24.7   4.22e-135
4 income        0.00000303 0.00000820     0.370 7.12e-  1</code></pre>
</div>
</div>
<p>In this model, two predictors (<code>student</code> and <code>balance</code>) are significantly associated with <code>default</code>. To interpret coefficients, we first need to know which is the baseline of <code>default</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Default<span class="sc" style="color: #5E5E5E;">$</span>default)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>    Yes
No    0
Yes   1</code></pre>
</div>
</div>
<p>Based on the <code>contrasts</code> output, the baseline of <code>default</code> is <code>No</code>. Thus,</p>
<ul>
<li><p><code>student</code>: <strong>When keeping all other variable constant</strong>, compared to non-student (<code>student = 0</code>), a student (<code>student = 1</code>) is less likely to default credit card. The odds ratio is 0.524 (<code>exp(-6.467758e-01)</code>). In other words, if the odds of defaulting credit card as non-student is 1, the odds of defaulting credit card as a student is 0.524 (<code>exp(-6.467758e-01)</code>).</p></li>
<li><p><code>balance</code>: <strong>When keeping all other variable constant</strong>, 1 dollar increase in account balance will result in increasing odds of 1.005 (<code>exp(5.736505e-03)</code>) to default credit card.</p></li>
</ul>
<p>Note: above modeling is a bad model since there are high correlation between the predictors (<a href="https://www.britannica.com/topic/collinearity-statistics">collinearity</a>). I just used it as an example to interpret the coefficients.</p>
</section>
<section id="multinominal-predictors" class="level3">
<h3 class="anchored" data-anchor-id="multinominal-predictors">Multinominal predictors</h3>
<p>Using multi-nominal predictor <code>diagnosis</code> and other predictors like <code>sex</code> and age <code>time</code> to predict whether the patient survived the brain cancer or not <code>status</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'BrainCancer'</span>)</span>
<span id="cb16-2">BrainCancer <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;">contrasts</span>(BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>           LG glioma HG glioma Other
Meningioma         0         0     0
LG glioma          1         0     0
HG glioma          0         1     0
Other              0         0     1</code></pre>
</div>
</div>
<p>In this example, <code>Meningioma</code> is the baseline for multi-nominal predictor <code>diagnosis</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">BrainCancer_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb18-4">    </span>
<span id="cb18-5">BrainCancer_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-6">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-7">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec)</span>
<span id="cb18-8"></span>
<span id="cb18-9">BrainCancer_fit <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-10">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb18-11"></span>
<span id="cb18-12">BrainCancer_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-13">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term                estimate std.error statistic p.value
   &lt;chr&gt;                  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)           3.56      2.57       1.39  0.166  
 2 sexMale               0.369     0.576      0.640 0.522  
 3 locSupratentorial     1.09      0.901      1.21  0.227  
 4 ki                   -0.0695    0.0326    -2.13  0.0332 
 5 gtv                   0.0382    0.0366     1.04  0.296  
 6 stereoSRT             0.253     0.771      0.328 0.743  
 7 time                 -0.0339    0.0155    -2.18  0.0291 
 8 diagnosis_LG.glioma   1.31      0.844      1.55  0.122  
 9 diagnosis_HG.glioma   2.37      0.778      3.05  0.00231
10 diagnosis_Other       0.765     0.940      0.814 0.416  </code></pre>
</div>
</div>
<p>For multi-nominal predictor <code>diagnosis</code>, the levels (<code>LG glioma</code>, <code>HG glioma</code> and <code>Other</code>) are compared to the baseline <code>Meningioma</code>, and it ends with three terms for coefficient estimation.</p>
<p>Based on above model, only <code>HG glioma</code> show significant association with survival (p-value &lt; 0.05) when choose <code>Meningioma</code> as baseline. <strong>When keeping all other variable constant</strong>, compare to <code>Meningioma</code>, the patient with <code>HG glioma</code> are 10 times more (<code>exp(2.37027243)</code>) likely to survive. If we want to compare <code>HG glioma</code> with <code>Other</code> cancer type, simply use <code>exp(2.37027243-0.76482440)</code> to get odds ratio between <code>HG glioma</code> and <code>Other</code>, in which compare to <code>Other</code>, the patient with <code>HG glioma</code> are 5 times more (<code>exp(2.37027243-0.76482440)</code>) likely to survive. However, in this case, we do not know whether this comparison is statistically significant. We can get p-value for this comparison by switching <code>Other</code> as baseline.</p>
</section>
<section id="contrasts-matrix" class="level3">
<h3 class="anchored" data-anchor-id="contrasts-matrix">Contrasts matrix</h3>
<p>Another baseline assignment is using the global average as baseline. To do that, we need to change the <code>contrasts</code> matrix. The following code replace the default contrasts <code>contr.treatment</code> with <code>contr.sum</code> on <code>globalOptions</code>, then use <code>step_dummy</code> from <code>recipe</code> to realize it</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">BrainCancer_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_LG.glioma diagnosis_HG.glioma diagnosis_Other diagnosis_orginal
                &lt;dbl&gt;               &lt;dbl&gt;           &lt;dbl&gt; &lt;fct&gt;            
1                   0                   0               0 Meningioma       
2                   0                   1               0 HG glioma        
3                   1                   0               0 LG glioma        
4                   0                   0               1 Other            </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">contr_opt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"contrasts"</span>)</span>
<span id="cb22-2">contr_opt</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>        unordered           ordered 
"contr.treatment"      "contr.poly" </code></pre>
</div>
</div>
<p>The original baseline is <code>Meningioma</code>, each <code>diagnosis_</code> is compared to the <code>Meningioma</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">contr_sum_opt <span class="ot" style="color: #003B4F;">&lt;-</span> contr_opt</span>
<span id="cb24-2">contr_sum_opt[<span class="st" style="color: #20794D;">'unordered'</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'contr.sum'</span></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_sum_opt)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;"># my_naming &lt;- function(var, lvl, ordinal = FALSE, sep = "_"){</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;">#     paste(var, levels(BrainCancer$diagnosis)[lvl])</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;"># }</span></span>
<span id="cb24-8"></span>
<span id="cb24-9">BrainCancer_rec2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(status <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-10">    <span class="fu" style="color: #4758AB;">step_mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(status)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-11">    <span class="fu" style="color: #4758AB;">step_dummy</span>(diagnosis)</span>
<span id="cb24-12">    </span>
<span id="cb24-13">BrainCancer_rec2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">    <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">    <span class="fu" style="color: #4758AB;">bake</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"diagnosis"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">diagnosis_orginal =</span> BrainCancer<span class="sc" style="color: #5E5E5E;">$</span>diagnosis) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-17">    <span class="fu" style="color: #4758AB;">distinct</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  diagnosis_X1 diagnosis_X2 diagnosis_X3 diagnosis_orginal
         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt; &lt;fct&gt;            
1            1            0            0 Meningioma       
2            0            0            1 HG glioma        
3            0            1            0 LG glioma        
4           -1           -1           -1 Other            </code></pre>
</div>
</div>
<p>Thus <code>diagnosis_X1</code>, <code>diagnosis_X2</code> and <code>diagnosis_X3</code> now represents <code>Meningioma</code>, <code>HG glioma</code> and <code>LG glioma</code> compared to average baseline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">BrainCancer_wf2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">    <span class="fu" style="color: #4758AB;">add_model</span>(lr_spec)</span>
<span id="cb26-4"></span>
<span id="cb26-5">BrainCancer_fit2 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb26-7"></span>
<span id="cb26-8">BrainCancer_fit2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-9">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 5
   term         estimate std.error statistic p.value
   &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;
 1 (Intercept)    5.52      2.66       2.07   0.0380
 2 sex1          -0.184     0.288     -0.640  0.522 
 3 loc1          -0.545     0.451     -1.21   0.227 
 4 ki            -0.0695    0.0326    -2.13   0.0332
 5 gtv            0.0382    0.0366     1.04   0.296 
 6 stereo1       -0.127     0.386     -0.328  0.743 
 7 time          -0.0339    0.0155    -2.18   0.0291
 8 diagnosis_X1  -1.11      0.468     -2.37   0.0177
 9 diagnosis_X2   0.195     0.594      0.329  0.742 
10 diagnosis_X3   1.26      0.542      2.33   0.0200</code></pre>
</div>
</div>
<p>Based on the newly trained model <code>BrainCancer_fit2</code>, only <code>Meningioma</code> and <code>LG glioma</code> show significant association with survival (p-value &lt; 0.05) when compared to global average. <strong>When keeping all other variable constant</strong>, <strong>compare to global average</strong>, the patient with <code>Meningioma</code> has only 32.9% (<code>exp(-1.11018843)</code>) average survive rate, while the patient with <code>LG glioma</code> are 3.5 times (<code>exp(1.26008400)</code>) more likely to survive.</p>
<p>More about coding contrasts in base R syntax can be found at this <a href="https://marissabarlaz.github.io/portfolio/contrastcoding/">article</a>.</p>
</section>
<section id="multinomial-outcome" class="level3">
<h3 class="anchored" data-anchor-id="multinomial-outcome">Multinomial outcome</h3>
<p>Using the same dataset <code>BrainCancer</code>, now I try to predict the <code>diagnosis</code> based on the tumor location (<code>loc</code>), Karnofsky index (<code>ki</code>), Gross tumor volume (<code>gtv</code>) and Stereotactic method (<code>stereo</code>). Here we used <code>multinom_reg()</code> to model multinomial regression</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">contrasts =</span> contr_opt) <span class="co" style="color: #5E5E5E;"># reset contrasts options back to `contr.treatment`</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">ml_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">multinom_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'nnet'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-5">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span>
<span id="cb28-6"></span>
<span id="cb28-7">BrainCancer_rec3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(diagnosis <span class="sc" style="color: #5E5E5E;">~</span> loc <span class="sc" style="color: #5E5E5E;">+</span> ki <span class="sc" style="color: #5E5E5E;">+</span> gtv <span class="sc" style="color: #5E5E5E;">+</span> stereo, <span class="at" style="color: #657422;">data =</span> BrainCancer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-8">    <span class="fu" style="color: #4758AB;">update_role</span>(diagnosis, <span class="at" style="color: #657422;">new_role =</span> <span class="st" style="color: #20794D;">'outcome'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-9">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-10">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span>
<span id="cb28-11"></span>
<span id="cb28-12">BrainCancer_wf3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-13">    <span class="fu" style="color: #4758AB;">add_model</span>(ml_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-14">    <span class="fu" style="color: #4758AB;">add_recipe</span>(BrainCancer_rec3)</span>
<span id="cb28-15"></span>
<span id="cb28-16">BrainCancer_fit3 <span class="ot" style="color: #003B4F;">&lt;-</span> BrainCancer_wf3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-17">    <span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">data =</span> BrainCancer)</span>
<span id="cb28-18"></span>
<span id="cb28-19">BrainCancer_fit3</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: multinom_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
2 Recipe Steps

• step_normalize()
• step_dummy()

── Model ───────────────────────────────────────────────────────────────────────
Call:
nnet::multinom(formula = ..y ~ ., data = data, trace = FALSE)

Coefficients:
          (Intercept)          ki         gtv loc_Supratentorial stereo_SRT
LG glioma  -2.3035689  0.23860763 -0.02596393          0.3998414  0.5444269
HG glioma  -2.5894735  0.03684929  0.15897113          0.9417737  1.3658683
Other      -0.4158848 -0.29780559  0.14203552         -2.7892771  1.4289732

Residual Deviance: 187.5196 
AIC: 217.5196 </code></pre>
</div>
</div>
<p>In the multinomial regression, no p-value were reported. The coefficients represent log odds ratio.</p>
<p>Each row in the coefficient table corresponds to the model equation. eg. the first row represents the coefficients for <code>LG glioma</code> in comparison to our baseline <code>Meningioma</code>. Each column in the coefficient table corresponds to specific coefficient estimate. Thus, compared to <code>Meningioma</code>, using <code>SRT</code> Stereotactic method is about 4 times (<code>exp(1.3658683)</code>) more likely diagnose <code>HG glioma</code>. A tumor is only 6% (<code>exp(-2.7892771)</code>) chance to be diagnosed as <code>Other</code> instead of <code>Meningioma</code> if it is located at <code>Supratentorial</code> area.</p>
<p>To perform above model in base R syntax, please refer to the <a href="https://datasciencebeginners.com/2018/12/20/multinomial-logistic-regression-using-r/#:~:text=Multinomial%20regression%20is%20an%20extension,one%20or%20more%20independent%20variable.">blog post</a> by Mohit Sharma.</p>
</section>
</section>
<section id="poisson-regression" class="level2">
<h2 class="anchored" data-anchor-id="poisson-regression">Poisson regression</h2>
<p>Poisson regression is used to model count outcome. Unlike regular linear regression, count outcome is not real continuous variable. Instead, it must be positive integer and usually modeled by Poisson distribution rather than normal distribution.</p>
<p>The link function for Poisson regression is log function <img src="https://latex.codecogs.com/png.latex?%5Cln%5Clambda"> where <img src="https://latex.codecogs.com/png.latex?%5Clambda"> represents the mean of outcome.</p>
<p>In the following example, we use <code>Bikeshare</code> data to predict <code>bikers</code> outcome which represents the <em>count</em> of rental bikers</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">'Bikeshare'</span>)</span>
<span id="cb30-2"></span>
<span id="cb30-3">Bikeshare_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(bikers <span class="sc" style="color: #5E5E5E;">~</span> season <span class="sc" style="color: #5E5E5E;">+</span> weekday <span class="sc" style="color: #5E5E5E;">+</span> weathersit <span class="sc" style="color: #5E5E5E;">+</span> temp <span class="sc" style="color: #5E5E5E;">+</span> hum <span class="sc" style="color: #5E5E5E;">+</span> windspeed, <span class="at" style="color: #657422;">data =</span> Bikeshare) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-4">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(season, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"winter"</span>,<span class="st" style="color: #20794D;">'spring'</span>,<span class="st" style="color: #20794D;">'summer'</span>,<span class="st" style="color: #20794D;">'fall'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-5">    <span class="fu" style="color: #4758AB;">step_num2factor</span>(weekday, <span class="at" style="color: #657422;">transform =</span> <span class="cf" style="color: #003B4F;">function</span>(x) {x<span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>}, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'sunday'</span>,<span class="st" style="color: #20794D;">'monday'</span>,<span class="st" style="color: #20794D;">'tuesday'</span>,<span class="st" style="color: #20794D;">'wednesday'</span>,<span class="st" style="color: #20794D;">'thursday'</span>,<span class="st" style="color: #20794D;">'friday'</span>,<span class="st" style="color: #20794D;">'saturday'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-6">    <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-7">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-8">    <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;"># Bikeshare_rec %&gt;% prep() %&gt;% bake(new_data = NULL)</span></span>
<span id="cb30-11"><span class="fu" style="color: #4758AB;">library</span>(poissonreg)</span>
<span id="cb30-12">pr_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">poisson_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-13">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'glm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-14">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb30-15"></span>
<span id="cb30-16">Bikeshare_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-17">    <span class="fu" style="color: #4758AB;">add_recipe</span>(Bikeshare_rec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-18">    <span class="fu" style="color: #4758AB;">add_model</span>(pr_spec)</span>
<span id="cb30-19"></span>
<span id="cb30-20">Bikeshare_fit <span class="ot" style="color: #003B4F;">&lt;-</span> Bikeshare_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-21">     parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fit</span>(Bikeshare)</span>
<span id="cb30-22"></span>
<span id="cb30-23">Bikeshare_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-24">    <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 16 × 5
   term                       estimate std.error statistic   p.value
   &lt;chr&gt;                         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1 (Intercept)                  4.58    0.00385   1191.    0        
 2 temp                         0.426   0.00149    285.    0        
 3 hum                         -0.256   0.00108   -238.    0        
 4 windspeed                    0.0404  0.000949    42.6   0        
 5 season_spring                0.302   0.00384     78.7   0        
 6 season_summer                0.144   0.00449     32.1   1.12e-226
 7 season_fall                  0.613   0.00345    177.    0        
 8 weekday_monday              -0.0464  0.00336    -13.8   1.82e- 43
 9 weekday_tuesday             -0.0405  0.00336    -12.1   1.42e- 33
10 weekday_wednesday           -0.0524  0.00342    -15.3   4.88e- 53
11 weekday_thursday            -0.0804  0.00339    -23.7   2.70e-124
12 weekday_friday              -0.0151  0.00335     -4.51  6.47e-  6
13 weekday_saturday            -0.0187  0.00336     -5.58  2.36e-  8
14 weathersit_cloudy.misty      0.106   0.00223     47.4   0        
15 weathersit_light.rain.snow  -0.163   0.00425    -38.4   0        
16 weathersit_heavy.rain.snow  -0.0368  0.167       -0.221 8.25e-  1</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">contrasts</span>(Bikeshare<span class="sc" style="color: #5E5E5E;">$</span>weathersit)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                cloudy/misty light rain/snow heavy rain/snow
clear                      0               0               0
cloudy/misty               1               0               0
light rain/snow            0               1               0
heavy rain/snow            0               0               1</code></pre>
</div>
</div>
<p>All terms except <code>weathersit_heavy.rain.snow</code> are significantly associated with rental bikers number. - when keeping all other variables constant, compared to <code>season_winter</code>, <code>season_spring</code> will increase the mean of rental biker count by 1.35 <code>exp(0.30234965)</code>. In other words, there will be 135% bikers rental a bike in spring than winter. - when keeping all other variables constant, every unit increase in temperature will result in on average 1.53 (<code>exp(0.42588059)</code>) rental biker customer.</p>
<p><em>note:above model is not optimal model to predict rental bikers. We use the model without interactions to simplify the question and emphasize interpretation of coefficients in the context of poisson regression . To interpret the coefficients with interaction term, refer to previous regular linear regression example</em></p>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, I focus on interpret the coefficients in three GLM, and show the examples of coefficients associated with both quantitative and qualitative predictors. I also include the examples to interpret coefficients when 1) add interaction term, 2) with multi-nominal outcome and 3) with alternative contrast matrix.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>GLM</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-02-28-glm_coefficients.html</guid>
  <pubDate>Mon, 28 Feb 2022 05:00:00 GMT</pubDate>
  <media:content url="https://thumbs.dreamstime.com/b/cartoon-cottage-seamless-pattern-hand-drawn-home-facade-street-townhouse-family-house-countryside-urban-border-decor-202493554.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict chocolate rating with xgboost</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># library(lubridate)</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<section id="clean-data" class="level2">
<h2 class="anchored" data-anchor-id="clean-data">Clean Data</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>chocolate</span>
<span id="cb2-2">chocolate_raw <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cocoa_percent =</span> <span class="fu" style="color: #4758AB;">parse_number</span>(cocoa_percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">separate</span>(ingredients, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"ingredient_num"</span>,<span class="st" style="color: #20794D;">"ingredients"</span>), <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"-"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-6">        <span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">parse_number</span>(ingredient_num),</span>
<span id="cb2-7">        <span class="at" style="color: #657422;">ingredients=</span><span class="fu" style="color: #4758AB;">str_trim</span>(ingredients)</span>
<span id="cb2-8">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">map</span>(ingredients, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_split</span>(.x,<span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-11">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics=</span><span class="fu" style="color: #4758AB;">map</span>(most_memorable_characteristics, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_trim</span>(.x))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># select(cocoa_percent, ingredient_num, ingredients, most_memorable_characteristics) %&gt;%</span></span>
<span id="cb2-13">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert gredients to boolean columns</li>
</ul>
<p>using <code>unnest</code> to spread out the list column <code>ingredients</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">gredients <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, ingredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>ingredients, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="st" style="color: #20794D;">"NA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-8">    janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<ul>
<li>Convert most_memorable_characteristics to boolean columns</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">select</span>(line_n, most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(most_memorable_characteristics)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># distinct(most_memorable_characteristics) %&gt;% </span></span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;"># pivot_wider(names_from=most_memorable_characteristics, values_from=tmp) %&gt;% </span></span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
<p>There are 972 most_memorable_characteristics in total</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># mutate(most_memorable_characteristics = fct_lump_min(most_memorable_characteristics, min=100)) %&gt;% </span></span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">group_by</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;">count</span>(<span class="at" style="color: #657422;">sort=</span>T) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">20</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>n, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics,n))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>n), <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">hjust=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"# of chocolates"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most memorable characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Pick top 12 most_memorable_characteristics to convert to boolean column</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">most_memorable_characteristics <span class="ot" style="color: #003B4F;">&lt;-</span> most_memorable_characteristics <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">most_memorable_characteristics =</span> <span class="fu" style="color: #4758AB;">fct_lump_min</span>(most_memorable_characteristics, <span class="at" style="color: #657422;">min=</span><span class="dv" style="color: #AD0000;">100</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>most_memorable_characteristics, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_n), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x),<span class="dv" style="color: #AD0000;">0</span>,.x))</span></code></pre></div>
</details>
</div>
<ul>
<li>create chocolate_clean data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb7-2">    chocolate_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_n=</span><span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>ingredients, <span class="sc" style="color: #5E5E5E;">-</span>most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">left_join</span>(gredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">left_join</span>(most_memorable_characteristics) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">I</span>()</span></code></pre></div>
</details>
</div>
</section>
<section id="explore-data" class="level2">
<h2 class="anchored" data-anchor-id="explore-data">Explore Data</h2>
<p>Several features are explored in terms of their association with rating.</p>
<ul>
<li><code>country_of_bean_origin</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(country_of_bean_origin, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">10</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>country_of_bean_origin)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Blend and non-blend on <code>country_of_bean_origin</code> shows big difference, thus we convert <code>country_of_bean_origin</code> to <code>country_of_bean_origin_blend</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country_of_bean_origin_blend =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(country_of_bean_origin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"Blend"</span>, country_of_bean_origin, <span class="st" style="color: #20794D;">"Non-blend"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li><code>company_manufacturer</code> and <code>company_location</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_manufacturer =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_manufacturer, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.01</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_manufacturer, rating, median))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_manufacturer)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_manufacturer"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">company_location =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(company_location, <span class="at" style="color: #657422;">n=</span><span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>rating, <span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(company_location, rating))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>company_location)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"company_location"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>cocoa_percent</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>rating</code> is not as continuous as what i originally imagined. Thus, I convert <code>rating</code> to nominal variable <code>rating_bl</code> using 3 as threshold</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rating_bl =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(rating <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">"&gt;=3"</span>, <span class="st" style="color: #20794D;">"&lt; 3"</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">group_by</span>(rating_bl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">count</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
# Groups:   rating_bl [2]
  rating_bl     n
  &lt;chr&gt;     &lt;int&gt;
1 &lt; 3         566
2 &gt;=3        1964</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cocoa_percent, <span class="at" style="color: #657422;">y=</span>rating_bl)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span><span class="fu" style="color: #4758AB;">as.factor</span>(cocoa))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-5">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"rating"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"cocoa as most_memorable_characteristics"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>most_memorable_characteristics</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(Other<span class="sc" style="color: #5E5E5E;">:</span>creamy), as.factor)</span></code></pre></div>
</details>
</div>
<p>most_memorable_characteristics like <code>cocoa</code> and <code>creamy</code> positive effect rating, while <code>fatty</code>, <code>earthy</code>, <code>sandy</code>, <code>sour</code> and <code>sweet</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, fatty<span class="sc" style="color: #5E5E5E;">:</span>creamy) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(most_memorable_characteristics, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-7">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb17-9">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-10">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-11">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"most_memorable_characteristics"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"is most_memorable_characteristics?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-12">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>ingredients</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">chocolate_clean <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb18-2">    chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">igrdt_beans=</span>b, <span class="at" style="color: #657422;">igrdt_sugar=</span>s, <span class="at" style="color: #657422;">igrdt_cocoa=</span>c, <span class="at" style="color: #657422;">igrdt_lecithin=</span>l, <span class="at" style="color: #657422;">igrdt_vanilla=</span>v, <span class="at" style="color: #657422;">igrdt_salt=</span>sa, <span class="at" style="color: #657422;">igrdt_sweeter=</span>s_2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)), as.factor)</span></code></pre></div>
</details>
</div>
<p>ingredient number <code>ingredient_num</code> between 2-3 are associated with higher rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredient_num=</span><span class="fu" style="color: #4758AB;">as.factor</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(ingredient_num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ingredient_num, <span class="at" style="color: #657422;">y=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>ingrediants like <code>beans</code> and <code>sugar</code> positively effect rating, while <code>vanilla</code>, <code>sweeter</code> and <code>salt</code> negatively effect rating.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">    <span class="fu" style="color: #4758AB;">select</span>(rating, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">!</span>rating, <span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"yes"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ingredients =</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"igrdt_"</span>,<span class="st" style="color: #20794D;">""</span>,ingredients)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span><span class="fu" style="color: #4758AB;">reorder</span>(ingredients, rating, <span class="at" style="color: #657422;">FUN=</span>median), <span class="at" style="color: #657422;">x=</span>rating)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>yes)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-8">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb20-9">        <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb20-10">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-11">    <span class="fu" style="color: #4758AB;">scale_fill_discrete</span>(<span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"0"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"No"</span>, <span class="st" style="color: #20794D;">"1"</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"ingredients"</span>, <span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">"contain the ingredient?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-13">    <span class="cn" style="color: #8f5902;">NULL</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="ml" class="level2">
<h2 class="anchored" data-anchor-id="ml">ML</h2>
<p>Based on the exploratory analysis, to study the effect on overall rating of chocolates, the following features are selected for building ML models. Plus, using nominal feature <code>rating_bl</code> instead of numeric feature <code>rating</code> as outcome.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">chocolate_df <span class="ot" style="color: #003B4F;">&lt;-</span> chocolate_clean <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">    <span class="fu" style="color: #4758AB;">select</span>(rating_bl, company_manufacturer, country_of_bean_origin_blend, cocoa_percent, ingredient_num, <span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">'igrdt_'</span>), cocoa, creamy, fatty, earthy, sandy, sour, sweet) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>igrdt_cocoa, <span class="sc" style="color: #5E5E5E;">-</span>igrdt_lecithin) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;">na.omit</span>()</span></code></pre></div>
</details>
</div>
<section id="split-samples" class="level3">
<h3 class="anchored" data-anchor-id="split-samples">split samples</h3>
<ul>
<li><code>initial_split</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb22-2">chocolate_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(chocolate_df, <span class="at" style="color: #657422;">strata =</span> rating_bl)</span>
<span id="cb22-3">chocolate_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(chocolate_split)</span>
<span id="cb22-4">chocolate_testing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(chocolate_split)</span></code></pre></div>
</details>
</div>
<ul>
<li>resample</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb23-2">folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(chocolate_train, <span class="at" style="color: #657422;">v =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb23-3">folds</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>#  10-fold cross-validation 
# A tibble: 10 × 2
   splits             id    
   &lt;list&gt;             &lt;chr&gt; 
 1 &lt;split [1647/184]&gt; Fold01
 2 &lt;split [1648/183]&gt; Fold02
 3 &lt;split [1648/183]&gt; Fold03
 4 &lt;split [1648/183]&gt; Fold04
 5 &lt;split [1648/183]&gt; Fold05
 6 &lt;split [1648/183]&gt; Fold06
 7 &lt;split [1648/183]&gt; Fold07
 8 &lt;split [1648/183]&gt; Fold08
 9 &lt;split [1648/183]&gt; Fold09
10 &lt;split [1648/183]&gt; Fold10</code></pre>
</div>
</div>
</section>
<section id="recipe" class="level3">
<h3 class="anchored" data-anchor-id="recipe">recipe</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">chocolate_rec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb25-2">    <span class="fu" style="color: #4758AB;">recipe</span>(rating_bl <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> chocolate_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">step_other</span>(company_manufacturer, <span class="at" style="color: #657422;">threshold=</span><span class="fl" style="color: #AD0000;">0.01</span>, <span class="at" style="color: #657422;">other=</span><span class="st" style="color: #20794D;">"otherCompany"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;"># step_mutate_at(c("company_manufacturer","country_of_bean_origin_blend", "rating_bl"), fn = ~as.factor(.x)) %&gt;% </span></span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-6">    <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span>
<span id="cb25-7"></span>
<span id="cb25-8">chocolate_rec</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
<p>check preprocessed data.frame</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">chocolate_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">    <span class="fu" style="color: #4758AB;">prep</span>(<span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;">juice</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,831 × 20
   cocoa_percent ingre…¹ ratin…² compa…³ compa…⁴ compa…⁵ compa…⁶ compa…⁷ count…⁸
           &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1            70       4 &lt; 3           0       0       0       0       0       1
 2            70       4 &lt; 3           0       0       0       0       0       1
 3            60       3 &lt; 3           0       0       0       0       1       1
 4            70       2 &lt; 3           0       0       0       0       1       1
 5            70       2 &lt; 3           0       0       0       0       1       1
 6            75       4 &lt; 3           0       0       0       0       1       1
 7            75       4 &lt; 3           0       0       0       0       1       1
 8            75       5 &lt; 3           0       0       0       0       1       1
 9            75       5 &lt; 3           0       0       0       0       1       1
10            65       6 &lt; 3           0       0       0       0       1       1
# … with 1,821 more rows, 11 more variables: igrdt_sugar_X1 &lt;dbl&gt;,
#   igrdt_vanilla_X1 &lt;dbl&gt;, igrdt_salt_X1 &lt;dbl&gt;, igrdt_sweeter_X1 &lt;dbl&gt;,
#   cocoa_X1 &lt;dbl&gt;, creamy_X1 &lt;dbl&gt;, fatty_X1 &lt;dbl&gt;, earthy_X1 &lt;dbl&gt;,
#   sandy_X1 &lt;dbl&gt;, sour_X1 &lt;dbl&gt;, sweet_X1 &lt;dbl&gt;, and abbreviated variable
#   names ¹​ingredient_num, ²​rating_bl, ³​company_manufacturer_Arete,
#   ⁴​company_manufacturer_Bonnat, ⁵​company_manufacturer_Fresco,
#   ⁶​company_manufacturer_Soma, ⁷​company_manufacturer_otherCompany, …
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
</section>
<section id="grid-tune-xgboost" class="level3">
<h3 class="anchored" data-anchor-id="grid-tune-xgboost">grid tune xgboost</h3>
<ul>
<li>create model <code>boost_tree</code></li>
</ul>
<p>Details about <code>boost_tree</code> can be found https://parsnip.tidymodels.org/reference/details_boost_tree_xgboost.html</p>
<p><em>require library <code>xgboost</code> installed.</em></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">xg_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb29-2">    <span class="fu" style="color: #4758AB;">boost_tree</span>(</span>
<span id="cb29-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), <span class="co" style="color: #5E5E5E;"># the number (or proportion) of predictors that will be randomly sampled</span></span>
<span id="cb29-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>() <span class="co" style="color: #5E5E5E;"># minimum number of data points in a node</span></span>
<span id="cb29-5">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-6">    <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"xgboost"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># importance="permutation"</span></span>
<span id="cb29-7">    <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'classification'</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li>define grid</li>
</ul>
<p><code>grid_max_entropy</code>, <code>grid_regular</code>, <code>grid_random</code> can be used for quickly specify levels for tuned hyperparameters.</p>
<p>be aware that <code>mtry</code> usually requires <code>range</code> parameters, it usually contains the <code>sqrt(predictor_num)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">xg_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">grid_regular</span>(</span>
<span id="cb30-2">    <span class="fu" style="color: #4758AB;">mtry</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>)),</span>
<span id="cb30-3">    <span class="fu" style="color: #4758AB;">min_n</span>(),</span>
<span id="cb30-4">    <span class="at" style="color: #657422;">levels =</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># each tune how many levels</span></span>
<span id="cb30-5">)</span>
<span id="cb30-6"></span>
<span id="cb30-7">xg_grid</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 25 × 2
    mtry min_n
   &lt;int&gt; &lt;int&gt;
 1     3     2
 2     4     2
 3     6     2
 4     8     2
 5    10     2
 6     3    11
 7     4    11
 8     6    11
 9     8    11
10    10    11
# … with 15 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li>create workflow</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">xg_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">    <span class="fu" style="color: #4758AB;">add_model</span>(xg_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-3">    <span class="fu" style="color: #4758AB;">add_recipe</span>(chocolate_rec)</span>
<span id="cb32-4"></span>
<span id="cb32-5">xg_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = tune()
  min_n = tune()

Computational engine: xgboost </code></pre>
</div>
</div>
<ul>
<li>tune model to get result</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">system.time</span>(</span>
<span id="cb34-2">    xg_res <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb34-3">        xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-4">        <span class="fu" style="color: #4758AB;">tune_grid</span>(</span>
<span id="cb34-5">            <span class="at" style="color: #657422;">resamples =</span> folds,</span>
<span id="cb34-6">            <span class="at" style="color: #657422;">grid =</span> xg_grid</span>
<span id="cb34-7">            )</span>
<span id="cb34-8">    )</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
 30.965   0.215  31.417 </code></pre>
</div>
</div>
<ul>
<li>evaluate models</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> min_n, <span class="at" style="color: #657422;">y=</span>mean, <span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-4">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>.metric, <span class="at" style="color: #657422;">scales=</span><span class="st" style="color: #20794D;">"free"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-5">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-6">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group=</span><span class="fu" style="color: #4758AB;">as.factor</span>(mtry))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-7">    <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-8">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"metrics estimate"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">'minimum number of data points in a node (min_n)'</span>, <span class="at" style="color: #657422;">color=</span><span class="st" style="color: #20794D;">'the number of predictors that will be randomly sampled (mtry)'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-9">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>select hyperparameters and finalize wf</li>
</ul>
<p><code>show_best(metric = )</code> allows to see the top 5 from <code>xg_res %&gt;% collect_metrics()</code></p>
<p><code>select_best</code>, <code>select_by_pct_loss</code>, <code>select_by_one_std_err</code> select hyperparameters and corresponding <code>.config</code> to a tibble.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">xg_tune_hy <span class="ot" style="color: #003B4F;">&lt;-</span> xg_res <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">    <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"accuracy"</span>)</span>
<span id="cb37-3"></span>
<span id="cb37-4">xg_tune_hy</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
   mtry min_n .config              
  &lt;int&gt; &lt;int&gt; &lt;chr&gt;                
1    10    11 Preprocessor1_Model10</code></pre>
</div>
</div>
<p>finalize model using selected hyperparameters</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb39-2">  xg_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(xg_tune_hy)</span>
<span id="cb39-4"></span>
<span id="cb39-5">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Boosted Tree Model Specification (classification)

Main Arguments:
  mtry = 10
  min_n = 11

Computational engine: xgboost </code></pre>
</div>
</div>
</section>
<section id="last_fit-model" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-model"><code>last_fit</code> model</h3>
<ul>
<li>use <code>last_fit(split)</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">final_fit <span class="ot" style="color: #003B4F;">&lt;-</span> final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">    <span class="fu" style="color: #4758AB;">last_fit</span>(chocolate_split)</span>
<span id="cb41-3"></span>
<span id="cb41-4">final_fit</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># Resampling results
# Manual resampling 
# A tibble: 1 × 6
  splits             id               .metrics .notes   .predictions .workflow 
  &lt;list&gt;             &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    
1 &lt;split [1831/612]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;</code></pre>
</div>
</div>
<ul>
<li><code>collect_metrics</code> for overall data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb43-2">    <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric  .estimator .estimate .config             
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy binary         0.786 Preprocessor1_Model1
2 roc_auc  binary         0.668 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>metrics are comparable to training data, so not overfiting.</p>
<ul>
<li><code>collect_predictions</code> for test data</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb45-2">    <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 612 × 7
   id               `.pred_&lt; 3` `.pred_&gt;=3`  .row .pred_class rating_bl .config 
   &lt;chr&gt;                  &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;     &lt;chr&gt;   
 1 train/test split      0.141        0.859     3 &gt;=3         &gt;=3       Preproc…
 2 train/test split      0.125        0.875    10 &gt;=3         &lt; 3       Preproc…
 3 train/test split      0.0668       0.933    11 &gt;=3         &lt; 3       Preproc…
 4 train/test split      0.156        0.844    17 &gt;=3         &gt;=3       Preproc…
 5 train/test split      0.0668       0.933    24 &gt;=3         &gt;=3       Preproc…
 6 train/test split      0.0668       0.933    25 &gt;=3         &gt;=3       Preproc…
 7 train/test split      0.0711       0.929    32 &gt;=3         &gt;=3       Preproc…
 8 train/test split      0.236        0.764    42 &gt;=3         &lt; 3       Preproc…
 9 train/test split      0.491        0.509    46 &gt;=3         &lt; 3       Preproc…
10 train/test split      0.385        0.615    55 &gt;=3         &lt; 3       Preproc…
# … with 602 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<ul>
<li><code>roc_auc</code> and <code>roc_curve</code> on test data</li>
</ul>
<p>calculate <code>roc_auc</code> manually on test data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;">roc_auc</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  .metric .estimator .estimate
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;
1 roc_auc binary         0.668</code></pre>
</div>
</div>
<p>plot <code>roc_curve</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(<span class="at" style="color: #657422;">truth=</span>rating_bl, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.pred_&lt; 3</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;">autoplot</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li><code>extract_workflow()</code> to save <code>final_trained_wf</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">final_trained_wf <span class="ot" style="color: #003B4F;">&lt;-</span> final_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb50-2">    <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb50-3"></span>
<span id="cb50-4">final_trained_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: boost_tree()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_dummy()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><p><code>extract_*</code> information from <code>final_trained_wf</code></p>
<ul>
<li><code>extract_fit_engine()</code> is engine-specific model</li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;">extract_fit_engine</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_fit_parsnip()</code> is parsnip model object</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>parsnip model object

##### xgb.Booster
raw: 21.7 Kb 
call:
  xgboost::xgb.train(params = list(eta = 0.3, max_depth = 6, gamma = 0, 
    colsample_bytree = 1, colsample_bynode = 0.526315789473684, 
    min_child_weight = 11L, subsample = 1, objective = "binary:logistic"), 
    data = x$data, nrounds = 15, watchlist = x$watchlist, verbose = 0, 
    nthread = 1)
params (as set within xgb.train):
  eta = "0.3", max_depth = "6", gamma = "0", colsample_bytree = "1", colsample_bynode = "0.526315789473684", min_child_weight = "11", subsample = "1", objective = "binary:logistic", nthread = "1", validate_parameters = "TRUE"
xgb.attributes:
  niter
callbacks:
  cb.evaluation.log()
# of features: 19 
niter: 15
nfeatures : 19 
evaluation_log:
    iter training_logloss
       1        0.6020652
       2        0.5525599
---                      
      14        0.4693209
      15        0.4688216</code></pre>
</div>
</div>
<ul>
<li><code>extract_recipe</code> or <code>extract_preprocessing</code> to get recipe/preprocessing</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">extract_preprocessor</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor         16

Operations:

Collapsing factor levels for company_manufacturer
Dummy variables from all_nominal_predictors()
Zero variance filter on all_predictors()</code></pre>
</div>
</div>
</section>
<section id="feature-importance" class="level3">
<h3 class="anchored" data-anchor-id="feature-importance">feature importance</h3>
<ul>
<li><code>vip()</code> plot top 10</li>
<li><code>vi_model()</code> return tibble</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">final_trained_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;">vip</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="final-notes" class="level2">
<h2 class="anchored" data-anchor-id="final-notes">Final notes</h2>
<ul>
<li>I convert numeric <code>rating</code> to categorical rating using threshold because, based on the exploratory analysis, the <code>rating</code> values are not continuous.</li>
<li>The <code>boost_tree</code> did not produce good estimate for the data.
<ul>
<li>Other models, like <code>rand_forest()</code>, <code>logistic_reg</code> and <code>svm_linear</code> are worth to try.</li>
<li>Tuning other hyperparameters <code>tree_depth</code>, <code>learning_rate</code> and <code>trees</code> are worth to try. <em>I don’t know which tune-able hyperparameter corresponds to regularization <code>gamma</code></em>.</li>
</ul></li>
<li>Julia Silge posted a <a href="https://www.youtube.com/watch?v=w-lF65hKtrQ">screencast</a> and <a href="https://juliasilge.com/blog/chocolate-ratings/">blog</a> of using <code>rand_forest()</code> and <code>svm_linear</code> training rating as linear model on the same dataset.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2022-01-18-chocolate.html</guid>
  <pubDate>Sun, 23 Jan 2022 05:00:00 GMT</pubDate>
  <media:content url="https://www.history.com/.image/ar_4:3%2Cc_fill%2Ccs_srgb%2Cfl_progressive%2Cq_auto:good%2Cw_1200/MTc3OTk5Njc1MTU5MjI1OTY1/valentines-day-chocolate-gettyimages-923430892.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday: predict ultra race time</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</link>
  <description><![CDATA[ 



<p>Load required libraries</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span></code></pre></div>
</details>
</div>
<section id="data-skim" class="level2">
<h2 class="anchored" data-anchor-id="data-skim">data skim</h2>
<p>Data README is available at <a href="%60r%20readme_link%60">here</a>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ultra_rankings <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>ultra_rankings</span>
<span id="cb2-2">race <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>race</span>
<span id="cb2-3"></span>
<span id="cb2-4">ultra_join <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb2-5">    ultra_rankings <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">left_join</span>(race, <span class="at" style="color: #657422;">by=</span><span class="st" style="color: #20794D;">"race_year_id"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">skimr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">skim</span>(ultra_join)</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">ultra_join</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">137803</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">20</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Date</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">difftime</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="even">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">runner</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">73629</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">time</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">72840</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">gender</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">nationality</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">133</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">event</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">57</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">435</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">race</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">63</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">371</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">city</td>
<td style="text-align: right;">15599</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">308</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">country</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">60</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participation</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: Date</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">date</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">2012-01-14</td>
<td style="text-align: left;">2021-09-03</td>
<td style="text-align: left;">2017-10-13</td>
<td style="text-align: right;">711</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: difftime</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 18%">
<col style="width: 13%">
<col style="width: 18%">
<col style="width: 9%">
<col style="width: 14%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">start_time</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">0 secs</td>
<td style="text-align: left;">82800 secs</td>
<td style="text-align: left;">05:00:00</td>
<td style="text-align: right;">39</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 15%">
<col style="width: 9%">
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">race_year_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">26678.70</td>
<td style="text-align: right;">20156.18</td>
<td style="text-align: right;">2320</td>
<td style="text-align: right;">8670.0</td>
<td style="text-align: right;">21795.0</td>
<td style="text-align: right;">40621</td>
<td style="text-align: right;">72496.0</td>
<td style="text-align: left;">▇▃▃▂▂</td>
</tr>
<tr class="even">
<td style="text-align: left;">rank</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">253.56</td>
<td style="text-align: right;">390.80</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">31.0</td>
<td style="text-align: right;">87.0</td>
<td style="text-align: right;">235</td>
<td style="text-align: right;">1962.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">age</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">46.25</td>
<td style="text-align: right;">10.11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">40.0</td>
<td style="text-align: right;">46.0</td>
<td style="text-align: right;">53</td>
<td style="text-align: right;">133.0</td>
<td style="text-align: left;">▁▇▂▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">time_in_seconds</td>
<td style="text-align: right;">17791</td>
<td style="text-align: right;">0.87</td>
<td style="text-align: right;">122358.26</td>
<td style="text-align: right;">37234.38</td>
<td style="text-align: right;">3600</td>
<td style="text-align: right;">96566.0</td>
<td style="text-align: right;">114167.0</td>
<td style="text-align: right;">148020</td>
<td style="text-align: right;">296806.0</td>
<td style="text-align: left;">▁▇▆▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">distance</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">154.08</td>
<td style="text-align: right;">39.22</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">160.9</td>
<td style="text-align: right;">162.6</td>
<td style="text-align: right;">168</td>
<td style="text-align: right;">179.1</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">elevation_gain</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">6473.94</td>
<td style="text-align: right;">3293.50</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3910.0</td>
<td style="text-align: right;">6640.0</td>
<td style="text-align: right;">9618</td>
<td style="text-align: right;">14430.0</td>
<td style="text-align: left;">▅▆▆▇▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">elevation_loss</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">-6512.20</td>
<td style="text-align: right;">3305.73</td>
<td style="text-align: right;">-14440</td>
<td style="text-align: right;">-9618.0</td>
<td style="text-align: right;">-6810.0</td>
<td style="text-align: right;">-3950</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: left;">▁▇▆▅▅</td>
</tr>
<tr class="even">
<td style="text-align: left;">aid_stations</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">9.58</td>
<td style="text-align: right;">7.56</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">12.0</td>
<td style="text-align: right;">16</td>
<td style="text-align: right;">56.0</td>
<td style="text-align: left;">▇▇▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">participants</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">510.75</td>
<td style="text-align: right;">881.25</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">65.0</td>
<td style="text-align: right;">400</td>
<td style="text-align: right;">2900.0</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<p>We want to estimate the time (time_in_seconds) for runner to finish based on the features.</p>
<section id="the-effect-of-gender-and-age" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-gender-and-age">the effect of gender and age</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_decade =</span> <span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">*</span> (age <span class="sc" style="color: #5E5E5E;">%/%</span> <span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, gender, age, age_decade) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">group_by</span>(age_decade, gender) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb4-9">        <span class="at" style="color: #657422;">time_in_seconds_sd =</span> <span class="fu" style="color: #4758AB;">sd</span>(time_in_seconds),</span>
<span id="cb4-10">         <span class="at" style="color: #657422;">time_in_seconds =</span> <span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb4-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age_decade, <span class="at" style="color: #657422;">color=</span>gender, <span class="at" style="color: #657422;">group=</span>gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.2</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;">scale_color_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"age"</span>, <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-18">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="the-effect-of-nationality-age-gender" class="level3">
<h3 class="anchored" data-anchor-id="the-effect-of-nationality-age-gender">the effect of nationality, age, gender</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">count</span>(nationality, <span class="at" style="color: #657422;">sort=</span><span class="cn" style="color: #8f5902;">TRUE</span>) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  nationality     n
  &lt;fct&gt;       &lt;int&gt;
1 Other       50563
2 USA         47259
3 FRA         28905
4 GBR         11076</code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age, <span class="at" style="color: #657422;">fill=</span>nationality), <span class="at" style="color: #657422;">group=</span>nationality) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(gender)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">stat=</span><span class="st" style="color: #20794D;">"density"</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>nationality</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">nationality =</span> <span class="fu" style="color: #4758AB;">fct_lump</span>(nationality, <span class="at" style="color: #657422;">prop=</span><span class="fl" style="color: #AD0000;">0.05</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(nationality, time_in_seconds), <span class="at" style="color: #657422;">y=</span>time_in_seconds, <span class="at" style="color: #657422;">fill=</span>nationality)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-8">    <span class="fu" style="color: #4758AB;">scale_fill_viridis_d</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"runner's nationality"</span>, <span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-10">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-distance" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-distance">effect of distance</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>distance, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-elevation" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-elevation">effect of elevation</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb10-5">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), elevation_gain,  <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb10-6">        )) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>elevation , <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-9">    <span class="fu" style="color: #4758AB;">geom_smooth</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"time (second)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>())</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="effect-of-date" class="level3">
<h3 class="anchored" data-anchor-id="effect-of-date">effect of date</h3>
<p>The year of the race</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb11-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb11-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb11-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb11-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb11-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb11-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_year, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The month of race can be the proxy to estimate the season when race was hosted. However, here I did not take the geographic information (hemisphere) into consideration.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">race_year=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date), </span>
<span id="cb12-5">        <span class="at" style="color: #657422;">race_month=</span>lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date)</span>
<span id="cb12-6">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">group_by</span>(race_month) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb12-9">        <span class="at" style="color: #657422;">time_in_seconds_sd=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds),</span>
<span id="cb12-10">        <span class="at" style="color: #657422;">time_in_seconds=</span><span class="fu" style="color: #4758AB;">mean</span>(time_in_seconds)</span>
<span id="cb12-11">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-12">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>race_month, <span class="at" style="color: #657422;">y=</span>time_in_seconds)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-15">    <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-16">    <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">-</span> time_in_seconds_sd, <span class="at" style="color: #657422;">ymax=</span>time_in_seconds <span class="sc" style="color: #5E5E5E;">+</span> time_in_seconds_sd), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="learning-models" class="level2">
<h2 class="anchored" data-anchor-id="learning-models">learning models</h2>
<p>Here I will perform two distinct models – linear regression and random forest to predict the race time using runner’s gender, age, nationality, elevation and distance of race.</p>
<section id="data-budget" class="level3">
<h3 class="anchored" data-anchor-id="data-budget">data budget</h3>
<p>inistal split to train and test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">ultra_df <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_join <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(time_in_seconds)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(gender)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">filter</span>(distance <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">150</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">elevation =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(</span>
<span id="cb13-7">        elevation_gain <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss), </span>
<span id="cb13-8">        elevation_gain,</span>
<span id="cb13-9">        <span class="fu" style="color: #4758AB;">abs</span>(elevation_loss)</span>
<span id="cb13-10">        )</span>
<span id="cb13-11">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;">select</span>(time_in_seconds, age, gender, nationality, distance, elevation)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">2021</span>)</span>
<span id="cb13-15">ultra_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(ultra_df, <span class="at" style="color: #657422;">strata =</span> time_in_seconds)</span>
<span id="cb13-16">ultra_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(ultra_split)</span>
<span id="cb13-17">ultra_test <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<p>create resamples for cross validation</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">124</span>)</span>
<span id="cb14-2">ultra_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(ultra_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="recipes-for-feature-engineer" class="level3">
<h3 class="anchored" data-anchor-id="recipes-for-feature-engineer">recipes for feature engineer</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ultra_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(time_in_seconds <span class="sc" style="color: #5E5E5E;">~</span>., <span class="at" style="color: #657422;">data =</span> ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">step_other</span>(nationality) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">step_string2factor</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="co" style="color: #5E5E5E;"># step_dummy(all_nominal_predictors()) %&gt;% </span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">I</span>()</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># want to test whether dummy variables affect the model behave</span></span>
<span id="cb15-9">ind_rec <span class="ot" style="color: #003B4F;">&lt;-</span> ultra_rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>())</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-linear-model" class="level3">
<h3 class="anchored" data-anchor-id="fit-linear-model">fit linear model</h3>
<p>specify models</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">lm_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'lm'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span></code></pre></div>
</details>
</div>
<p>Does linear model need dummy variable? Using <code>workflow_set</code> to test</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">lm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_set</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;">preproc =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="st" style="color: #20794D;">"nodummy"</span><span class="ot" style="color: #003B4F;">=</span>ultra_rec, <span class="st" style="color: #20794D;">"dummy"</span><span class="ot" style="color: #003B4F;">=</span>ind_rec),</span>
<span id="cb17-3">  <span class="at" style="color: #657422;">models =</span> <span class="fu" style="color: #4758AB;">list</span>(lm_spec)</span>
<span id="cb17-4">)</span>
<span id="cb17-5"></span>
<span id="cb17-6">lm_rs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow_map</span>(</span>
<span id="cb17-7">  lm_wf, <span class="st" style="color: #20794D;">'fit_resamples'</span>, <span class="at" style="color: #657422;">resamples=</span>ultra_folds</span>
<span id="cb17-8">  )</span>
<span id="cb17-9"></span>
<span id="cb17-10">lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 9
  wflow_id           .config preproc model .metric .esti…¹    mean     n std_err
  &lt;chr&gt;              &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;
1 nodummy_linear_reg Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
2 nodummy_linear_reg Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
3 dummy_linear_reg   Prepro… AsIs    line… rmse    standa… 2.39e+4    10 6.94e+1
4 dummy_linear_reg   Prepro… AsIs    line… rsq     standa… 5.66e-1    10 2.73e-3
# … with abbreviated variable name ¹​.estimator</code></pre>
</div>
</div>
<p>Based on the r-square value, the linear model with age, distance, elevation, gender and nationality explained ~57% variance of time_in_seconds.</p>
<p>Using dummy variable or not does not change the metrics. In fact, the number of coefficients will be exactly same no matter whether using dummy or not. Below shows coefficients of linear regression by fitting the “nodummy_linear_reg” workflow to the training data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">lm_coef <span class="ot" style="color: #003B4F;">&lt;-</span> lm_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">fit</span>(ultra_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">tidy</span>()</span>
<span id="cb19-5"></span>
<span id="cb19-6">lm_coef</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 5
  term             estimate std.error statistic   p.value
  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
1 (Intercept)       142711.     217.      658.  0        
2 age                 4220.      83.3      50.6 0        
3 genderW             6315.     236.       26.8 1.82e-157
4 nationalityGBR    -25432.     389.      -65.3 0        
5 nationalityJPN    -20211.     406.      -49.8 0        
6 nationalityUSA    -30025.     302.      -99.6 0        
7 nationalityother  -19682.     254.      -77.6 0        
8 distance            2630.      99.2      26.5 2.65e-154
9 elevation          17421.     117.      149.  0        </code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lm_coef <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">filter</span>(term<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"(Intercept)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> estimate, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(term, estimate))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill=</span>(estimate <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>)), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xmin=</span>estimate <span class="sc" style="color: #5E5E5E;">-</span> std.error, <span class="at" style="color: #657422;">xmax =</span> estimate <span class="sc" style="color: #5E5E5E;">+</span> std.error), <span class="at" style="color: #657422;">width=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">fill=</span><span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">y =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Elevation, being a women (compare to being a men), age and distance positively affect race time, while racers from JPN/GBR/USA/other (compare to racers from FRA) finish the race in shorter time.</p>
</section>
<section id="fit-random-forest-model-using-workflow" class="level3">
<h3 class="anchored" data-anchor-id="fit-random-forest-model-using-workflow">fit random forest model using workflow</h3>
<p>Using random forest as model to get Resampling results</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">rf_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">'ranger'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">'regression'</span>)</span>
<span id="cb22-4"></span>
<span id="cb22-5">rf_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">add_model</span>(rf_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;">add_recipe</span>(ultra_rec)</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;"># resample evaluate </span></span>
<span id="cb22-10">rf_rs  <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-11">  <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb22-12">    <span class="at" style="color: #657422;">resamples =</span> ultra_folds</span>
<span id="cb22-13">  )</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 6
  .metric .estimator      mean     n  std_err .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18535.       10 57.2     Preprocessor1_Model1
2 rsq     standard       0.738    10  0.00219 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Compared to linear model shown above, random forest with same predictors can explain more variance of Y (74% vs.&nbsp;56%) and show smaller rmse (1.8e4 vs.&nbsp;2.4e4).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb25-2">  rf_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"random forest"</span>),</span>
<span id="cb25-6">  lm_rs  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-7">    <span class="fu" style="color: #4758AB;">collect_metrics</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-8">    <span class="fu" style="color: #4758AB;">filter</span>(wflow_id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'nodummy_linear_reg'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-9">    <span class="fu" style="color: #4758AB;">select</span>(.metric, mean, std_err) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">model =</span> <span class="st" style="color: #20794D;">"linear reg"</span>)</span>
<span id="cb25-11">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> model, <span class="at" style="color: #657422;">y =</span> mean)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(.metric), <span class="at" style="color: #657422;">scales =</span> <span class="st" style="color: #20794D;">'free'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">ymin=</span>mean <span class="sc" style="color: #5E5E5E;">-</span> std_err, <span class="at" style="color: #657422;">ymax=</span>mean <span class="sc" style="color: #5E5E5E;">+</span> std_err), <span class="at" style="color: #657422;">width=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notes: above plot can also be done by autoplot if we perform the comparison between linear regression and random forest models using <code>workflow_set</code>.</p>
</section>
<section id="last_fit-test-data-using-random-forest-result" class="level3">
<h3 class="anchored" data-anchor-id="last_fit-test-data-using-random-forest-result"><code>last_fit</code> test data using random forest result</h3>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_final_rs <span class="ot" style="color: #003B4F;">&lt;-</span> rf_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">last_fit</span>(ultra_split)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric .estimator .estimate .config             
  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 rmse    standard   18558.    Preprocessor1_Model1
2 rsq     standard       0.737 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Different from <code>fit_resample</code> results, these metrics are calculated on the test data. The value is very close to the values done on training data (resample data), thus the model is not over-fitted.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">final_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_final_rs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">extract_workflow</span>()</span>
<span id="cb29-3"></span>
<span id="cb29-4">final_wf</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: rand_forest()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_other()
• step_normalize()
• step_string2factor()

── Model ───────────────────────────────────────────────────────────────────────
Ranger result

Call:
 ranger::ranger(x = maybe_data_frame(x), y = y, num.threads = 1,      verbose = FALSE, seed = sample.int(10^5, 1)) 

Type:                             Regression 
Number of trees:                  500 
Sample size:                      83042 
Number of independent variables:  5 
Mtry:                             2 
Target node size:                 5 
Variable importance mode:         none 
Splitrule:                        variance 
OOB prediction error (MSE):       342750489 
R squared (OOB):                  0.7386915 </code></pre>
</div>
</div>
<p>The above <strong>trained</strong> workflow from <code>last_fit</code> can be saved in <code>.rda</code> for future prediction</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># using final_wf for prediction</span></span>
<span id="cb31-2">final_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">predict</span>(<span class="at" style="color: #657422;">new_data =</span> ultra_train <span class="sc" style="color: #5E5E5E;">%&gt;%</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>)) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
    .pred
    &lt;dbl&gt;
1 108741.</code></pre>
</div>
</div>
</section>
</section>
<section id="what-techniques-i-learned" class="level2">
<h2 class="anchored" data-anchor-id="what-techniques-i-learned">what techniques i learned</h2>
<ul>
<li>deal with high-levels nominal features (<code>fct_lump</code> and <code>step_other</code>) in EDA and modeling</li>
<li><code>workflow_set</code> and <code>map_workflow</code> to create multiple workflows for model and/or recipes comparison.</li>
<li><code>fit_resample</code> for cross-validation. The metrics collected from cross-validation results are used for workflow comparison.</li>
<li><code>last_fit</code> model and save <strong>trained</strong> workflow for future use</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyTuesday</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2021-11-02_tidyTues_ultraRace.html</guid>
  <pubDate>Tue, 02 Nov 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Taking options from command line</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</link>
  <description><![CDATA[ 



<p>Taking in options from command line is an essential step towards generalized usage of scripts. However, it is a chapter I skipped in almost all language textbooks since my primary goal was to code for a specific problem and did not mind re-writing the scripts in different situations.</p>
<p>Usually the options following the scripts have two types</p>
<ul>
<li>direct inputs (with default definition within the script).</li>
<li>the “true”” options with “-” or “–” to allow optional manipulation</li>
</ul>
<p>For the second type of options, it becomes a little bit complicated. First, this type options can be further grouped based whether there is argument value followed specified option (“options with argument” vs “options without argument”). In addition, it can also be classified by whether this option is mandatory or optional (although all mandatory options can be converted to optional by specifying the default value).</p>
<p>In this post, I will catch up on the options taken-in scripting in Bash, R and Perl.</p>
<section id="Bash" class="level3">
<h3 class="anchored" data-anchor-id="Bash">Bash</h3>
<p>Bash script takes in first type of options using special variables based on the input orders <code>$1</code>, <code>$2</code>, … For the unknown number of inputs, <code>$@</code> array is used to represents all arguments after script file (<code>$0</code>).</p>
<p>For the second type of options, there are two methods to take in options. One method is to use <code>while :; do; done</code> to read through all arguments (<code>$@</code>) after scripts by considering <code>--option</code> as an argument itself and <code>shift</code> it off in the loop. For each <code>--option</code>, we can use <a href="https://www.tutorialspoint.com/unix/case-esac-statement.htm"><code>case; esac</code></a> matching to specify what exact value should be.</p>
<p>In the following script, I listed the examples of “mandatory non-empty option argument”, “optional empty option argument” and “optional non-empty option argument”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#!/bin/bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">## specifiy usage function</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">usage()</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-6">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> [-h] -p p1 [-v] [-o output_file] bam1 bam2"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">## setting defaults</span></span>
<span id="cb1-10"><span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span>0 <span class="co" style="color: #5E5E5E;"># default for optional empty option argument</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># p1=0 # all mandatory options can be converted to optional by specifying the default value</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">:</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">$1</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb1-15">        <span class="ss" style="color: #20794D;">-p</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--para</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># mandatory non-empty option argument (mandatory enforced later, or we can set default to make it optional)</span></span>
<span id="cb1-16">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="kw" style="color: #003B4F;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;">!</span> <span class="va" style="color: #111111;">$2</span> <span class="ot" style="color: #003B4F;">=~</span> <span class="st" style="color: #20794D;">"-"</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-17">                        <span class="va" style="color: #111111;">p1</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-18">                        <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-19">                <span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-20">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para requires non-empty option argument'</span></span>
<span id="cb1-21">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-22">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-24">        <span class="ss" style="color: #20794D;">-v</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--verbose</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional empty option argument (with default)</span></span>
<span id="cb1-25">                <span class="va" style="color: #111111;">verbose</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$((verbose</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-27">        <span class="ss" style="color: #20794D;">-o</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--output</span> <span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># optional non-empty option argument</span></span>
<span id="cb1-28">                <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-f</span> <span class="va" style="color: #111111;">$2</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span> <span class="co" style="color: #5E5E5E;"># prevent overwrite into a file exist in directory</span></span>
<span id="cb1-29">                        <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARNING: --output argument %s is a file existing in directory\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$2</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-30">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Are you sure about overwriting?"</span></span>
<span id="cb1-31">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Press any key to continue"</span></span>
<span id="cb1-32">                        <span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">[</span> true <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-33">                                <span class="bu" style="color: null;">read</span> <span class="at" style="color: #657422;">-n</span> 1</span>
<span id="cb1-34">                                <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">[</span> <span class="va" style="color: #111111;">$?</span> <span class="ot" style="color: #003B4F;">=</span> 0 <span class="bu" style="color: null;">]</span> <span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-35">                                        <span class="cf" style="color: #003B4F;">break</span> <span class="ex" style="color: null;">1</span> <span class="co" style="color: #5E5E5E;"># break the while [ true ] loop</span></span>
<span id="cb1-36">                                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-37">                        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-38">                <span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-39">                <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$2</span></span>
<span id="cb1-40">                <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-41">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-42">        <span class="ss" style="color: #20794D;">-h</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ss" style="color: #20794D;">--help</span> <span class="kw" style="color: #003B4F;">)</span>           </span>
<span id="cb1-43">                <span class="ex" style="color: null;">usage</span></span>
<span id="cb1-44">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-46">        <span class="ss" style="color: #20794D;">-</span><span class="pp" style="color: #AD0000;">?*</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb1-47">                <span class="bu" style="color: null;">printf</span> <span class="st" style="color: #20794D;">'WARN: Unknown option (ignored): %s\n'</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$1</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-48">                <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb1-50">        <span class="pp" style="color: #AD0000;">*</span><span class="kw" style="color: #003B4F;">)</span> <span class="co" style="color: #5E5E5E;"># Default case: No more options, so break out of the loop.</span></span>
<span id="cb1-51">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb1-53">    <span class="bu" style="color: null;">shift</span></span>
<span id="cb1-54"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;"># mandatory argument</span></span>
<span id="cb1-57"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$p1</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-58">        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">'ERROR: --para is mandatory argument'</span></span>
<span id="cb1-59">        <span class="bu" style="color: null;">exit</span></span>
<span id="cb1-60"><span class="cf" style="color: #003B4F;">fi</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;"># input after options are put into $@</span></span>
<span id="cb1-63"><span class="va" style="color: #111111;">bams</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span>
<span id="cb1-64"></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;"># a simple function to execute </span></span>
<span id="cb1-66"><span class="fu" style="color: #4758AB;">print_out()</span></span>
<span id="cb1-67"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb1-68">        <span class="cf" style="color: #003B4F;">for</span> bam <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">${bams</span><span class="op" style="color: #5E5E5E;">[@]</span><span class="va" style="color: #111111;">}</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb1-69">                <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$bam</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-70">        <span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb1-71"><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;"># show what --para take in</span></span>
<span id="cb1-74"><span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"</span><span class="va" style="color: #111111;">$p1</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb1-75"></span>
<span id="cb1-76"><span class="co" style="color: #5E5E5E;"># execute function output</span></span>
<span id="cb1-77"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">[[</span> <span class="ot" style="color: #003B4F;">!</span> <span class="ot" style="color: #003B4F;">-z</span> <span class="va" style="color: #111111;">$output</span> <span class="kw" style="color: #003B4F;">]];</span> <span class="cf" style="color: #003B4F;">then</span></span>
<span id="cb1-78">        <span class="ex" style="color: null;">print_out</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="va" style="color: #111111;">$output</span></span>
<span id="cb1-79"><span class="cf" style="color: #003B4F;">else</span></span>
<span id="cb1-80">        <span class="ex" style="color: null;">print_out</span></span>
<span id="cb1-81"><span class="cf" style="color: #003B4F;">fi</span></span></code></pre></div>
</details>
</div>
<p>The second method is to use <code>getopts</code> function with function-specific variables <code>$OPTARG</code> and <code>$OPTIND</code> to track the option value and option number. It can only take in the short format “-” options. The <code>:</code> following the <code>-o</code> will be passed to $OPTARG, thus, the different between “options with argument” and “options without argument” are shown in <code>o:</code> and <code>o</code> in <code>getopts</code> format.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="cf" style="color: #003B4F;">while</span> <span class="bu" style="color: null;">getopts</span> <span class="st" style="color: #20794D;">":ho:"</span> <span class="va" style="color: #111111;">opt</span><span class="kw" style="color: #003B4F;">;</span> <span class="cf" style="color: #003B4F;">do</span></span>
<span id="cb2-2">        <span class="cf" style="color: #003B4F;">case</span> <span class="va" style="color: #111111;">${opt}</span> <span class="kw" style="color: #003B4F;">in</span></span>
<span id="cb2-3">                <span class="ss" style="color: #20794D;">h</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-4">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"usage: bash </span><span class="va" style="color: #111111;">$0</span><span class="st" style="color: #20794D;"> -o output_file folder1 folder2 ..."</span></span>
<span id="cb2-5">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-6">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-7">                <span class="ss" style="color: #20794D;">o</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-8">                        <span class="va" style="color: #111111;">output</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$OPTARG</span></span>
<span id="cb2-9">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-10">                <span class="dt" style="color: #AD0000;">\?</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-11">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;">"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-12">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-13">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-14">                <span class="ss" style="color: #20794D;">:</span> <span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-15">                        <span class="bu" style="color: null;">echo</span> <span class="st" style="color: #20794D;">"Invalid option: </span><span class="va" style="color: #111111;">$OPTARG</span><span class="st" style="color: #20794D;"> requires an argument"</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">&gt;&amp;</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-16">                        <span class="bu" style="color: null;">exit</span></span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;">;;</span></span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;">esac</span></span>
<span id="cb2-19"><span class="cf" style="color: #003B4F;">done</span></span>
<span id="cb2-20"><span class="bu" style="color: null;">shift</span> <span class="va" style="color: #111111;">$((OPTIND</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span><span class="va" style="color: #111111;">))</span></span>
<span id="cb2-21"><span class="va" style="color: #111111;">dirs</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$@</span></span></code></pre></div>
</details>
</div>
<p>Personally, I would recommend the first method. The additional reading can be found http://mywiki.wooledge.org/BashFAQ/035</p>
</section>
<section id="R" class="level3">
<h3 class="anchored" data-anchor-id="R">R</h3>
<p>Most R users execute the R script in Rstudio or R Console, and may never need to take in options. However, to execute R script in HPC environment, we submit <code>Rscript script.R</code> to the cluster for the jobs requiring high resources from command line.</p>
<p>For first type of options, <code>commandArgs</code> is all you need. It parses all arguments after script.R to the arguments vector.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">args <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">commandArgs</span>(<span class="at" style="color: #657422;">trailingOnly=</span><span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-2">file1<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-3">file2<span class="ot" style="color: #003B4F;">=</span>args[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
</details>
</div>
<p>For the second type of options, package <code>optparse</code> is useful. Function <code>make_option</code> is used to specify each option type (matching pattern, option type, default value, …). To distinguish “options with argument” and “options without argument”, we can specify <code>action</code> argument in <code>make_option</code> function.</p>
<ul>
<li>options with argument: <code>action="store", type="character"</code> (# this is default)</li>
<li>options without argument: <code>action="store_true"</code> (# by default, <code>type="logical"</code>)</li>
</ul>
<p>After making option list, we use <code>parse_args(OptionParser(option_list))</code> to assign options to a list value (with long flag option as list element name).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(optparse)</span>
<span id="cb4-2"></span>
<span id="cb4-3">option_list <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;"># parameter 1 </span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-p"</span>,<span class="st" style="color: #20794D;">"--para"</span>),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"integer"</span>, </span>
<span id="cb4-8">    <span class="at" style="color: #657422;">default=</span><span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb4-9">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"parameter 1 [default= %default]"</span></span>
<span id="cb4-10">    ),</span>
<span id="cb4-11">  <span class="co" style="color: #5E5E5E;"># optional output</span></span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-o"</span>, <span class="st" style="color: #20794D;">"--out"</span>), </span>
<span id="cb4-14">      <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"character"</span>, </span>
<span id="cb4-15">      <span class="at" style="color: #657422;">default=</span><span class="fu" style="color: #4758AB;">stdout</span>(), </span>
<span id="cb4-16">    <span class="at" style="color: #657422;">help=</span><span class="st" style="color: #20794D;">"output file name [default= STDOUT]"</span>, </span>
<span id="cb4-17">      <span class="at" style="color: #657422;">metavar=</span><span class="st" style="color: #20794D;">"character"</span></span>
<span id="cb4-18">     ),</span>
<span id="cb4-19">  <span class="co" style="color: #5E5E5E;"># verbose</span></span>
<span id="cb4-20">  <span class="fu" style="color: #4758AB;">make_option</span>(</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"-v"</span>, <span class="st" style="color: #20794D;">"--verbose"</span>), </span>
<span id="cb4-22">      <span class="at" style="color: #657422;">action=</span><span class="st" style="color: #20794D;">"store_true"</span>,</span>
<span id="cb4-23">      <span class="at" style="color: #657422;">default=</span>F</span>
<span id="cb4-24">     )</span>
<span id="cb4-25">)</span>
<span id="cb4-26"> </span>
<span id="cb4-27">opts <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list))</span>
<span id="cb4-28">opts</span></code></pre></div>
</details>
</div>
<p>Things need to be cautious</p>
<ul>
<li>final list, by default, have help function, thus no need to specify <code>-h</code>. To visualize the help page</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">parse_args</span>(<span class="fu" style="color: #4758AB;">OptionParser</span>(<span class="at" style="color: #657422;">option_list=</span>option_list), <span class="at" style="color: #657422;">args =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"--help"</span>))</span></code></pre></div>
</details>
</div>
<ul>
<li>long flag option is required.</li>
<li><code>default</code> argument in function <code>make_option</code> must not be NULL, otherwise, the option will not be included in the final list.</li>
<li>There are other useful arguments including <code>dest</code>, <code>callback</code> and <code>metavar</code>. Learn more from</li>
</ul>
<p>Besides package <code>optparse</code>, <code>argparser</code> is another popular package. Please read <a href="https://blog.sellorm.com/2017/12/30/command-line-utilities-in-r-pt-6/">this blog</a> for tutorial.</p>
</section>
<section id="Perl" class="level3">
<h3 class="anchored" data-anchor-id="Perl">Perl</h3>
<p>Perl script takes every argument (after script) from command line into a special array <code>@ARGV</code>. We can easily read first type of options by parsing through <code>@ARGV</code>. This is very similar to <code>commandArgs</code> in R.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb6-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> file1 [file2 file3...]</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;">This script is to print out first column of each file</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;">It requires at least one input file </span></span>
<span id="cb6-5"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>; <span class="co" style="color: #5E5E5E;"># ensure there are arguments following the script</span></span>
<span id="cb6-9">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb6-10">  <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){ <span class="co" style="color: #5E5E5E;"># go through each input file</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span><span class="st" style="color: #20794D;">[</span><span class="dt" style="color: #AD0000;">$i</span><span class="st" style="color: #20794D;">]</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb6-13">      <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb6-14">      <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@items</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/\t/</span>,<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb6-15">      <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$items</span><span class="st" style="color: #20794D;">[0]</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb6-16">    }</span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb6-18">  }</span>
<span id="cb6-19">}</span></code></pre></div>
</details>
</div>
<p>In above script, another special variable <code>$0</code> was used. It represents the script name itself (for example we can save above script as “print_col1.pl”). Thus, when the script is not followed by an input file, it will print usage</p>
<blockquote class="blockquote">
<p>print_col1.pl file1 [file2 file3…]<br>
This script is to print out first column of each file It requires at least one input file</p>
</blockquote>
<p>For the second type of options, perl uses a module <code>Getopt</code> to parse options. The following script shows an example to print sequence length based on file format (<a href="https://compgenomr.github.io/book/fasta-and-fastq-formats.html">fasta vs fastq</a>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode perl code-with-copy"><code class="sourceCode perl"><span id="cb7-1"><span class="kw" style="color: #003B4F;">#!/usr/bin/perl</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">use</span> <span class="fu" style="color: #4758AB;">Getopt::Long</span>;</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$usage</span>=<span class="ot" style="color: #003B4F;">"</span><span class="wa" style="color: #5E5E5E;
font-style: italic;">$0</span><span class="st" style="color: #20794D;"> [--format fasta] [--seqN] [--header] file [file2 file3 ...]</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;">this script is to calculate sequence file from fastq/fasta file</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;">--format fasta|fastq # default is fasta</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;">--seqN integer # default is everything</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;">--header # default no header added</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;">output directly to STDOUT as seq_name[tab]length</span></span>
<span id="cb7-10"><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$format</span>=<span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>; <span class="co" style="color: #5E5E5E;"># set default as fasta format.</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seqN</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># set default for number of sequence to print (0 here means print all sequences)</span></span>
<span id="cb7-14"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span> = <span class="dv" style="color: #AD0000;">0</span>; <span class="co" style="color: #5E5E5E;"># option variable with default value (false)</span></span>
<span id="cb7-15">GetOptions(</span>
<span id="cb7-16">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">format=s</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$format</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as string (s)</span></span>
<span id="cb7-17">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seqN=i</span><span class="ot" style="color: #003B4F;">"</span> =&gt; \<span class="dt" style="color: #AD0000;">$seqN</span>, <span class="co" style="color: #5E5E5E;"># the option here will read as numeric (i)</span></span>
<span id="cb7-18">        <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">header</span><span class="ot" style="color: #003B4F;">"</span>  =&gt; \<span class="dt" style="color: #AD0000;">$header</span>  <span class="co" style="color: #5E5E5E;"># flag: if --header specified, it will become true</span></span>
<span id="cb7-19">);</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$n</span>;</span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-23">  <span class="dt" style="color: #AD0000;">$n</span>=<span class="dv" style="color: #AD0000;">0</span>;</span>
<span id="cb7-24">}</span>
<span id="cb7-25"><span class="kw" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span> &lt; <span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-26">        <span class="fu" style="color: #4758AB;">die</span> <span class="dt" style="color: #AD0000;">$usage</span>;</span>
<span id="cb7-27">}<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-28">        OUTER: <span class="kw" style="color: #003B4F;">for</span> (<span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$i</span>=<span class="dv" style="color: #AD0000;">0</span>; <span class="dt" style="color: #AD0000;">$i</span> &lt; <span class="fu" style="color: #4758AB;">scalar</span> <span class="wa" style="color: #5E5E5E;
font-style: italic;">@ARGV</span>; <span class="dt" style="color: #AD0000;">$i</span>++){</span>
<span id="cb7-29">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$header</span>!=<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-30">                  <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">seq_name</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">seq_len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-31">                }</span>
<span id="cb7-32">                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$file</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$ARGV</span>[<span class="dt" style="color: #AD0000;">$i</span>];</span>
<span id="cb7-33">                <span class="fu" style="color: #4758AB;">open</span> IN, <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">&lt;</span><span class="dt" style="color: #AD0000;">$file</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-34">                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fasta</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-35">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-36">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-37">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-38">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-39">                                <span class="kw" style="color: #003B4F;">if</span>(<span class="ot" style="color: #003B4F;">/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;/</span>){</span>
<span id="cb7-40">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-41">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-42">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-43">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-44">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-45">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-46">                                                }</span>
<span id="cb7-47">                                        }</span>
<span id="cb7-48">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="ot" style="color: #003B4F;">&gt;//</span>;</span>
<span id="cb7-49">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-50">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-51">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="ot" style="color: #003B4F;">""</span>;</span>
<span id="cb7-52">                                }<span class="kw" style="color: #003B4F;">else</span>{</span>
<span id="cb7-53">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="dt" style="color: #AD0000;">$seq</span>.<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-54">                                }</span>
<span id="cb7-55">                        }</span>
<span id="cb7-56">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-57">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-58">                }</span>
<span id="cb7-59">                <span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$format</span> <span class="ot" style="color: #003B4F;">eq</span> <span class="ot" style="color: #003B4F;">"</span><span class="st" style="color: #20794D;">fastq</span><span class="ot" style="color: #003B4F;">"</span>){</span>
<span id="cb7-60">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$header</span>;</span>
<span id="cb7-61">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$seq</span>;</span>
<span id="cb7-62">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$line</span>;</span>
<span id="cb7-63">                        <span class="kw" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">&lt;IN&gt;</span>){</span>
<span id="cb7-64">                                <span class="fu" style="color: #4758AB;">chomp</span>;</span>
<span id="cb7-65">                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb7-66">                                        <span class="kw" style="color: #003B4F;">if</span>(<span class="dt" style="color: #AD0000;">$header</span>){</span>
<span id="cb7-67">                                                <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-68">                                                <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-69">                                                <span class="dt" style="color: #AD0000;">$n</span>++;</span>
<span id="cb7-70">                                                <span class="kw" style="color: #003B4F;">if</span> (<span class="dt" style="color: #AD0000;">$seqN</span>!=<span class="dv" style="color: #AD0000;">0</span> &amp;&amp; <span class="dt" style="color: #AD0000;">$n</span>==<span class="dt" style="color: #AD0000;">$seqN</span>){</span>
<span id="cb7-71">                                                  <span class="kw" style="color: #003B4F;">last</span> OUTER;</span>
<span id="cb7-72">                                                }</span>
<span id="cb7-73">                                        }</span>
<span id="cb7-74">                                        <span class="ot" style="color: #003B4F;">s/</span><span class="ch" style="color: #20794D;">^</span><span class="dt" style="color: #AD0000;">@</span><span class="ot" style="color: #003B4F;">//</span>;</span>
<span id="cb7-75">                                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">@header</span>=<span class="fu" style="color: #4758AB;">split</span>(<span class="ot" style="color: #003B4F;">/</span><span class="bn" style="color: #AD0000;">\s</span><span class="ch" style="color: #20794D;">+</span><span class="ot" style="color: #003B4F;">/</span>, <span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>);</span>
<span id="cb7-76">                                        <span class="dt" style="color: #AD0000;">$header</span>=<span class="dt" style="color: #AD0000;">$header</span>[<span class="dv" style="color: #AD0000;">0</span>];</span>
<span id="cb7-77">                                        </span>
<span id="cb7-78">                                }<span class="kw" style="color: #003B4F;">elsif</span>(<span class="dt" style="color: #AD0000;">$line</span> % <span class="dv" style="color: #AD0000;">4</span>==<span class="dv" style="color: #AD0000;">1</span>){</span>
<span id="cb7-79">                                        <span class="dt" style="color: #AD0000;">$seq</span>=<span class="wa" style="color: #5E5E5E;
font-style: italic;">$_</span>;</span>
<span id="cb7-80">                                }</span>
<span id="cb7-81">                                <span class="dt" style="color: #AD0000;">$line</span>++;</span>
<span id="cb7-82">                        }</span>
<span id="cb7-83">                        <span class="kw" style="color: #003B4F;">my</span> <span class="dt" style="color: #AD0000;">$len</span>=<span class="fu" style="color: #4758AB;">length</span>(<span class="dt" style="color: #AD0000;">$seq</span>);</span>
<span id="cb7-84">                        <span class="fu" style="color: #4758AB;">print</span> <span class="ot" style="color: #003B4F;">"</span><span class="dt" style="color: #AD0000;">$header</span><span class="ch" style="color: #20794D;">\t</span><span class="dt" style="color: #AD0000;">$len</span><span class="ch" style="color: #20794D;">\n</span><span class="ot" style="color: #003B4F;">"</span>;</span>
<span id="cb7-85">                }</span>
<span id="cb7-86">                <span class="fu" style="color: #4758AB;">close</span> IN;</span>
<span id="cb7-87">        }</span>
<span id="cb7-88">}</span></code></pre></div>
</details>
</div>
<p>For more usage example of <code>Getopt</code>, please refer to its <a href="https://perldoc.perl.org/Getopt/Long.html">perldoc</a> page.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>bash</category>
  <category>perl</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-8-22_options.html</guid>
  <pubDate>Sat, 22 Aug 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.source-data.com/wp-content/uploads/2019/11/options_0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transition from dplyr to data.table</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</link>
  <description><![CDATA[ 



<p><code>dplyr</code> and <code>tidyr</code> have totally changed the way we code in R. I particularly love the pipe <code>%&gt;%</code> which comes from <code>magrittr</code> package and makes the code easy to read and understand. While I am obessed with simplicity of <code>dplyr</code> coding style, I am also fascinated with how fast <code>data.table</code> wrangles data. Below is an example showing the speed difference using <code>dplyr</code> and <code>data.table</code> in a user function <code>gene_lookup</code> for one of my shiny app.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># dplyr version</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb1-3">        old_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup_old</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb1-4">})</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># 2.727   0.122   2.898  </span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># data.table version</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">system.time</span>({</span>
<span id="cb2-3">        new_result <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">gene_lookup</span>(gene_frag, open_frag, frag_int, my_gene_id, open_oe_only, selected_cells)</span>
<span id="cb2-4">})</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># user  system elapsed </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># 0.505   0.054   0.293 </span></span></code></pre></div>
</details>
</div>
<p>Last year, Hadley Wickham and his team launched a hybrid package <a href="https://github.com/tidyverse/dtplyr"><code>dtplyr</code></a> which uses the syntax of <code>dplyr</code> but runs <code>data.table</code> on the backend. It is a brilliant idea and I believe a lot of dplyr fan would love it, but dtplyr is still slower than data.table. Considering speed is the highest priority in some applications, I would like to switch to data.table completely. It took me only half day to get used to data.table syntax anyway. Plus, <a href="https://martinctc.github.io/blog/using-data.table-with-magrittr-pipes-best-of-both-worlds/">this post</a>, which shows using pipe in data.table, makes this transition more smooth and pleasant.</p>
<p>In this blog, I will list <code>data.table</code> and <code>dplyr</code>/<code>tidyr</code> syntax back to back, providing an easy reference for dplyr users who want to quickly pick up <code>data.table</code>.</p>
<section id="read-file" class="level3">
<h3 class="anchored" data-anchor-id="read-file">read file</h3>
<p><code>read_delim</code> and <code>read_csv</code> are the two functions commonly used to read-in data from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_delim</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>, <span class="at" style="color: #657422;">delim=</span><span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb3-2">untidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_df)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "spec_tbl_df" "tbl_df"      "tbl"         "data.frame" </code></pre>
</div>
</div>
<p>The equivalent command in <code>data.table</code> is <code>fread</code>. Like “read_delim”, <code>fread</code> automatically searches for header and defines column data type, but it is faster and automatically searches for separators as well.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/sckinta/example_code/master/data_examples/untidy_mtcars1.csv"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">class</span>(untidy_mtcars_dt)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.table" "data.frame"</code></pre>
</div>
</div>
<p>To switch between tibble and data.table class, use <code>tbl_df</code> to convert data.table to tibble, and <code>as.data.table()</code> to convert tibble/data.frame to data.table.</p>
</section>
<section id="subset-rows" class="level3">
<h3 class="anchored" data-anchor-id="subset-rows">subset rows</h3>
<p>Subsetting rows is done by the function <code>filter</code> from <code>dplyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb7-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model))</span></code></pre></div>
</details>
</div>
<p>Subsetting rows in <code>data.table</code> is very similar to the base R, placing boolean vector at row index. The index separator <code>,</code> can even be omitted. Also if boolean expression contains column variables, we can use the variable names directly instead of using df$var.</p>
<p>Pipe can be used in the format of <code>%&gt;% .[]</code> to connect the code.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># subset Merc cars </span></span>
<span id="cb8-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  .[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"Merc"</span>,model)]</span></code></pre></div>
</details>
</div>
</section>
<section id="subset-columns" class="level3">
<h3 class="anchored" data-anchor-id="subset-columns">subset columns</h3>
<p>Subsetting columns is done by the function <code>select</code> from <code>dplyr</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb9-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb9-6">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"ar"</span>))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses variable names to subset columns. Like base R, the variable name vector is a character class placed at column index position. Index separator <code>,</code> cannot be omitted here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># subset columns -- model, mpg, cyl</span></span>
<span id="cb10-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  .[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"model"</span>,<span class="st" style="color: #20794D;">"mpg"</span>,<span class="st" style="color: #20794D;">"cyl"</span>)]</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># de-select columns with partial names "ar"</span></span>
<span id="cb10-6">col_ar <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt)[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"ar"</span>,<span class="fu" style="color: #4758AB;">colnames</span>(untidy_mtcars_dt))]</span>
<span id="cb10-7">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-8">  .[,<span class="sc" style="color: #5E5E5E;">-</span>..col_ar]</span></code></pre></div>
</details>
</div>
</section>
<section id="add-new-variable" class="level3">
<h3 class="anchored" data-anchor-id="add-new-variable">add new variable</h3>
<p><code>dplyr</code> uses <code>mutate</code> to add column.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># assign car size based on the weight</span></span>
<span id="cb11-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb11-4">    wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb11-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb11-6">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span></span>
<span id="cb11-7">  ))</span></code></pre></div>
</details>
</div>
<p><code>data.table</code> uses <code>:=</code> to assign values to column variables. Be aware that, different from <code>mutate</code> which returns the updated data frame without assignment, data.table is modified by reference and returned invisibly when <code>:=</code> or any <code>set*</code> functions are used. If you do not want to change the original data.table, take a copy first <code>DT2 = copy(DT)</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">untidy_mtcars_dt2<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">copy</span>(untidy_mtcars_dt)</span>
<span id="cb12-2">untidy_mtcars_dt2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-3">  .[,size<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="fu" style="color: #4758AB;">case_when</span>(wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"small"</span>,</span>
<span id="cb12-4">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> wt <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"median"</span>,</span>
<span id="cb12-5">    wt <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"large"</span>)]</span></code></pre></div>
</details>
</div>
<p><code>:=</code> can also be used for multiple column assignment and functional form. More details refer to the <a href="https://www.rdocumentation.org/packages/data.table/versions/1.12.8/topics/%3A%3D">usage manual</a></p>
</section>
<section id="pivot" class="level3">
<h3 class="anchored" data-anchor-id="pivot">pivot</h3>
<p>Table pivoting is done by the functions <code>spread</code> and <code>gather</code> (or <code>pivot_wider</code> and <code>pivot_longer</code>) from <code>tidyr</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># wide to long (gather) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-2">tidy_mtcars_df <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">value=</span><span class="st" style="color: #20794D;">"tmp"</span>,automatic,manual) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># wide to long (pivot_longer) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb13-8">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>),<span class="at" style="color: #657422;">names_to=</span><span class="st" style="color: #20794D;">"transmission"</span>,<span class="at" style="color: #657422;">values_to=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">filter</span>(tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>tmp)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 12
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb trans…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     4     4 manual 
 2 Mazda RX…  21       6  160    110  3.9   2.88  17.0     0     4     4 manual 
 3 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     4     1 manual 
 4 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1 automa…
 5 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2 automa…
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1 automa…
 7 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4 automa…
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2 automa…
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2 automa…
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4 automa…
# … with 22 more rows, and abbreviated variable name ¹​transmission
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># long to wide (spread) -- make transmission to group automatic and manual</span></span>
<span id="cb15-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">spread</span>(transmission, tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># long to wide (pivot_wider) -- </span></span>
<span id="cb17-2">tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tmp=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from=</span>transmission, <span class="at" style="color: #657422;">values_from=</span>tmp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-5">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">any</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x))}, <span class="cf" style="color: #003B4F;">function</span>(x){<span class="fu" style="color: #4758AB;">ifelse</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x),<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>)})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model       mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
 1 Hornet 4…  21.4     6  258    110  3.08  3.22  19.4     1     3     1       1
 2 Hornet S…  18.7     8  360    175  3.15  3.44  17.0     0     3     2       1
 3 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
 4 Duster 3…  14.3     8  360    245  3.21  3.57  15.8     0     3     4       1
 5 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     4     2       1
 6 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     4     2       1
 7 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     4     4       1
 8 Merc 280C  17.8     6  168.   123  3.92  3.44  18.9     1     4     4       1
 9 Merc 450…  16.4     8  276.   180  3.07  4.07  17.4     0     3     3       1
10 Merc 450…  17.3     8  276.   180  3.07  3.73  17.6     0     3     3       1
# … with 22 more rows, 1 more variable: manual &lt;dbl&gt;, and abbreviated variable
#   name ¹​automatic
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
<p>The <code>data.table</code> uses <code>dcast</code> for long-to-wide and <code>melt</code> for wide-to-long pivoting.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># wide to long (melt) -- combine automatic, manual two columns into transmission</span></span>
<span id="cb19-2">tidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">melt</span>(<span class="at" style="color: #657422;">measure.vars=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"automatic"</span>,<span class="st" style="color: #20794D;">"manual"</span>), <span class="at" style="color: #657422;">variable.name=</span><span class="st" style="color: #20794D;">"transmission"</span>, <span class="at" style="color: #657422;">value.name=</span><span class="st" style="color: #20794D;">"tmp"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  .[tmp<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-5">  .[,<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"tmp"</span>)]</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># long to wide (dcast) -- split transmission column to automatic manual</span></span>
<span id="cb19-8">tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-9">  .[, tmp<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb19-10"></span>
<span id="cb19-11">untidy_mtcars_dt <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span>   </span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;">dcast</span>(model <span class="sc" style="color: #5E5E5E;">+</span> mpg <span class="sc" style="color: #5E5E5E;">+</span> cyl <span class="sc" style="color: #5E5E5E;">+</span> disp <span class="sc" style="color: #5E5E5E;">+</span> hp <span class="sc" style="color: #5E5E5E;">+</span> drat <span class="sc" style="color: #5E5E5E;">+</span> wt <span class="sc" style="color: #5E5E5E;">+</span> qsec <span class="sc" style="color: #5E5E5E;">+</span> vs <span class="sc" style="color: #5E5E5E;">+</span> gear <span class="sc" style="color: #5E5E5E;">+</span> carb <span class="sc" style="color: #5E5E5E;">~</span>transmission, <span class="at" style="color: #657422;">value.var=</span><span class="st" style="color: #20794D;">"tmp"</span>)</span>
<span id="cb19-13"></span>
<span id="cb19-14">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-15">  .[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>) <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">replace</span>(.SD,<span class="fu" style="color: #4758AB;">is.na</span>(.SD),<span class="dv" style="color: #AD0000;">0</span>), .SDcols<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"manual"</span>,<span class="st" style="color: #20794D;">"automatic"</span>)]</span></code></pre></div>
</details>
</div>
</section>
<section id="merge" class="level3">
<h3 class="anchored" data-anchor-id="merge">merge</h3>
<p><code>dplyr</code> uses SQL-like join functions to merge two or more tables together. There are <code>inner_join</code>, <code>full_join</code>, <code>left_join</code>, <code>right_join</code>, <code>semi_join</code> and <code>anti_join</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># generate two tables</span></span>
<span id="cb20-2">tidy_mtcars_df_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">select</span>(model, mpg, cyl, hp, vs)</span>
<span id="cb20-4">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">select</span>(model, disp, qsec, transmission, gear, carb)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb20-8"><span class="fu" style="color: #4758AB;">left_join</span>(</span>
<span id="cb20-9">  tidy_mtcars_df_engine,</span>
<span id="cb20-10">  tidy_mtcars_df_other</span>
<span id="cb20-11">)</span></code></pre></div>
</details>
</div>
<p><code>data.table</code>, from the other end, use <code>merge</code> for all the joins. By default, <code>merge</code> is <code>inner_join</code>, but we can adjust <code>by</code> variables to fulfill other join functions.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tidy_mtcars_dt_engine <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_engine <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-2">tidy_mtcars_df_other <span class="ot" style="color: #003B4F;">=</span> tidy_mtcars_df_other <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;"># inner_join</span></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-6">  tidy_mtcars_dt_engine,</span>
<span id="cb21-7">  tidy_mtcars_df_other,</span>
<span id="cb21-8">  <span class="at" style="color: #657422;">all=</span><span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb21-9">)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;"># left_join</span></span>
<span id="cb21-12"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-13">  tidy_mtcars_dt_engine,</span>
<span id="cb21-14">  tidy_mtcars_df_other,</span>
<span id="cb21-15">  <span class="at" style="color: #657422;">all.x=</span>T</span>
<span id="cb21-16">)</span>
<span id="cb21-17"></span>
<span id="cb21-18"><span class="co" style="color: #5E5E5E;"># right_join</span></span>
<span id="cb21-19"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-20">  tidy_mtcars_dt_engine,</span>
<span id="cb21-21">  tidy_mtcars_df_other,</span>
<span id="cb21-22">  <span class="at" style="color: #657422;">all.y=</span>T</span>
<span id="cb21-23">)</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;"># full_join</span></span>
<span id="cb21-26"><span class="fu" style="color: #4758AB;">merge</span>(</span>
<span id="cb21-27">  tidy_mtcars_dt_engine,</span>
<span id="cb21-28">  tidy_mtcars_df_other,</span>
<span id="cb21-29">  <span class="at" style="color: #657422;">all=</span>T</span>
<span id="cb21-30">)</span></code></pre></div>
</details>
</div>
</section>
<section id="group-and-summarize" class="level3">
<h3 class="anchored" data-anchor-id="group-and-summarize">group and summarize</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>summarize</code> to calculate the new variable based on the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># calculate weight mean for each group of differrent cylinder number</span></span>
<span id="cb22-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
    cyl wt_mean
  &lt;dbl&gt;   &lt;dbl&gt;
1     4    2.29
2     6    3.12
3     8    4.00</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>by</code> to specify the group, and <code>=</code> to summarize.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  .[,.(<span class="at" style="color: #657422;">wt_mean=</span><span class="fu" style="color: #4758AB;">mean</span>(wt)),by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl  wt_mean
1:   8 3.999214
2:   4 2.285727
3:   6 3.117143</code></pre>
</div>
</div>
</section>
<section id="group-and-subsetting" class="level3">
<h3 class="anchored" data-anchor-id="group-and-subsetting">group and subsetting</h3>
<p><code>dplyr</code> uses <code>group_by</code> and <code>slice</code> to subset rows within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb26-2">untidy_mtcars_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(wt)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 13
  model        mpg   cyl  disp    hp  drat    wt  qsec    vs  gear  carb autom…¹
  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;
1 Merc 240D   24.4     4  147.    62  3.69  3.19  20       1     4     2       1
2 Valiant     18.1     6  225    105  2.76  3.46  20.2     1     3     1       1
3 Lincoln C…  10.4     8  460    215  3     5.42  17.8     0     3     4       1
# … with 1 more variable: manual &lt;dbl&gt;, and abbreviated variable name
#   ¹​automatic
# ℹ Use `colnames()` to see all variable names</code></pre>
</div>
</div>
<p><code>data.table</code> uses <code>.SD</code> and <code>by</code> to subset within the group.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># choose the heaviest cart for each cylinder group</span></span>
<span id="cb28-2">untidy_mtcars_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-3">  .[,.SD[<span class="fu" style="color: #4758AB;">which.max</span>(wt)], by<span class="ot" style="color: #003B4F;">=</span>cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   cyl               model  mpg  disp  hp drat    wt  qsec vs gear carb
1:   8 Lincoln Continental 10.4 460.0 215 3.00 5.424 17.82  0    3    4
2:   4           Merc 240D 24.4 146.7  62 3.69 3.190 20.00  1    4    2
3:   6             Valiant 18.1 225.0 105 2.76 3.460 20.22  1    3    1
   automatic manual
1:         1      0
2:         1      0
3:         1      0</code></pre>
</div>
</div>
<p>For more <code>.SD</code> reading, refer to https://cran.r-project.org/web/packages/data.table/vignettes/datatable-sd-usage.html</p>
</section>
<section id="last-bits" class="level3">
<h3 class="anchored" data-anchor-id="last-bits">last bits</h3>
<p>There are other accessory functions useful in <code>dplyr</code> and some of them have corresponding functions in <code>data.table</code> too.</p>
<div class="cell">
<div class="cell-output-display">

<table class="table" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> usage </th>
   <th style="text-align:left;"> dplyr </th>
   <th style="text-align:left;"> data.table </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> get unique rows </td>
   <td style="text-align:left;"> distinct() </td>
   <td style="text-align:left;"> unique() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> sort by column(s) </td>
   <td style="text-align:left;"> arrange() </td>
   <td style="text-align:left;"> setorder()/setorderv() </td>
  </tr>
  <tr>
   <td style="text-align:left;"> change column names </td>
   <td style="text-align:left;"> rename(new=old) </td>
   <td style="text-align:left;"> setnames(old, new) </td>
  </tr>
</tbody>
</table>

</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>data wrangle</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-06-25_data_table.html</guid>
  <pubDate>Thu, 25 Jun 2020 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Rdatatable/data.table/master/.graphics/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>ML pipeline with tidymodels vs. caret</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</link>
  <description><![CDATA[ 



<p>As a DS beginner, I first came across ML in R by studying the book <a href="https://bradleyboehmke.github.io/HOML/">Hands-On Machine Learning with R</a>. The book mainly focuses on the package <code>caret</code> with general introductions to packages like <code>recipe</code> and <code>h2o</code>. Most examples use the workflow in which feature engineering is performed by <code>recipe</code> and the modeling/learning part is done using <code>caret</code>.</p>
<p>It was a great pleasure to take the <a href="https://www.tidymodels.org/">tidymodels</a> workshop hosted by <a href="https://twitter.com/apreshill">Dr.&nbsp;Alison Hill</a> last week. <code>tidymodels</code> was recently launched as a collection of packages for ML using tidyverse principles. It is built on <code>recipes</code> for feature engineering and <code>parsnip</code> as the major modeling package, and links ML steps together with <code>workflow</code>.</p>
<p>In this post, I am going to present the general ML frameworks using <code>caret</code> and <code>tidymodels</code>, independently. The data used as an example is “Watson churn data” from <a href="https://modeldata.tidymodels.org/reference/index.html">modeldata</a></p>
<section id="required-libraries-and-data" class="level2">
<h2 class="anchored" data-anchor-id="required-libraries-and-data">0. required libraries and data</h2>
<p>Since tidymodels is a collection of packages like <code>tidyverse</code>, we can just use <code>library(tidymodels)</code> to load all the required libraries for the tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
</details>
</div>
<p>For the <code>caret</code> pipeline, additional helper pacakges, like <code>recipes</code> and <code>rsample</code>, were needed to process the data. Most of those packages are already collected in the <code>tidymodels</code> pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(caret)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(vip)</span></code></pre></div>
</details>
</div>
<p>For the data, I used “Watson churn data” from modeldata which is also a part of <code>tidymodels</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(modeldata)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">data</span>(wa_churn)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># quick view and summarize data</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">glimpse</span>(wa_churn)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># visdat::vis_miss(wa_churn)</span></span>
<span id="cb4-6">Hmisc<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">describe</span>(wa_churn)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># relevel factors</span></span>
<span id="cb4-9">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-10">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">churn=</span><span class="fu" style="color: #4758AB;">relevel</span>(churn, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-11">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">multiple_lines=</span><span class="fu" style="color: #4758AB;">relevel</span>(multiple_lines, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No phone service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-12">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">internet_service=</span><span class="fu" style="color: #4758AB;">relevel</span>(internet_service, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-13">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_security=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_security, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">online_backup=</span><span class="fu" style="color: #4758AB;">relevel</span>(online_backup, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-15">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">device_protection=</span><span class="fu" style="color: #4758AB;">relevel</span>(device_protection, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-16">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tech_support=</span><span class="fu" style="color: #4758AB;">relevel</span>(tech_support, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_tv=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_tv, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">streaming_movies=</span><span class="fu" style="color: #4758AB;">relevel</span>(streaming_movies, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"No internet service"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-19">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">contract=</span><span class="fu" style="color: #4758AB;">relevel</span>(contract, <span class="at" style="color: #657422;">ref=</span><span class="st" style="color: #20794D;">"Month-to-month"</span>))</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;"># to simplify the case here, we are going to remove missing variable</span></span>
<span id="cb4-22">wa_churn <span class="ot" style="color: #003B4F;">=</span> wa_churn <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-23">        na.omit      </span></code></pre></div>
</details>
</div>
</section>
<section id="data-split" class="level2">
<h2 class="anchored" data-anchor-id="data-split">1. data split</h2>
<p>Both frameworks use <code>rsample::initial_split</code> to split the data into training and testing data. Here, we choose the standard 7:3 split between training and testing, with stratification on the target variable “churn”</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># split</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb5-3">data_splits <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"churn"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb5-4">data_train<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">training</span>(data_splits)</span>
<span id="cb5-5">data_test<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">testing</span>(data_splits)</span></code></pre></div>
</details>
</div>
<p>To stratify on the numeric variables, we can add the <code>breaks</code> parameter.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">initial_split</span>(wa_churn, <span class="at" style="color: #657422;">strata=</span><span class="st" style="color: #20794D;">"tenure"</span>, <span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">breaks=</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="feature-engineer" class="level2">
<h2 class="anchored" data-anchor-id="feature-engineer">2. feature engineer</h2>
<p>General <a href="http://www.feat.engineering/">feature engineering</a> steps include</p>
<ul>
<li>removing variables with zero variance or near zero variance: <code>step_zv</code>, <code>step_nzv</code></li>
<li>lumping nominal variables: <code>step_other</code></li>
<li>normalizing (scale + center) numeric variables (specific for regression-based models): <code>step_scale</code>, <code>step_center</code>, <code>step_normalize</code></li>
<li>encoding nominal variables to dummy features: <code>step_novel</code> + <code>step_dummy</code>, <code>step_integer</code></li>
<li>value transformation to fit normal distribution: <code>step_log</code>, <code>step_YeoJohnson</code>, <code>step_BoxCox</code></li>
<li>feature dimension reduction: <code>step_pca</code></li>
<li>dealing with missing values with imputation: <code>step_medianimpute</code>, <code>step_knnimpute</code>, <code>step_bagimpute</code></li>
</ul>
<p>Feature engineering is done by <code>recipes</code> in both <code>tidymodels</code> and <code>caret</code>. The functions in <code>recipes</code> starts with <code>step_*</code> and create a blueprint for feature engineering. The complete list of step is at https://tidymodels.github.io/recipes/reference/index.html</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(churn <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">        <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">        <span class="fu" style="color: #4758AB;">step_nzv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())  <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-4">        <span class="fu" style="color: #4758AB;">step_novel</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-5">        <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span></code></pre></div>
</details>
</div>
<p>The blueprint will not change the data until it is <code>fit</code> in the modeling step. We can use <code>prep</code> and <code>bake</code> to see “transformed” data in data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">rec <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">        <span class="fu" style="color: #4758AB;">prep</span>(wa_churn) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">        <span class="fu" style="color: #4758AB;">bake</span>(wa_churn)</span></code></pre></div>
</details>
</div>
<p>One reason to use <code>recipe</code> is to avoid <a href="https://www.quora.com/Whats-data-leakage-in-data-science">data leakage</a>. Data leakage is when information from outside the training data set is used to create the model.</p>
</section>
<section id="resample" class="level2">
<h2 class="anchored" data-anchor-id="resample">3. resample</h2>
<p>Resampling methods split the training data into additional sets. It will generate train set and validation set. Typical resampling method include cross-validation (cv), repeated cross-validation (repeated cv), leave-one-out and bootstrapping (with replacement).</p>
<p>We can use <code>rsample::vfold_cv</code> for both caret and tidymodels pipeline.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># 10 fold cross validation stratified on target variable churn</span></span>
<span id="cb9-2">cv_folds <span class="ot" style="color: #003B4F;">=</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vfold_cv</span>(<span class="at" style="color: #657422;">data=</span>data_train, <span class="at" style="color: #657422;">v=</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">strata=</span>churn)</span></code></pre></div>
</details>
</div>
<p>However to make above <code>cv_folds</code> compatible with <code>caret</code>, we need to used <code>rsample2caret</code> to convert a <code>trainControl</code> list</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cv_folds_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">rsample2caret</span>(cv_folds)</span>
<span id="cb10-2">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(</span>
<span id="cb10-3">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>,</span>
<span id="cb10-4">        <span class="at" style="color: #657422;">verboseIter =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb10-5">        <span class="at" style="color: #657422;">classProbs =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-6">        <span class="at" style="color: #657422;">summaryFunction =</span> twoClassSummary,</span>
<span id="cb10-7">        <span class="at" style="color: #657422;">returnResamp =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-8">        <span class="at" style="color: #657422;">savePredictions =</span> <span class="st" style="color: #20794D;">"final"</span>,</span>
<span id="cb10-9">        <span class="at" style="color: #657422;">index =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>index,</span>
<span id="cb10-10">        <span class="at" style="color: #657422;">indexOut =</span> cv_folds_cr<span class="sc" style="color: #5E5E5E;">$</span>indexOut</span>
<span id="cb10-11">  )</span></code></pre></div>
</details>
</div>
<p>Or we can simply use caret function <code>trainControl</code> function to generate split. However, no stratify option is available here.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cv_folds_trCtrl <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">trainControl</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>, <span class="at" style="color: #657422;">number=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="hyperparameters-grid" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameters-grid">4. hyperparameters grid</h2>
<p>A hyperparameter is a parameter whose value is set before the learning process begins. It is distinguished from other parameters by the fact that it is not used for fitting the machine to the training set. For different models, there are a different number of hyperparameters you can tune. Here I choose to use random forest to model the data. The hyperparameters for random forest from <code>ranger</code> include</p>
<ol type="1">
<li>the number of trees – <code>num.trees</code> or <code>trees</code></li>
<li>depth of tree – <code>max.depth</code></li>
<li>number of features to consider at every split – <code>mtry</code></li>
<li>minimum number of samples required to split a node – <code>min.node.size</code> or <code>min_n</code></li>
<li>whether using boostrapping to select samples for training – <code>replace</code>.</li>
<li>fraction of observation to sample – <code>sample.fraction</code>. Specifying <code>sample.fraction</code> requires <code>replace</code> being set as TRUE</li>
</ol>
<p>A rule of thumb to start is</p>
<ul>
<li><code>num.trees</code> start with 10x p (p means number of features).</li>
<li><code>max.depth</code></li>
<li><code>mtry</code>: sqrt(p) for classification and p/3 for regression</li>
<li><code>min.node.size</code> default values of 1 for classification and 5 for regression</li>
<li><code>replace</code> and <code>sample.fraction</code>: Default is 1 for sampling with replacement and 0.632 for sampling without replacement.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">hyp_grid <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb12-2">        <span class="at" style="color: #657422;">trees =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">500</span>,<span class="dv" style="color: #AD0000;">1000</span>),</span>
<span id="cb12-3">        <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb12-4">        <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb12-5">)</span></code></pre></div>
</details>
</div>
<p>The hyperparameters can be checked by function <code>args(rand_forest)</code></p>
<p><code>rf</code> method (from RandomForest) for <code>caret</code> has only one hyperparameter (mtry) by default.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">hyp_grid_cr <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">mtry=</span><span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-3">)</span></code></pre></div>
</details>
</div>
</section>
<section id="fit-model" class="level2">
<h2 class="anchored" data-anchor-id="fit-model">5. fit model</h2>
<p>Here is the step where tidymodel and caret start to diverge in syntax. Typically, tidymodel builds a model using <code>workflow</code> pipe which specifies formular/recipe and model, while caret uses <code>train</code> to fit model.</p>
<p><strong>tidymodel</strong></p>
<p>default version of model fit <code>fit_resamples</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># without grid_tune -&gt; fit_resamples() at train</span></span>
<span id="cb14-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-3">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"permutation"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-4">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb14-5"></span>
<span id="cb14-6">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-7">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb14-11">default_tm_fit<span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-12">        <span class="fu" style="color: #4758AB;">fit_resamples</span>(</span>
<span id="cb14-13">                <span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb14-14">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_resamples</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb14-15">                )</span></code></pre></div>
</details>
</div>
<p>grid version of model fit <code>grid_tune</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># with grid_tune -&gt; set tune() at model, use tune_grid() at train</span></span>
<span id="cb15-2">rf_tm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rand_forest</span>(</span>
<span id="cb15-3">                <span class="at" style="color: #657422;">mtry=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-4">                <span class="at" style="color: #657422;">trees=</span><span class="fu" style="color: #4758AB;">tune</span>(), </span>
<span id="cb15-5">                <span class="at" style="color: #657422;">min_n=</span><span class="fu" style="color: #4758AB;">tune</span>()</span>
<span id="cb15-6">        ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-7">        <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance=</span><span class="st" style="color: #20794D;">"impurity"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-8">        <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10">rf_tm_wf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-11">        <span class="fu" style="color: #4758AB;">add_model</span>(rf_tm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-12">        <span class="fu" style="color: #4758AB;">add_recipe</span>(rec)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb15-15">grid_tm_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-16">        <span class="fu" style="color: #4758AB;">tune_grid</span>(<span class="at" style="color: #657422;">resamples =</span> cv_folds,</span>
<span id="cb15-17">            <span class="at" style="color: #657422;">grid =</span> hyp_grid,</span>
<span id="cb15-18">                <span class="at" style="color: #657422;">control =</span> <span class="fu" style="color: #4758AB;">control_grid</span>(<span class="at" style="color: #657422;">save_pred =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb15-19">            )</span></code></pre></div>
</details>
</div>
<p>Notes: 1. <code>control</code> specification will be <code>control_grid()</code> in <code>grid_tune()</code> 2. <code>grid</code> parameter here can also be a integer which test for top N parameters.</p>
<p>Follow the thread https://github.com/tidymodels/parsnip/issues/235 to find how to print out default hyperparameters.</p>
<p><strong>caret</strong></p>
<p>default version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># without hyp grid</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb16-3">default_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb16-4">        rec,</span>
<span id="cb16-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb16-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb16-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb16-8">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb16-9">)</span></code></pre></div>
</details>
</div>
<p>grid version of model fit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># with grid --- tuneGrid</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb17-3">grid_cr_fit<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">train</span>(</span>
<span id="cb17-4">        rec,</span>
<span id="cb17-5">        <span class="at" style="color: #657422;">data =</span> data_train,</span>
<span id="cb17-6">        <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"rf"</span>,</span>
<span id="cb17-7">        <span class="at" style="color: #657422;">trControl =</span> cv_folds_trCtrl,</span>
<span id="cb17-8">        <span class="at" style="color: #657422;">tuneGrid =</span> hyp_grid_cr,</span>
<span id="cb17-9">        <span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"ROC"</span></span>
<span id="cb17-10">)</span></code></pre></div>
</details>
</div>
</section>
<section id="collect-metrics" class="level2">
<h2 class="anchored" data-anchor-id="collect-metrics">6. collect metrics</h2>
<p>Metrics are used to determine how good the model fit. For classification problem, accuracy and ROC/AUC are commonly used. For regression problem, RSEM is the most commonly used approach.</p>
<p>We used <code>collect_metrics</code> in <code>tidymodels</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># for default model</span></span>
<span id="cb18-2">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># for grid tune model</span></span>
<span id="cb18-5">grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
</details>
</div>
<p>list <code>results</code> stores metrics for <code>caret</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results</span></code></pre></div>
</details>
</div>
<p>From the results, we can tell that <code>train</code> fit 3 hyperparameters by default.</p>
</section>
<section id="collect-prediction-for-training-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-training-data">7. collect prediction for training data</h2>
<p>Besides model metrics, we also care about what predicted value of target variable is in training data.</p>
<p><strong>tidymodels</strong></p>
<p>To see predicted target value for data_train, we can use <code>collect_predictions</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb20-6">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb20-7">                default_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_predictions</span>(), churn, .pred_Yes</span>
<span id="cb20-8">        )</span>
<span id="cb20-9">)</span></code></pre></div>
</details>
</div>
<p><em>Notes: collect_predictions() only works when specifying <code>save_pred = TRUE</code> in control.</em></p>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;"># plot auc</span></span>
<span id="cb21-4"><span class="fu" style="color: #4758AB;">autoplot</span>(</span>
<span id="cb21-5">        <span class="fu" style="color: #4758AB;">roc_curve</span>(</span>
<span id="cb21-6">                default_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df, </span>
<span id="cb21-7">                obs, Yes</span>
<span id="cb21-8">        )</span>
<span id="cb21-9">)</span></code></pre></div>
</details>
</div>
<p><em>For both caret and tidymodels, it is possible that each row of the original data point might be represented multiple times per tuning paramete if boostrap or repeated cv is used</em></p>
</section>
<section id="collect-prediction-for-testing-data" class="level2">
<h2 class="anchored" data-anchor-id="collect-prediction-for-testing-data">8. collect prediction for testing data</h2>
<p>For default fit, only one set of hyperparameters is specified, thus we can just apply the fitted model to <code>data_test</code>. However, for grid fit, we end up with multiple sets of hyperparameters. Thus, before fitting the model, we need to pick the best set of hyperparameters based on metrics on training data (which is summarized using specified rsample method), then apply the best model to test_data</p>
<p><strong>tidymodels</strong></p>
<p><code>last_fit</code> is a function that is applied to workflow and fits to test data. By default, it generates predictions that can be reported by <code>collect_prediction</code> (no need to specify <code>control</code> in the fit). We can also use <code>collect_metrics</code> to check the metrics in testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb22-2">default_last_fit <span class="ot" style="color: #003B4F;">=</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">        <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb22-4"></span>
<span id="cb22-5">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-6">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb22-7"></span>
<span id="cb22-8">default_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-9">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p>To select best set of hyperparameters from <code>grid_tune</code>, we use <code>select_best</code> by specifying which metrics to use. Then we apply this set of hyperparameters to original workflow by <code>finalize_workflow</code>. Finally, like default, apply <code>last_fit</code> to the best workflow and get predictions and metrics for the testing data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># grid tune</span></span>
<span id="cb23-2">best_hyp <span class="ot" style="color: #003B4F;">&lt;-</span> grid_tm_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-3">        <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"roc_auc"</span>)</span>
<span id="cb23-4"></span>
<span id="cb23-5">best_wf <span class="ot" style="color: #003B4F;">&lt;-</span> rf_tm_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-6">        <span class="fu" style="color: #4758AB;">finalize_workflow</span>(best_hyp)</span>
<span id="cb23-7"></span>
<span id="cb23-8">grid_last_fit <span class="ot" style="color: #003B4F;">&lt;-</span> best_wf <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-9">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span> data_splits)</span>
<span id="cb23-10"></span>
<span id="cb23-11">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-12">        <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb23-13"></span>
<span id="cb23-14">grid_last_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-15">        <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<p>The <code>predict</code> function can be directly applied to fitted model to test data. For grid fit, it will automatically detect the best hyperparameters (here mtry=5) and apply it to the testing data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># default</span></span>
<span id="cb24-2">test_prediction <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb24-3">    default_cr_fit,</span>
<span id="cb24-4">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb24-5">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb24-11"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb24-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb24-13">test_prediction <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-14">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-15">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-16">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># best hyp</span></span>
<span id="cb25-3">grid_cr_fit<span class="sc" style="color: #5E5E5E;">$</span>results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-4">        <span class="fu" style="color: #4758AB;">slice</span>(<span class="fu" style="color: #4758AB;">which.max</span>(ROC))</span>
<span id="cb25-5"></span>
<span id="cb25-6">test_prediction2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb25-7">    grid_cr_fit,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;">newdata =</span> data_test,</span>
<span id="cb25-9">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb25-11">        <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">estimate=</span>Yes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># for binary result we can randomly pick one, it will be same roc_auc</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">add_column</span>(<span class="at" style="color: #657422;">churn =</span> data_test<span class="sc" style="color: #5E5E5E;">$</span>churn) </span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">## auc</span></span>
<span id="cb25-15"><span class="fu" style="color: #4758AB;">roc_auc</span>(test_prediction2, churn, estimate)<span class="sc" style="color: #5E5E5E;">$</span>.estimate</span>
<span id="cb25-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">## accuracy</span></span>
<span id="cb25-17">test_prediction2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-18">        <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">.pred=</span><span class="fu" style="color: #4758AB;">ifelse</span>(estimate <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">"Yes"</span>,<span class="st" style="color: #20794D;">"No"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-19">        <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">accuracy=</span><span class="fu" style="color: #4758AB;">mean</span>(.pred<span class="sc" style="color: #5E5E5E;">==</span>churn)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-20">        <span class="fu" style="color: #4758AB;">pull</span>(accuracy)</span></code></pre></div>
</details>
</div>
</section>
<section id="importance-of-variables" class="level2">
<h2 class="anchored" data-anchor-id="importance-of-variables">9. importance of variables</h2>
<p>Lastly, we can use fit result to find most important variables by <code>vip</code> package or caret function <code>varImp</code>. Be aware that, for <code>tidymodels</code> different <code>importance</code> specified in the model will result in different ranks</p>
<p><strong>tidymodels</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pull_workflow_fit</span>(default_last_fit<span class="sc" style="color: #5E5E5E;">$</span>.workflow[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb26-2">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit)<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb26-3">vip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vip</span>(rf_fit, <span class="at" style="color: #657422;">geom =</span> <span class="st" style="color: #20794D;">"point"</span>)</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;"># model-specific variable importance scores are currently not available for objects of class "_rangermodel_fit"</span></span></code></pre></div>
</details>
</div>
<p><strong>caret</strong></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">varImp</span>(default_cr_fit, <span class="at" style="color: #657422;">scale =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)<span class="sc" style="color: #5E5E5E;">$</span>importance <span class="sc" style="color: #5E5E5E;">%&gt;%</span> tbl_df</span></code></pre></div>
</details>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The following table summarizes the ML workflow using caret versus tidymodels:</p>
</section>
<section id="thank-you" class="level2">
<h2 class="anchored" data-anchor-id="thank-you">Thank you</h2>
<p>Special thanks to <a href="https://www.linkedin.com/in/amygoodwindavies/">Amy Goodwin Davies</a> who helped editing and proof-reading this post!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>ML</category>
  <category>tidymodels</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-04-30_caret_vs_tidymodels.html</guid>
  <pubDate>Thu, 30 Apr 2020 04:00:00 GMT</pubDate>
</item>
<item>
  <title>External persistent data I/O using ShinyApp</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</link>
  <description><![CDATA[ 



<p>Shiny App is a fantastic application in Rstudio and makes the data processing more accessible (and fun!). Most easy shiny apps are made to represent data based on a given user input which is read into memory or temporal file by R and spit out tables or figures in the same process. However, to make an app that need to keep the user input data for persistent storage and present in the future process require some external data I/O.</p>
<p>One of example app is survey app, in which user inputs will be accumulated for future presentation. Shiny rstudio presents this topic in an <a href="https://shiny.rstudio.com/articles/persistent-data-storage.html">article</a> written in 2017. However, my recent trial of those methods caused some troubles, either the packages/functions are deprecated or more strict authorization applied. In this post, I am going to introduce three persistent storage I have tried in my recent projects and complement that 2017 article with the updates.</p>
<section id="data-input-app" class="level2">
<h2 class="anchored" data-anchor-id="data-input-app">Data input app</h2>
<p>To start, I want to mention a <a href="https://gupsych.github.io/tquant/data-input.html">tutorial</a> on how to make survey app. In the tutorial, it mentioned how to read, save and re-load user input data from shiny app on a local machine. The critical part include:</p>
<ul>
<li>Create a table field to store each widget input (keep widget <code>inputId</code> and table field name same)</li>
<li>Save each user input data with a unique name in provided storage directory (<code>sprintf("%s_%s.rds", as.integer(Sys.time()), digest::digest(data))</code>)<br>
</li>
<li>Reload data file by file and field by field.<br>
</li>
<li>Reset survey by <code>update</code> widget</li>
</ul>
<p>In the tutorial example, the “provided storage directory” is in a local machine. Here I am going to introduce three external storage methods (AWS, dropbox and google spreadsheet) in the context of this dummy <a href="https://sckinta.shinyapps.io/SpeakerSignup/">survey app</a> I experiment with for Rladies Philly mentor-ship program.</p>
<p>In this dummy app, following widgets were made.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># define global options</span></span>
<span id="cb1-2">types<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Speaker"</span>,<span class="st" style="color: #20794D;">"Mentor"</span>)</span>
<span id="cb1-3">expertises<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academia to industry transition"</span>,<span class="st" style="color: #20794D;">"Transition to new field/industry"</span>,<span class="st" style="color: #20794D;">"Project/team management"</span>,<span class="st" style="color: #20794D;">"Making data science more accessible"</span>,<span class="st" style="color: #20794D;">"Working with big datasets"</span>,<span class="st" style="color: #20794D;">"Language research"</span>,<span class="st" style="color: #20794D;">"Data cleaning"</span>,<span class="st" style="color: #20794D;">"Capacity building"</span>,<span class="st" style="color: #20794D;">"Global health"</span>,<span class="st" style="color: #20794D;">"Data visualization"</span>,<span class="st" style="color: #20794D;">"Package creation"</span>,<span class="st" style="color: #20794D;">"Geospatial science"</span>,<span class="st" style="color: #20794D;">"Ecological modeling"</span>,<span class="st" style="color: #20794D;">"Mental health"</span>,<span class="st" style="color: #20794D;">"Building scalable tools"</span>,<span class="st" style="color: #20794D;">"Reproducible research"</span>,<span class="st" style="color: #20794D;">"App development"</span>)</span>
<span id="cb1-4">employment<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Academic"</span>,<span class="st" style="color: #20794D;">"Pharmaceutical"</span>,<span class="st" style="color: #20794D;">"Financial"</span>,<span class="st" style="color: #20794D;">"Business"</span>,<span class="st" style="color: #20794D;">"Research"</span>,<span class="st" style="color: #20794D;">"Quality assurance"</span>,<span class="st" style="color: #20794D;">"Government/public sector"</span>)</span>
<span id="cb1-5">meets<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"In-person"</span>,<span class="st" style="color: #20794D;">"Remote (e.g. by phone or online)"</span>)</span>
<span id="cb1-6">genders<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"She/her"</span>, <span class="st" style="color: #20794D;">"He/him"</span>, <span class="st" style="color: #20794D;">"They/them"</span>,<span class="st" style="color: #20794D;">"Other"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># define user input widgets, put inputId into a field vector for late saveData/loadData</span></span>
<span id="cb1-10">fields <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"gender_wig"</span>, <span class="st" style="color: #20794D;">"linkedin_wig"</span>, <span class="st" style="color: #20794D;">"photo_wig"</span>,</span>
<span id="cb1-11">            <span class="st" style="color: #20794D;">"type_wig"</span>, <span class="st" style="color: #20794D;">"expertise_wig"</span>, <span class="st" style="color: #20794D;">"employment_wig"</span>, <span class="st" style="color: #20794D;">"meet_wig"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># user input widgets</span></span>
<span id="cb1-14">name_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"name_wig"</span>, <span class="st" style="color: #20794D;">"Name:"</span>, <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-15">gender_wig  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">radioButtons</span>(</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;">"gender_wig"</span>, </span>
<span id="cb1-17">        <span class="st" style="color: #20794D;">"Pronouns:"</span>,</span>
<span id="cb1-18">        genders, </span>
<span id="cb1-19">        <span class="at" style="color: #657422;">inline =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb1-20">        <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"none"</span></span>
<span id="cb1-21">)</span>
<span id="cb1-22">linkedin_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"linkedin_wig"</span>,<span class="st" style="color: #20794D;">"LinkedIn Profile Link:"</span>,<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-23">photo_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"photo_wig"</span>, <span class="st" style="color: #20794D;">"Your photo (eg. .jpeg, .png)"</span>, <span class="at" style="color: #657422;">accept =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"jpeg"</span>,<span class="st" style="color: #20794D;">"png"</span>))</span>
<span id="cb1-24">type_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-25">        <span class="st" style="color: #20794D;">"type_wig"</span>,</span>
<span id="cb1-26">        <span class="st" style="color: #20794D;">"Available as mentor and/or speaker?"</span>, </span>
<span id="cb1-27">        types</span>
<span id="cb1-28">)</span>
<span id="cb1-29">expertise_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-30">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"expertise_wig"</span>,</span>
<span id="cb1-31">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Areas of expertise"</span>, </span>
<span id="cb1-32">        <span class="at" style="color: #657422;">choices =</span>  expertises,</span>
<span id="cb1-33">        <span class="at" style="color: #657422;">multiple =</span> T,</span>
<span id="cb1-34">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-35">)</span>
<span id="cb1-36">employment_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb1-37">        <span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"employment_wig"</span>,</span>
<span id="cb1-38">        <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Primary type of employment"</span>, </span>
<span id="cb1-39">        <span class="at" style="color: #657422;">choices =</span>  employment,</span>
<span id="cb1-40">        <span class="at" style="color: #657422;">multiple =</span> F,</span>
<span id="cb1-41">        <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">create =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-42">)</span>
<span id="cb1-43">meet_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">checkboxGroupInput</span>(</span>
<span id="cb1-44">        <span class="st" style="color: #20794D;">"meet_wig"</span>,</span>
<span id="cb1-45">        <span class="st" style="color: #20794D;">"If you are willing to serve as a mentor, </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">what is your preferred method of communication with your mentees?"</span>, </span>
<span id="cb1-46">        meets</span>
<span id="cb1-47">)</span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;"># button widgets</span></span>
<span id="cb1-50">clear_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"clear"</span>, <span class="st" style="color: #20794D;">"Clear Form"</span>)</span>
<span id="cb1-51">submit_wig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"submit"</span>, <span class="st" style="color: #20794D;">"Submit"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="aws" class="level2">
<h2 class="anchored" data-anchor-id="aws">AWS</h2>
<p>In 2017 rstudio article, <code>{aws.s3}</code> package is used for communication between app and AWS.S3 external database. <code>{aws.s3}</code> can be installed through.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"aws.s3"</span>, <span class="at" style="color: #657422;">repos =</span> <span class="st" style="color: #20794D;">"https://cloud.R-project.org"</span>)</span></code></pre></div>
</details>
</div>
<p><em>When I was making the app, the CRAN repo was orphan. The <a href="https://github.com/cloudyr/aws.s3">github repo of aws.s3</a> could not easily be installed while publishing the app on shinyapps.io or rstudio connect, because their github repo missed creator assignment in DESCRIPTION. Also Now it is back to normal with new <a href="https://github.com/cloudyr/aws.s3/issues/335">commit</a>.</em></p>
<section id="authentication" class="level4">
<h4 class="anchored" data-anchor-id="authentication">Authentication</h4>
<p>Next step is to set up aws.s3, same as 2017 rstudio artical, use the code below to set up in R</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">s3BucketName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"&lt;bucket_name&gt;"</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="st" style="color: #20794D;">"AWS_ACCESS_KEY_ID"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_ACCESS_KEY_ID&gt;"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;">"AWS_SECRET_ACCESS_KEY"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"&lt;AWS_SECRET_ACCESS_KEY&gt;"</span>,</span>
<span id="cb3-4">           <span class="st" style="color: #20794D;">"AWS_DEFAULT_REGION"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"us-east-2"</span>)</span></code></pre></div>
</details>
</div>
<p>To use aws.s3, we first need to have a AWS account and set up s3 bucket. To set up a s3 bucket, you can sign in to the <a href="https://aws.amazon.com/console/">Console</a> and click S3 under “Storage”. Under Amazon S3, you can create a bucket with a unique bucket name (Keep this name to <code>s3BucketName</code>) and selected region (Remember this selected region, it will become value for <code>AWS_DEFAULT_REGION</code>. Mine is us-east-2). Then you will be back to the bucket list page.</p>
<p>To obtain the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY, drop down your profile name on the top right menu, click “My Security Credentials”,</p>
<p><img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/nRL7M41/pic1.png" class="img-fluid"></p>
<p>Then at “Access keys (access key ID and secret access key” click “Create New Access Key”. Remember to save this, you cannot find this access key listed later. <img src="https://learniningwithsckinta.netlify.app/posts/https:/i.ibb.co/89ZXJrd/pic2.png" class="img-fluid"></p>
</section>
<section id="savedata" class="level4">
<h4 class="anchored" data-anchor-id="savedata">saveData</h4>
<p>In the <a href="https://sckinta.shinyapps.io/SpeakerSignup/">demo app</a>, each user entry include text input and a picture file. To make the picture file and text input match for each entry, I keep the same prefix and save new image name as one variable in data.frame.</p>
<p>The <code>saveData</code> function code:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb4-2">        <span class="co" style="color: #5E5E5E;"># create a empty data frame</span></span>
<span id="cb4-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-4">        <span class="co" style="color: #5E5E5E;"># loop through every field</span></span>
<span id="cb4-5">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb4-6">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb4-7">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-8">                  <span class="co" style="color: #5E5E5E;"># fileInput widget with value</span></span>
<span id="cb4-9">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb4-10">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb4-11">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb4-12">                        }</span>
<span id="cb4-13">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb4-14">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb4-15">                        }</span>
<span id="cb4-16">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-17">                  <span class="co" style="color: #5E5E5E;"># fileInput widget without value, assign a place holder image saved in bucket</span></span>
<span id="cb4-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-19">                }</span>
<span id="cb4-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb4-22">                          <span class="co" style="color: #5E5E5E;"># text widgets without value</span></span>
<span id="cb4-23">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb4-24">                        }</span>
<span id="cb4-25">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb4-26">                          <span class="co" style="color: #5E5E5E;"># text widgets (checkboxGroupInput) with multiple values</span></span>
<span id="cb4-27">                                </span>
<span id="cb4-28">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb4-29">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-30">                          <span class="co" style="color: #5E5E5E;"># text widgets with single value</span></span>
<span id="cb4-31">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb4-32">                        }</span>
<span id="cb4-33">                }</span>
<span id="cb4-34">        }</span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;"># input timestamp</span></span>
<span id="cb4-36">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb4-37">        </span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb4-39">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb4-40">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb4-41">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-42">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb4-43">                name1, </span>
<span id="cb4-44">                name2</span>
<span id="cb4-45">        )</span>
<span id="cb4-46">        </span>
<span id="cb4-47">        <span class="co" style="color: #5E5E5E;"># rename imagefilename and save image file to s3</span></span>
<span id="cb4-48">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb4-49">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb4-50">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb4-51">                        name1, </span>
<span id="cb4-52">                        name2</span>
<span id="cb4-53">                )</span>
<span id="cb4-54">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb4-55">                <span class="co" style="color: #5E5E5E;"># save the image file to aws s3</span></span>
<span id="cb4-56">                aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">put_object</span>(</span>
<span id="cb4-57">                  <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName), </span>
<span id="cb4-58">                  <span class="at" style="color: #657422;">object =</span> img_newName, </span>
<span id="cb4-59">                  <span class="at" style="color: #657422;">bucket =</span> s3BucketName, </span>
<span id="cb4-60">                  <span class="at" style="color: #657422;">check_region =</span> F, <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb4-61">                  )</span>
<span id="cb4-62">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb4-63">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb4-64">        }</span>
<span id="cb4-65">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"https://rladiesmentor.s3.us-east-2.amazonaws.com/"</span>,img_newName)</span>
<span id="cb4-66">        </span>
<span id="cb4-67">        <span class="co" style="color: #5E5E5E;"># save df as rds to the aws s3</span></span>
<span id="cb4-68">        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3save</span>(data, <span class="at" style="color: #657422;">bucket =</span> s3BucketName, <span class="at" style="color: #657422;">object =</span> fileName)</span>
<span id="cb4-69">        </span>
<span id="cb4-70">        </span>
<span id="cb4-71">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata" class="level4">
<h4 class="anchored" data-anchor-id="loaddata">loadData</h4>
<p>To retrive the data from bucket, we can use following <code>loadData</code> function</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb5-2">        <span class="co" style="color: #5E5E5E;"># read all the rds files into a list</span></span>
<span id="cb5-3">        files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">get_bucket</span>(s3BucketName), <span class="cf" style="color: #003B4F;">function</span>(x){x[[<span class="st" style="color: #20794D;">"Key"</span>]]})</span>
<span id="cb5-4">        files <span class="ot" style="color: #003B4F;">&lt;-</span> files[<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.rds"</span>,files)]</span>
<span id="cb5-5">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(files) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb5-6">                <span class="co" style="color: #5E5E5E;"># create an empty data frame with additional timestamp column if no entries at aws s3</span></span>
<span id="cb5-7">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb5-8">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb5-9">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb5-10">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-11">                <span class="co" style="color: #5E5E5E;"># load data s3load entry by entry if there are entries at aws s3</span></span>
<span id="cb5-12">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(files, <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb5-13">                        aws.s3<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">s3load</span>(x, <span class="at" style="color: #657422;">bucket =</span> s3BucketName)</span>
<span id="cb5-14">                        data</span>
<span id="cb5-15">                })</span>
<span id="cb5-16">                </span>
<span id="cb5-17">                <span class="co" style="color: #5E5E5E;"># concatenate all data together into one data.frame</span></span>
<span id="cb5-18">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, data)</span>
<span id="cb5-19">        }</span>
<span id="cb5-20">        </span>
<span id="cb5-21">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb5-22">        </span>
<span id="cb5-23"></span>
<span id="cb5-24">        <span class="co" style="color: #5E5E5E;"># make image src as one output column</span></span>
<span id="cb5-25">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb5-26">                <span class="at" style="color: #657422;">photo=</span><span class="fu" style="color: #4758AB;">sapply</span>(data<span class="sc" style="color: #5E5E5E;">$</span>photo.link,<span class="cf" style="color: #003B4F;">function</span>(pic){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'&lt;img src='</span>,pic,<span class="st" style="color: #20794D;">' height=52&gt;&lt;/img&gt;'</span>)})</span>
<span id="cb5-27">        )</span>
<span id="cb5-28">        <span class="co" style="color: #5E5E5E;"># make name column a link</span></span>
<span id="cb5-29">        out <span class="ot" style="color: #003B4F;">=</span> out <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-30">                <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(<span class="cf" style="color: #003B4F;">function</span>(url,text){<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)}, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name))</span>
<span id="cb5-31">        </span>
<span id="cb5-32">        <span class="co" style="color: #5E5E5E;"># output data frame for dataTableRender</span></span>
<span id="cb5-33">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb5-34">                out <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb5-35">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb5-36">        )</span>
<span id="cb5-37">        out</span>
<span id="cb5-38">}</span></code></pre></div>
</details>
</div>
<p>To make the image file readable by link, you have to change the bucket public access permission, and make anyone can read it.</p>
</section>
</section>
<section id="dropbox" class="level2">
<h2 class="anchored" data-anchor-id="dropbox">Dropbox</h2>
<p><code>rdrop2</code> is the package R used to communicate with dropbox, and can be directly installed from CRAN.</p>
<section id="authentication-1" class="level4">
<h4 class="anchored" data-anchor-id="authentication-1">Authentication</h4>
<p>After installation, we need to authenticate R to access your dropbox (like AWS authentication key). Instead of obtaining directly from website, first time <code>drop_auth()</code> will direct you to web browser for dropbox authentication.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(rdrop2)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"># for remote use (deploy app to shinyapps.io or rstudio connect), you can save your auth to rds and load it to host platform</span></span>
<span id="cb6-6">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_auth</span>()</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;">saveRDS</span>(token, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"token.rds"</span>)</span></code></pre></div>
</details>
</div>
<p>Caution: this token authorize anyone with token file an access to all the files in your dropbox account.</p>
<p>When you are ready to use the token to allow access the data at remote setting, you can do</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># this part should be included in your shinyapp code</span></span>
<span id="cb7-2">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load</span>(<span class="st" style="color: #20794D;">"token.rds"</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">drop_acc</span>(<span class="at" style="color: #657422;">dtoken =</span> token)</span></code></pre></div>
</details>
</div>
</section>
<section id="savedata-1" class="level4">
<h4 class="anchored" data-anchor-id="savedata-1">saveData</h4>
<p>Unlike AWS S3, I choose to aggregate individual entries into one csv file (You can do the same thing in AWS S3 too). The <code>saveData</code> function for dropbox is</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb8-2">        <span class="co" style="color: #5E5E5E;"># read previously stored csv file</span></span>
<span id="cb8-3">        old_df <span class="ot" style="color: #003B4F;">=</span> rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb8-4">        </span>
<span id="cb8-5">        <span class="co" style="color: #5E5E5E;"># save one user entry to a new data frame (like AWS above)</span></span>
<span id="cb8-6">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb8-8">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb8-9">                <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">!=</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-10">                        img_file<span class="ot" style="color: #003B4F;">=</span>var<span class="sc" style="color: #5E5E5E;">$</span>datapath</span>
<span id="cb8-11">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPG|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.jpeg|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.JPEG"</span>,img_file)){</span>
<span id="cb8-12">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".jpeg"</span></span>
<span id="cb8-13">                        }</span>
<span id="cb8-14">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.png|</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.PNG"</span>,img_file)){</span>
<span id="cb8-15">                                img_format<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">".png"</span></span>
<span id="cb8-16">                        }</span>
<span id="cb8-17">                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"photo_wig"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-18">                        img_file<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-19">                }</span>
<span id="cb8-20">                <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-21">                        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb8-22">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb8-23">                        }</span>
<span id="cb8-24">                        <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb8-25">                                <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb8-26">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(var)</span>
<span id="cb8-27">                        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-28">                                <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb8-29">                                data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb8-30">                        }</span>
<span id="cb8-31">                }</span>
<span id="cb8-32">        }</span>
<span id="cb8-33">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">date</span>()</span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;"># Create a unique file name</span></span>
<span id="cb8-35">        name1<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb8-36">        name2<span class="ot" style="color: #003B4F;">=</span>digest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">digest</span>(data)</span>
<span id="cb8-37">        fileName <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-38">                <span class="st" style="color: #20794D;">"%s_%s.rds"</span>, </span>
<span id="cb8-39">                name1, </span>
<span id="cb8-40">                name2</span>
<span id="cb8-41">        )</span>
<span id="cb8-42">        </span>
<span id="cb8-43">        <span class="co" style="color: #5E5E5E;"># rename and save imagefilename</span></span>
<span id="cb8-44">        <span class="cf" style="color: #003B4F;">if</span> (img_file<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">"unknown.jpg"</span>){</span>
<span id="cb8-45">                img_newName <span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb8-46">                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%s_%s"</span>,img_format), </span>
<span id="cb8-47">                        name1, </span>
<span id="cb8-48">                        name2</span>
<span id="cb8-49">                )</span>
<span id="cb8-50">                <span class="fu" style="color: #4758AB;">file.rename</span>(<span class="at" style="color: #657422;">from=</span>img_file, <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-51">                rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),img_newName))</span>
<span id="cb8-52">        }<span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-53">                img_newName <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"unknown.jpg"</span></span>
<span id="cb8-54">        }</span>
<span id="cb8-55">        </span>
<span id="cb8-56">        <span class="co" style="color: #5E5E5E;"># add phone name to data column</span></span>
<span id="cb8-57">        data[<span class="st" style="color: #20794D;">"photo_wig"</span>]<span class="ot" style="color: #003B4F;">=</span>img_newName</span>
<span id="cb8-58">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>,<span class="st" style="color: #20794D;">"photo.link"</span>)</span>
<span id="cb8-59">        </span>
<span id="cb8-60">        <span class="co" style="color: #5E5E5E;"># append new entry to the old_df</span></span>
<span id="cb8-61">        new_df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(old_df, data)</span>
<span id="cb8-62">        <span class="co" style="color: #5E5E5E;"># write new_df csv to a temp file</span></span>
<span id="cb8-63">        <span class="fu" style="color: #4758AB;">write.csv</span>(new_df, <span class="at" style="color: #657422;">file=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-64">        <span class="co" style="color: #5E5E5E;"># upload this temp file to dropbox</span></span>
<span id="cb8-65">        rdrop2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drop_upload</span>(<span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>))</span>
<span id="cb8-66">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-1" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-1">loadData</h4>
<p>From above example, you may notice that all the file need to be saved at local for a moment before uploading dropbox. In other words, rdrop2 only deals file level data. Thus, if you want to retrieve unstructural file (not csv), you have to download the file to local, then show it. It will not work for links (because no way to set public access permissions in dropbox). Thus at loadData, I cannot make the image readable unless I download data to the local. The following example only show the data frame load, comment out the image part.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb9-2">        <span class="co" style="color: #5E5E5E;"># read csv</span></span>
<span id="cb9-3">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">drop_read_csv</span>(<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb9-4">        <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">nrow</span>(data) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb9-5">                <span class="co" style="color: #5E5E5E;"># create empty data frame with correct columns</span></span>
<span id="cb9-6">                field_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(fields, <span class="st" style="color: #20794D;">"submit_time"</span>)</span>
<span id="cb9-7">                data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">ncol =</span> <span class="fu" style="color: #4758AB;">length</span>(field_list), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb9-8">                <span class="fu" style="color: #4758AB;">names</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> field_list</span>
<span id="cb9-9">        } </span>
<span id="cb9-10">        </span>
<span id="cb9-11">        <span class="co" style="color: #5E5E5E;"># drop_get("jigglypuff.jpeg")</span></span>
<span id="cb9-12">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb9-13">        <span class="co" style="color: #5E5E5E;"># out = tibble(</span></span>
<span id="cb9-14">        <span class="co" style="color: #5E5E5E;">#         photo=sapply(data$photo.link,function(pic){paste0('&lt;img src=',pic,' height=52&gt;&lt;/img&gt;')})</span></span>
<span id="cb9-15">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-16">        <span class="co" style="color: #5E5E5E;"># out = out %&gt;%</span></span>
<span id="cb9-17">        <span class="co" style="color: #5E5E5E;">#         mutate(name=mapply(function(url,text){paste0("&lt;a href='",url,"'&gt;",text,"&lt;/a&gt;")}, data$linkedin, data$name))</span></span>
<span id="cb9-18">        <span class="co" style="color: #5E5E5E;"># out = bind_cols(</span></span>
<span id="cb9-19">        <span class="co" style="color: #5E5E5E;">#         out %&gt;% as.data.frame(),</span></span>
<span id="cb9-20">        <span class="co" style="color: #5E5E5E;">#         data[,c("pronoun","signUp.type","expertises","primary.employment","preferred.mentor.method")]</span></span>
<span id="cb9-21">        <span class="co" style="color: #5E5E5E;"># )</span></span>
<span id="cb9-22">        out<span class="ot" style="color: #003B4F;">=</span>data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)]</span>
<span id="cb9-23">        out</span>
<span id="cb9-24">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="googlesheets" class="level2">
<h2 class="anchored" data-anchor-id="googlesheets">googlesheets</h2>
<p>Two packages <code>googledrive</code> and <code>googlesheets4</code> are required for googlesheet data I/O. The main reason is that googlesheets4 have updated their security setting and made spreadsheet direct writing impossible. The way to get around is to use <code>googledrive::drive_download</code> to download the file to local, update the dataframe and save to a local file with same name like before, then use <code>googledrive::drive_update</code> to push the new file to the google drive. It is very similar to <code>rdrop2</code> file-level communication method. (Note: both <code>googledrive</code> and <code>googlesheets4</code> needs <code>gargle_oauth</code>).</p>
<section id="authentication-2" class="level4">
<h4 class="anchored" data-anchor-id="authentication-2">Authentication</h4>
<p>Googlesheets used <code>gargle_oauth</code> to prompt a web page for authentication. The code to set up authentication at local</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># you just need to run this part once (no need included in shinyapp code)</span></span>
<span id="cb10-2">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">drive_auth</span>()</span>
<span id="cb10-3">googlesheets4<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">sheets_auth</span>()</span></code></pre></div>
</details>
</div>
<p>Usually you do not need to explicitly prompt auth using above code. Using functions in <code>googledrive</code> and <code>googlesheets4</code> will automatically trigger the authentication.</p>
<p>After authentication, you can check your tokens by</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">gargle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gargle_oauth_sitrep</span>()</span></code></pre></div>
</details>
</div>
<p>The authentication step automatically generated token files under <code>~/.R/gargle/gargle-oauth/</code>. If the app work in local, that is all we need to do. If you want to deploy to hosting platform, we need to make this authentication non-interactive (no need for web browser to prompt a page). One way is to make your token files available for remote server access.</p>
<p>To make tokens available for remote server access, you can copy the email account authentication to the same directory app.R saved at. Since we have tokens associated with both <code>googledrive</code> and <code>googlesheets4</code>, we will end up have two token files. To move both token files to app directory. Using following shell code</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mkdir .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-2">cd .secret<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb12-3">cp <span class="sc" style="color: #5E5E5E;">~</span><span class="er" style="color: #AD0000;">/</span>.R<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">/</span>gargle<span class="sc" style="color: #5E5E5E;">-</span>oauth<span class="sc" style="color: #5E5E5E;">/</span><span class="er" style="color: #AD0000;">*</span>youremailname<span class="sc" style="color: #5E5E5E;">*</span> .</span></code></pre></div>
</details>
</div>
<p>When it is time to depoly, select .secret/ to upload to platform. In the app.R code, we just need to add following line to designate project-specific cache.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">options</span>(</span>
<span id="cb13-2">        <span class="at" style="color: #657422;">gargle_oauth_cache =</span> <span class="st" style="color: #20794D;">".secret"</span>,</span>
<span id="cb13-3">        <span class="at" style="color: #657422;">gargle_oauth_email =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb13-4">)</span></code></pre></div>
</details>
</div>
<p>This is not the most secure way, but easiest way. If you want to explore more secure way for this purpose, please ref to <a href="https://gargle.r-lib.org/articles/non-interactive-auth.html">non-interacive authentication in gargle</a></p>
</section>
<section id="savedata-2" class="level4">
<h4 class="anchored" data-anchor-id="savedata-2">saveData</h4>
<p>As alreadly mentioned, googledrive use file-level communication. We first used <code>drive_fine</code> to find which spreadsheet to read, then download using <code>googledrive::drive_download</code>, finally update/unload spreadsheet <code>googledrive::drive_update</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">saveData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input) {</span>
<span id="cb14-2">        <span class="co" style="color: #5E5E5E;"># download previous spreadsheet to tempfile</span></span>
<span id="cb14-3">        tmpDir<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">file.path</span>(<span class="fu" style="color: #4758AB;">tempdir</span>(),<span class="st" style="color: #20794D;">"mentors.csv"</span>)</span>
<span id="cb14-4">        mentors<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)</span>
<span id="cb14-5">        <span class="fu" style="color: #4758AB;">drive_download</span>(<span class="fu" style="color: #4758AB;">as_id</span>(mentors), <span class="at" style="color: #657422;">type=</span><span class="st" style="color: #20794D;">"csv"</span>, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">overwrite=</span>T)</span>
<span id="cb14-6">        </span>
<span id="cb14-7">        <span class="co" style="color: #5E5E5E;"># read spreadsheet to df</span></span>
<span id="cb14-8">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">read_csv</span>(tmpDir)</span>
<span id="cb14-9">        </span>
<span id="cb14-10">        <span class="co" style="color: #5E5E5E;"># read input to data</span></span>
<span id="cb14-11">        data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb14-12">        <span class="cf" style="color: #003B4F;">for</span> (x <span class="cf" style="color: #003B4F;">in</span> fields) {</span>
<span id="cb14-13">                var <span class="ot" style="color: #003B4F;">&lt;-</span> input[[x]]</span>
<span id="cb14-14">                <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var)<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>){</span>
<span id="cb14-15">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb14-16">                }</span>
<span id="cb14-17">                <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(var) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> ) {</span>
<span id="cb14-18">                        <span class="co" style="color: #5E5E5E;"># handles lists from checkboxGroup and multiple Select</span></span>
<span id="cb14-19">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(var,<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">", "</span>)</span>
<span id="cb14-20">                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb14-21">                        <span class="co" style="color: #5E5E5E;"># all other data types</span></span>
<span id="cb14-22">                        data[[x]] <span class="ot" style="color: #003B4F;">&lt;-</span> var</span>
<span id="cb14-23">                }</span>
<span id="cb14-24">        }</span>
<span id="cb14-25">        </span>
<span id="cb14-26">        data<span class="sc" style="color: #5E5E5E;">$</span>submit_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb14-27">        <span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"name"</span>,<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"linkedin"</span>, <span class="st" style="color: #20794D;">"email"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>,<span class="st" style="color: #20794D;">"submit.timestamp"</span>)</span>
<span id="cb14-28">        </span>
<span id="cb14-29">        <span class="co" style="color: #5E5E5E;"># append new data</span></span>
<span id="cb14-30">        df <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(df, data)</span>
<span id="cb14-31">        </span>
<span id="cb14-32">        <span class="co" style="color: #5E5E5E;"># write into tempfile</span></span>
<span id="cb14-33">        <span class="fu" style="color: #4758AB;">write_csv</span>(df, <span class="at" style="color: #657422;">path=</span>tmpDir, <span class="at" style="color: #657422;">na=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb14-34">        </span>
<span id="cb14-35">        <span class="co" style="color: #5E5E5E;"># update mentors spreadsheet</span></span>
<span id="cb14-36">        mentors <span class="ot" style="color: #003B4F;">&lt;-</span> mentors <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-37">          <span class="fu" style="color: #4758AB;">drive_update</span>(</span>
<span id="cb14-38">                tmpDir,</span>
<span id="cb14-39">                <span class="at" style="color: #657422;">name=</span><span class="st" style="color: #20794D;">"mentors"</span></span>
<span id="cb14-40">        )</span>
<span id="cb14-41">        <span class="co" style="color: #5E5E5E;"># drive_rm(mentors)</span></span>
<span id="cb14-42">}</span></code></pre></div>
</details>
</div>
</section>
<section id="loaddata-2" class="level4">
<h4 class="anchored" data-anchor-id="loaddata-2">loadData</h4>
<p><code>googlesheets</code> have a function <code>read_sheet</code> to read googlesheets directly to data.frame.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb15-2">        <span class="co" style="color: #5E5E5E;"># read spreadsheet</span></span>
<span id="cb15-3">        sheet_id<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">drive_find</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"mentors"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"spreadsheet"</span>)<span class="sc" style="color: #5E5E5E;">$</span>id</span>
<span id="cb15-4">        data<span class="ot" style="color: #003B4F;">=</span><span class="fu" style="color: #4758AB;">read_sheet</span>(sheet_id)</span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;"># data</span></span>
<span id="cb15-6">        names <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-7">                <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-8">                        <span class="cf" style="color: #003B4F;">function</span>(url,text){</span>
<span id="cb15-9">                                <span class="cf" style="color: #003B4F;">if</span>(url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-10">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-11">                                }<span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (url<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-12">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,url,<span class="st" style="color: #20794D;">"'&gt;"</span>,text,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-13">                                }</span>
<span id="cb15-14">                        }, </span>
<span id="cb15-15">                        data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-16">                        )</span>
<span id="cb15-17">        )</span>
<span id="cb15-18">        links <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-19">                <span class="at" style="color: #657422;">links=</span><span class="fu" style="color: #4758AB;">mapply</span>(</span>
<span id="cb15-20">                        <span class="cf" style="color: #003B4F;">function</span>(email, linkedin,text){</span>
<span id="cb15-21">                                <span class="cf" style="color: #003B4F;">if</span>(email<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> linkedin<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-22">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-23">                                } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (linkedin<span class="sc" style="color: #5E5E5E;">!=</span><span class="st" style="color: #20794D;">" "</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> email<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">" "</span>){</span>
<span id="cb15-24">                                        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-25">                                } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb15-26">                                        <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb15-27">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href=mailto:"</span>,email,<span class="st" style="color: #20794D;">"&gt;"</span>,<span class="st" style="color: #20794D;">"Email"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>),</span>
<span id="cb15-28">                                                <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"&lt;a href='"</span>,linkedin,<span class="st" style="color: #20794D;">"'&gt;"</span>,<span class="st" style="color: #20794D;">"LinkedIn"</span>,<span class="st" style="color: #20794D;">"&lt;/a&gt;"</span>)</span>
<span id="cb15-29">                                        )</span>
<span id="cb15-30">                                }</span>
<span id="cb15-31">                        }, </span>
<span id="cb15-32">                        data<span class="sc" style="color: #5E5E5E;">$</span>email, data<span class="sc" style="color: #5E5E5E;">$</span>linkedin, data<span class="sc" style="color: #5E5E5E;">$</span>name</span>
<span id="cb15-33">                )</span>
<span id="cb15-34">        )</span>
<span id="cb15-35">        out <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb15-36">                names <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(),</span>
<span id="cb15-37">                data[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pronoun"</span>,<span class="st" style="color: #20794D;">"signUp.type"</span>,<span class="st" style="color: #20794D;">"expertises"</span>,<span class="st" style="color: #20794D;">"primary.employment"</span>,<span class="st" style="color: #20794D;">"preferred.mentor.method"</span>)],</span>
<span id="cb15-38">                links <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb15-39">        )</span>
<span id="cb15-40">        out</span>
<span id="cb15-41">}</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="final-remarks" class="level2">
<h2 class="anchored" data-anchor-id="final-remarks">Final remarks</h2>
<p>In this post, we introduce three ways to load and save data to external storage clound. AWS s3 is most secure and fleasible among three. It can store and load unstructure data easily, thus it does not require much memory cache from host server. But it is not free when data is very big. Dropbox can save both tubular and unstructural data, but retrieve unstructure requires downloading file to cache. Googlesheets can only read/save tubular data. Both dropbox and googlesheets have some secure concerns, but you can create a free account and designate that account for app development/test only to reduce concerns for security. The complete codes for finished app can be accessed from my <a href="https://github.com/sckinta/example_code/tree/master/shinyapp_examples">github</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>shiny</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-03-30_shinyapp_tips.html</guid>
  <pubDate>Mon, 30 Mar 2020 04:00:00 GMT</pubDate>
  <media:content url="https://www.acsgrp.com/sites/default/files/sb-5.png" medium="image" type="image/png"/>
</item>
<item>
  <title>All about git</title>
  <dc:creator>Sckinta</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</link>
  <description><![CDATA[ 



<p>Recently I have actively participated two team projects (PAWS and 2020datahack) which involves multiple team members and a lot of group decisions. For the first time, I realized how important to use github as the platform for code sharing and communication. Here I am going to share several commands that I frequently used at this process and hope it will help people quickly pick up this useful collaboration tool.</p>
<section id="initiate-a-new-repo-at-github" class="level3">
<h3 class="anchored" data-anchor-id="initiate-a-new-repo-at-github">1. initiate a new repo at github</h3>
<p>Repository, aka repo, is a collection of codes, data and documentation designated for project(s). As far as you have github account, you can create public repo(s) through github webpage easily. Follow the step 1-5 on <a href="https://help.github.com/en/github/getting-started-with-github/create-a-repo">this website</a>, then you will create a repo with a few clicks. New repo usually comes with a README.md file. Using markdown format, you can describe the project in this README.md file which will be loaded to your repo main page when you open it. Here is the <a href="https://github.com/rladiesPHL/PAWS_return_noshow">repo</a> I created for Rladies-Philly PAWS projects.</p>
</section>
<section id="local-vs.-remote" class="level3">
<h3 class="anchored" data-anchor-id="local-vs.-remote">2. Local vs.&nbsp;remote</h3>
<p>One concept need to be clarified here is local vs.&nbsp;remote. <em>Github</em> is the most popular cloud-based service hosting repos. Those repo is managed by git installed at remote (aka, github here). So what is <em>git</em>? Git is a version control system that lets you manage and keep track of your source code history. It can also be <a href="https://git-scm.com/downloads">installed</a> at local and work as local version control system. In that case, your snapshot of each version will be saved at local instead of cloud.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># to initiate repo at local</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># suppose you have a project working now called repoX</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># all scripts/data/documentation are saved in a folder in your computer called repoX. </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Now you want to start git version control for this project</span></span>
<span id="cb1-5">cd repoX<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb1-6">git init</span>
<span id="cb1-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb1-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"initiate version control"</span></span></code></pre></div>
</details>
</div>
<p>The above code can be run on any shell-like terminal. And congrats, you have sucessefully create version control at local folder repoX/. <code>git commit</code> basically create a snapshot of this folder. If you want to change it back to this moment in the future, you can do it with commit number (it is hash code). It is important to write a meaningful message (like here “initiate version control”) to remind yourself what the snapshot is like. We will discuss how to recover using commit number in a little bit.</p>
</section>
<section id="clone-pull-and-push" class="level3">
<h3 class="anchored" data-anchor-id="clone-pull-and-push">3. clone, pull and push</h3>
<p>To communicate between your local and remote github, you can access through git by downloading (<code>pull</code>) remote to local and uploading (<code>push</code>) local repo to the cloud (github).</p>
<p>If you initiate repo from github first (step 1 above), you can first clone that repo to local. This repo will remember the remote address and allow you later pull from and push to the remote</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># here I use rladiesPHL/PAWS_return_noshow.git as my example</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># clone the repo to local</span></span>
<span id="cb2-4">git clone https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>rladiesPHL<span class="sc" style="color: #5E5E5E;">/</span>PAWS_return_noshow.git</span></code></pre></div>
</details>
</div>
<p>Anyone can clone a public repo to their local computer. However, to be able to <code>pull</code> and <code>push</code>, you need to be included as collaborators for that repo specially, or you are the repo owner yourself. To add someone as collaborator, follow the <a href="https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/inviting-collaborators-to-a-personal-repository">steps</a> by clicking on the webpage. Once you are the owner/collaborator, you can do following command to download and upload.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># initiate clone will create a folder at local called "PAWS_return_noshow", go to that folder</span></span>
<span id="cb3-2">cd PAWS_return_noshow<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># pull (the update) from PAWS_return_noshow (since the clone remember the remote address)</span></span>
<span id="cb3-4">git pull</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># you can do your analysis, do your update at local now</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># when it is time to upload your analysis to cloud, you first want to take a snapshot of what you have done so far</span></span>
<span id="cb3-9">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb3-10">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"my update"</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># now you can push your analysis to the github</span></span>
<span id="cb3-13">git push origin master</span></code></pre></div>
</details>
</div>
</section>
<section id="fork" class="level3">
<h3 class="anchored" data-anchor-id="fork">4. fork</h3>
<p>Above example is to push your analysis directly to the origin’s master branch. So what is <code>origin</code>? (what is the master branch will be explained in the next). Put it simple, you can consider origin as the place where is first downloaded. For example, I download PAWS_return_noshow repo from rladiesPHL account and the origin here will be rladiesPHL repo address (https://github.com/rladiesPHL/PAWS_return_noshow.git).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># to quick check your repo remote origin</span></span>
<span id="cb4-2">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (fetch)</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/rladiesPHL/PAWS_return_noshow.git (push)</span></span></code></pre></div>
</details>
</div>
<p>Why is <code>origin</code> important? The origin determines which repo push and pull will go to/from. Some repo won’t allow you to push and pull because you are not the owner or collaborator. If you do not want request pull and push permission from the owner, you can <code>fork</code> the repo to your own github account. Here <code>fork</code> is like to clone a remote repo belonging to other poeple’s account at that snapshot to your own account. You can develope/make commits on repo without any push/pull permission obstables.</p>
<p>The easiest way to fork a repo is from webpage. You can follow the instruction on this <a href="https://help.github.com/en/enterprise/2.13/user/articles/fork-a-repo">help page</a>.</p>
<p>Be aware, if you <code>git clone</code> the forked repo from your github account, the “origin” is your own account repo. This repo is functionally independent from the upstream repo, although at top of your own repo page it will show “This branch is X commits ahead of/behind XXX:master.” when the upstream repo makes commits after forking. What if you want your own “forked” repo remember where it comes so that you can merge the future changes from the upstream repo to your “forked” repo?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># here I show an example of a forked repo at my own account (sckinta/datahack2020) linking back to the upstream account (CodeForPhilly/datahack2020)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># add a repo description called "upstream" and associated this name with upstream repo. Here "upstream" can be any name (eg. up, ori, ...)</span></span>
<span id="cb6-4">git remote add upstream https<span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">//</span>github.com<span class="sc" style="color: #5E5E5E;">/</span>CodeForPhilly<span class="sc" style="color: #5E5E5E;">/</span>datahack2020.git</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># check remote info again you will find now repo have two remote associated with it. one is called "origin" and another is called "upstream"</span></span>
<span id="cb6-7">git remote <span class="sc" style="color: #5E5E5E;">-</span>v</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (fetch)</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># origin    https://github.com/sckinta/datahack2020.git (push)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (fetch)</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># upstream  https://github.com/CodeForPhilly/datahack2020.git (push)</span></span></code></pre></div>
</details>
</div>
<p>To update your forked repo at github, you need three steps: 1) <code>fetch</code> the upstream repo to your local repo; 2) <code>merge</code> updated fetch content into the main branch at local; 3) <code>push</code> updated local to remote forked repo</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># fecth upstream to local</span></span>
<span id="cb8-2">git fetch upstream</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Merge the updated fetch content into the main branch at local</span></span>
<span id="cb8-5">git merge upstream<span class="sc" style="color: #5E5E5E;">/</span>master</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Update, push to remote(fork) master branch</span></span>
<span id="cb8-8">git push origin master</span></code></pre></div>
</details>
</div>
<p>I highly suggest <code>pull</code> your forked repo to local first before <code>fetch</code> upstream. It will guarantee when you merge the upstream it will not cause the conflicts.</p>
</section>
<section id="branch" class="level3">
<h3 class="anchored" data-anchor-id="branch">5. branch</h3>
<p>After fork origin, another useful tool for collobarative project is using branch. “Branch”, as it is named, means a branch of analysis derived from the mainstream (which is by default named “master”). You can create branches on your own repo or the repo you have been invited as collaborator. This is the biggest difference between branch and a repo fork. To add a branch at local, using code <code>git checkout</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create and switch to a new branch (say, branch "chun")</span></span>
<span id="cb9-2">git checkout <span class="sc" style="color: #5E5E5E;">-</span>b chun</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># go back to the master</span></span>
<span id="cb9-5">git checkout master</span></code></pre></div>
</details>
</div>
<p>Now you can do your analysis in the repo fold. When you are ready to commit your new analysis, how will your repo know this analysis added to branch “chun”? Simple, using <code>git checkout</code> switch to chun branch and commit there. You can also push your new branch to remote, where the branch will show up under the <github_name>/<repo_name>/tree</repo_name></github_name></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># for example I push my new analysis to branch "chun" and finally push it to sckinta/datahack2020</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># switch to branch chun</span></span>
<span id="cb10-4">git checkout chun</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;"># make your new commit</span></span>
<span id="cb10-7">git add <span class="sc" style="color: #5E5E5E;">-</span>A</span>
<span id="cb10-8">git commit <span class="sc" style="color: #5E5E5E;">-</span>m <span class="st" style="color: #20794D;">"new analysis"</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;"># push it to github branch</span></span>
<span id="cb10-11">git push origin chun</span></code></pre></div>
</details>
</div>
<p>If you want to continue on other collaborator’s branch (say “abc”), you can pull that branch to local.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># download branch abc to your analysis</span></span>
<span id="cb11-2">git pull origin abc</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># check how many branches current local repo contains</span></span>
<span id="cb11-5">git branch</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># *chun</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;">#   master</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">#   abc</span></span></code></pre></div>
</details>
</div>
<p>After everybody did their analysis on their own branch, your group finally determine we are going to merge branch “abc” to master and delete the branch “abc”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># go to the master first</span></span>
<span id="cb13-2">git checkout master</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;"># merge branch "abc" in</span></span>
<span id="cb13-5">git merge abc</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># delete old branch</span></span>
<span id="cb13-8">git checkout <span class="sc" style="color: #5E5E5E;">-</span>d abc</span></code></pre></div>
</details>
</div>
<p>Occasionally, this process doesn’t go smoothly. Conflicts may occur when you try to merge multiple branches in. Then you may need advance tools like <code>mergetool</code> and <code>opendiff</code>. Here I won’t explain them. Please refer to<a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_advanced_merging">git tutorial page</a> for further reading. All the simple branch and merge has also been best explained on <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">git tutorial</a>.</p>
</section>
<section id="recover-a-certain-commit" class="level3">
<h3 class="anchored" data-anchor-id="recover-a-certain-commit">6. Recover a certain commit</h3>
<p>One major reason we want to use version control is that we can revert to a old snapshot/commit if we want. To check the commits done to the current repo, you can try <code>git log</code>. The log is reported in reverse chronical order.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">git log <span class="sc" style="color: #5E5E5E;">--</span>oneline</span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># ea03bb2 (HEAD -&gt; chun, origin/chun) clean and EDA on incident county</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># 3c659ec (upstream/master, origin/master, origin/HEAD, master) Merge pull request #7 from CodeForPhilly/branch_dubois</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;"># c76c701 (upstream/branch_dubois) updated outrigger &amp; added presentation</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># 29992c6 Merge pull request #6 from rjake/jake</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;"># 52c88ea Create psp_overdose_events.csv</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;"># 36495db Add codebook</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;"># 714f848 gitignore data files</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># 51e5974 added presentation slides</span></span></code></pre></div>
</details>
</div>
<p>To revert to a commit</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># since we are currently at chun branch, we better go back to master where "3c659ec" is at</span></span>
<span id="cb16-2">git checkout master</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;"># revert to a commit</span></span>
<span id="cb16-5">git revert 3c659ec</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># the above command can also be</span></span>
<span id="cb16-8">git reset <span class="sc" style="color: #5E5E5E;">--</span>hard 3c659ec</span></code></pre></div>
</details>
</div>
<p>Remember all of above is only updated at local. If you want to make it show up at github, do a <code>add</code>, <code>commit</code> and <code>push</code> series.</p>
</section>
<section id="link-to-your-remote-account-at-local" class="level3">
<h3 class="anchored" data-anchor-id="link-to-your-remote-account-at-local">7. link to your remote account at local</h3>
<p>After introduce all above basic commands for git, the last thing I want to share is to set up the local git remote account. I probably shoud put it at #2.remote vs.&nbsp;local# part.</p>
<p>To globally set github account at local can save your effort to put account name and password everytime you want to push/pull to your own account.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># for example I set global account as rladiesPHL. This will save the global configuration to a ~/.gitconfig file. It will prompt password for you to input</span></span>
<span id="cb17-2">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.email <span class="st" style="color: #20794D;">"philly@rladies.org"</span></span>
<span id="cb17-3">git config <span class="sc" style="color: #5E5E5E;">--</span>global user.name <span class="st" style="color: #20794D;">"rladiesPHL"</span></span></code></pre></div>
</details>
</div>
<p>Howver, sometimes I want to switch back to my personal account temperally to do a quick push. I wish git will prompt account and password for me to input</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># reset global account a little bit</span></span>
<span id="cb18-2">git config <span class="sc" style="color: #5E5E5E;">--</span>local credential.helper <span class="st" style="color: #20794D;">""</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># when you push, it will prompt account and password for me to input</span></span>
<span id="cb18-5">git push origin master</span></code></pre></div>
</details>
</div>
<p>All above are the frequently used git commands I used. Hope it will help anyone who is willing to use git version in their future project.</p>


</section>

 ]]></description>
  <category>bash</category>
  <category>git</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2020-02-11_all_about_git.html</guid>
  <pubDate>Tue, 11 Feb 2020 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Network visualization - Part 3</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>In the previous two posts, we discussed about IGRAPH object and how to manipulate, measure and cluster it. In this final post of network analysis series, I will focus on the network work visualization.</p>
<p>Network visualization are supported by two aspects — the aesthetics of network elements (aka, vertices and edges) and layout of network. There are multiple packages available for these aspects. I will focus on the basic igraph plot which is base R plot and the application of <code>ggraph</code> which use similar syntax comparable to ggplot2.</p>
<section id="aesthetics-of-network-elements" class="level1">
<h1>Aesthetics of network elements</h1>
<p>The aesthetics of both vertices and edges can be manipulated at color, transparency. Specially for vertices, we can also manipulate its shape, size and fill. For edges, we can manipulate its width/thickness, linetype, arrow and so on. Here, use simple example “actors” to show you how to present aesthetics using <code>igraph</code> default plot and <code>ggraph</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">actors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">age=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">48</span>,<span class="dv" style="color: #AD0000;">33</span>,<span class="dv" style="color: #AD0000;">45</span>,<span class="dv" style="color: #AD0000;">34</span>,<span class="dv" style="color: #AD0000;">21</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">gender=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>))</span>
<span id="cb1-5">relations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">from=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"David"</span>, <span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">same.dept=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;">friendship=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb1-10">  <span class="at" style="color: #657422;">advice=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-11">  )</span>
<span id="cb1-12">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_data_frame</span>(relations, <span class="at" style="color: #657422;">directed=</span><span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">vertices=</span>actors)</span></code></pre></div>
</details>
</div>
<section id="vertex-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="vertex-aesthetics">Vertex aesthetics</h2>
<p>Specify aesthetics in vertex attribute</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># make female and male color different</span></span>
<span id="cb2-2">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"vertice"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">color=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"red"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"blue"</span>))</span>
<span id="cb2-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"color"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>color)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-1.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># make age as size</span></span>
<span id="cb3-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">size=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">10</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb3-4">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"size"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>size)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The methods mentioned above can also be done by specify in <code>plot()</code>. One quick example below show the shape aesthetics. Check igraph valid shape names by <code>names(igraph:::.igraph.shapes)</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># make gender as shape</span></span>
<span id="cb4-2">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">shape=</span><span class="fu" style="color: #4758AB;">case_when</span>(gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"F"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"circle"</span>, gender<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"M"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"rectangle"</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">vertex.shape=</span>v<span class="sc" style="color: #5E5E5E;">$</span>shape)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">'topleft'</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">21</span>, <span class="dv" style="color: #AD0000;">22</span>),<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_igraph2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Be aware that the aesthetics specified by attributes can be overwritten by specifying in <code>plot()</code>. In addition, those aesthetics can also be used to apply to all vertices like <code>plot(g, vertex.shape="rectangle")</code>. The attributes to be manipulated in igraph (using base R) are limited. To find all the plotting attributes, try <code>?plot.igraph</code> or go to https://igraph.org/r/doc/plot.common.html</p>
<p>We can also draw attention to certain nodes by <code>mark.groups</code> in plot</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># mark dept</span></span>
<span id="cb5-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb5-4">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">plot</span>(g, </span>
<span id="cb5-6">     <span class="at" style="color: #657422;">mark.groups=</span><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-7">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name)),</span>
<span id="cb5-8">       <span class="fu" style="color: #4758AB;">unlist</span>(v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"IT"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(name))</span>
<span id="cb5-9">       ), </span>
<span id="cb5-10">     <span class="at" style="color: #657422;">mark.col=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#C5E5E7"</span>,<span class="st" style="color: #20794D;">"#ECD89A"</span>), <span class="at" style="color: #657422;">mark.border=</span><span class="cn" style="color: #8f5902;">NA</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/mark.groups-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> is a ggplot version of graph plotting. Using graph object as input, it can convert vertice attributes to plot attribute automatically or manually.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">v <span class="ot" style="color: #003B4F;">=</span> v <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age_range=</span><span class="fu" style="color: #4758AB;">case_when</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">20</span>, age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">30</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">30</span>, age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="dv" style="color: #AD0000;">40</span>))</span>
<span id="cb6-3">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"age_range"</span>, <span class="at" style="color: #657422;">value=</span>v<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size=</span>age_range, <span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">scale_size_continuous</span>(<span class="at" style="color: #657422;">breaks=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">30</span>,<span class="dv" style="color: #AD0000;">40</span>), <span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/vertice_aes_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Almost all the {<code>ggplots</code>} theme, scale functions are available for {<code>ggraph</code>}. Refer to <a href="https://www.rdocumentation.org/packages/ggraph/versions/1.0.2">rdocumentation</a> for more details.</p>
</section>
<section id="edge-aesthetics" class="level2">
<h2 class="anchored" data-anchor-id="edge-aesthetics">Edge aesthetics</h2>
<p>Similar to vertex aesthetics, edge plotting aesthetics can be manipulated both {<code>igraph</code>} default plotting and {<code>ggraph</code>} plotting</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># use linetype present whether come from same department, and line width presents friendship</span></span>
<span id="cb7-2">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">plot</span>(</span>
<span id="cb7-6">  g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb7-8">  <span class="at" style="color: #657422;">edge.curved=</span>T</span>
<span id="cb7-9">)</span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Using {<code>ggraph</code>} to show edges attribute is much easier.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">edge_linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">theme_void</span>() </span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/edge_aesthetics_ggraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="facet" class="level2">
<h2 class="anchored" data-anchor-id="facet">Facet</h2>
<p>One big advantage of {<code>ggraph</code>} is to use facet. It can be <code>facet_edges</code> or <code>facet_nodes</code> or <code>facet_graph</code>. Here I will only show example of <code>facet_nodes</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">#  facet based on the dept</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout=</span><span class="st" style="color: #20794D;">"kk"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">facet_nodes</span>(<span class="sc" style="color: #5E5E5E;">~</span>dept, <span class="at" style="color: #657422;">drop =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_edge_link</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">edge_width=</span>friendship, <span class="at" style="color: #657422;">linetype=</span>same.dept), <span class="at" style="color: #657422;">arrow =</span> <span class="fu" style="color: #4758AB;">arrow</span>(<span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">length =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.3</span>, <span class="st" style="color: #20794D;">"inches"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">nudge_y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/facet_nodes-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="layout" class="level1">
<h1>Layout</h1>
<p>There are many layouts available for both igraph and ggraph pacakges. Igraph provides a huge amount of layouts. https://igraph.org/r/doc/layout_.html</p>
<ul>
<li><strong>Standard layouts</strong>
<ul>
<li><strong>bipartite</strong>: minimize edge-crossings in a simple two-row (or column) layout for bipartite graphs.</li>
<li><strong>star</strong>: place one node in the center and the rest equidistantly around it. <code>as_star()</code></li>
<li><strong>circle</strong>: place nodes in a circle in the order of their index. Consider using layout_igraph_linear with circular=TRUE for more control. <code>in_circle()</code></li>
<li><strong>nicely</strong>: default, tries to pick an appropriate layout. <code>nicely</code></li>
<li><strong>dh</strong>: uses Davidson and Harels simulated annealing algorithm to place nodes. <code>with_dh()</code></li>
<li><strong>gem</strong>: place nodes on the plane using the GEM force-directed layout algorithm. <code>with_gem</code></li>
<li><strong>graphopt</strong>: uses the Graphopt algorithm based on alternating attraction and repulsion to place nodes. <code>with_graphopt()</code></li>
<li><strong>grid</strong>:place nodes on a rectangular grid. <code>on_grid()</code></li>
<li><strong>mds</strong>: perform a multidimensional scaling of nodes using either the shortest path or a user supplied distance. <code>with_mds()</code></li>
<li><strong>sphere</strong>: place nodes uniformly on a sphere - less relevant for 2D visualizations of networks. <code>with_sphere()</code></li>
<li><strong>randomly</strong>: places nodes uniformly random. <code>randomly</code></li>
<li><strong>fr</strong>: places nodes according to the force-directed algorithm of Fruchterman and Reingold. <code>with_fr()</code></li>
<li><strong>kk</strong>: uses the spring-based algorithm by Kamada and Kawai to place nodes. <code>with_kk()</code></li>
<li><strong>drl</strong>: uses the force directed algorithm from the DrL toolbox to place nodes. <code>with_drl()</code></li>
<li><strong>lgl</strong>: uses the algorithm from Large Graph Layout to place nodes. See with_lgl <code>with_lgl()</code></li>
</ul></li>
<li><strong>Hierarchical layouts</strong>
<ul>
<li><strong>tree</strong>: uses the Reingold-Tilford algorithm to place the nodes below their parent with the parent centered above its children. <code>as_tree()</code></li>
<li><strong>sugiyama</strong>: designed for directed acyclic graphs (that is, hierarchies where multiple parents are allowed) it minimizes the number of crossing edges.</li>
</ul></li>
</ul>
<p>Here we are going to show an example how to switch standard layout using the same data</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># star layout -- help determine center</span></span>
<span id="cb10-3">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">as_star</span>())</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"start"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># circle layout</span></span>
<span id="cb10-8">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">in_circle</span>())</span>
<span id="cb10-9"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-10"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"circle"</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># grid</span></span>
<span id="cb10-13">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">on_grid</span>())</span>
<span id="cb10-14"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-15"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"grid"</span>)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;"># nicely</span></span>
<span id="cb10-18">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb10-19"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-20"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"nicely"</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;"># kk</span></span>
<span id="cb10-23">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_kk</span>())</span>
<span id="cb10-24"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-25"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"Kamada and Kawai(kk)"</span>)</span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;"># fr</span></span>
<span id="cb10-28">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(g, <span class="fu" style="color: #4758AB;">with_fr</span>())</span>
<span id="cb10-29"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">layout =</span> coords, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb10-30"><span class="fu" style="color: #4758AB;">title</span>(<span class="st" style="color: #20794D;">"force-directed(fr)"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/layout_igraph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Hierarchical layouts can plot data in layer. Here show example how to use sugiyama layout</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># make different dept nodes at different node</span></span>
<span id="cb11-2">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_vertex_attr</span>(<span class="st" style="color: #20794D;">"dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>,<span class="st" style="color: #20794D;">"IT"</span>,<span class="st" style="color: #20794D;">"sale"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">value=</span><span class="fu" style="color: #4758AB;">c</span>(F,F,T,F,T,T))</span>
<span id="cb11-4"></span>
<span id="cb11-5">v <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="st" style="color: #20794D;">"vertices"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">layer=</span><span class="fu" style="color: #4758AB;">ifelse</span>(dept<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">"sale"</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-7"></span>
<span id="cb11-8">e <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">as_data_frame</span>(g, <span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as_tibble <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">width=</span>friendship) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">ifelse</span>(same.dept,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-11"></span>
<span id="cb11-12">g <span class="ot" style="color: #003B4F;">=</span> g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"width"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"lty"</span>,<span class="at" style="color: #657422;">value=</span>e<span class="sc" style="color: #5E5E5E;">$</span>lty)</span>
<span id="cb11-13"></span>
<span id="cb11-14">lay1 <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">layout_with_sugiyama</span>(g, <span class="at" style="color: #657422;">layers=</span>v<span class="sc" style="color: #5E5E5E;">$</span>layer, <span class="at" style="color: #657422;">attributes=</span><span class="st" style="color: #20794D;">"all"</span>)</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="fu" style="color: #4758AB;">plot</span>(lay1<span class="sc" style="color: #5E5E5E;">$</span>extd_graph, <span class="at" style="color: #657422;">edge.curved=</span>T)</span>
<span id="cb11-17"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(v<span class="sc" style="color: #5E5E5E;">$</span>gender),<span class="at" style="color: #657422;">pch=</span><span class="dv" style="color: #AD0000;">21</span>,<span class="at" style="color: #657422;">pt.bg=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"red"</span>,<span class="st" style="color: #20794D;">"blue"</span>), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"gender"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-18"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"left"</span>,<span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>same.dept),<span class="at" style="color: #657422;">lty=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"same.dept"</span>,<span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb11-19"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topright"</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">lwd=</span><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(e<span class="sc" style="color: #5E5E5E;">$</span>friendship)), <span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"friendship"</span>, <span class="at" style="color: #657422;">box.lty=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/sugiyama_layout-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>ggraph</code> can use all the layout mentioned above by specifying it in <code>ggraph(g, layout=...)</code>. Besides, ggraph has addtional useful layout.</p>
<ul>
<li>dendrogram: dendrogram layout not only take in graph object but also dendrogram object (<code>as.dendrogram(hclust(dist(...)))</code>). ggraph will automatically convert dendrogram to igraph by <code>den_to_igraph</code>. It ususally plots using <code>geom_edge_diagonal()</code> or <code>geom_edge_elbow()</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">den <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.dendrogram</span>(<span class="fu" style="color: #4758AB;">hclust</span>(<span class="fu" style="color: #4758AB;">dist</span>(mtcars)))</span>
<span id="cb12-2">p1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">geom_edge_diagonal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">nudge_y=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-6">p2 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">ggraph</span>(den, <span class="st" style="color: #20794D;">'dendrogram'</span>, <span class="at" style="color: #657422;">circular =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-7">    <span class="fu" style="color: #4758AB;">geom_edge_elbow</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>label), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>, <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">coord_fixed</span>()<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb12-11"><span class="fu" style="color: #4758AB;">grid.arrange</span>(p1,p2,<span class="at" style="color: #657422;">ncol=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/dendrogram-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>hive: make nodes group into a axis and connecting axis instead.</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">V</span>(g)<span class="sc" style="color: #5E5E5E;">$</span>age_range)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="st" style="color: #20794D;">'hive'</span>, <span class="at" style="color: #657422;">axis =</span> age_range, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;">geom_edge_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_width=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">geom_axis_hive</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> age_range), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">coord_fixed</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">scale_edge_width</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/hive-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>linear: make nodes only the same line so that arc connections were made</li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">ggraph</span>(g, <span class="at" style="color: #657422;">layout =</span> <span class="st" style="color: #20794D;">'linear'</span>, <span class="at" style="color: #657422;">sort.by =</span> age) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;">geom_edge_arc</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">factor</span>(same.dept), <span class="at" style="color: #657422;">edge_alpha=</span>friendship)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_node_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color=</span>gender), <span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">geom_node_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label=</span>name), <span class="at" style="color: #657422;">angle=</span><span class="dv" style="color: #AD0000;">45</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;">scale_edge_alpha</span>(<span class="at" style="color: #657422;">range=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.3</span>,<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3_files/figure-html/linear_arc-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>More functions about ggraph refer to https://www.rdocumentation.org/packages/ggraph/versions/1.0.2</p>
</section>
<section id="other-packages-for-graph-visualization" class="level1">
<h1>other packages for graph visualization</h1>
<p>There are many other packages available for graph visualization and network analysis. In this series, I will only list the link here for the further reference. I may come back to further this topic in the future when necessary.</p>
<p><strong>Network analysis tool</strong>: Statnet<sup>1</sup></p>
<p><strong>Network visualization</strong>: ggnet<sup>2</sup></p>
<p><strong>Interactive network</strong> :</p>
<ul>
<li><p>visNetwork<sup>3</sup></p></li>
<li><p>jstree<sup>4</sup></p></li>
<li><p>Ndtv<sup>5</sup></p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://statnet.org/trac/wiki↩︎</p></li>
<li id="fn2"><p>https://briatte.github.io/ggnet/↩︎</p></li>
<li id="fn3"><p>https://datastorm-open.github.io/visNetwork/↩︎</p></li>
<li id="fn4"><p>https://bwlewis.github.io/rthreejs/↩︎</p></li>
<li id="fn5"><p>http://statnet.csde.washington.edu/workshops/SUNBELT/current/ndtv/ndtv_workshop.html↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>network</category>
  <category>visualization</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2019-09-04_network_analysis_part3.html</guid>
  <pubDate>Wed, 04 Sep 2019 04:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/thomasp85/ggraph/febab71076d7cf277cdb79b823f262b626651703/man/figures/logo.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Network Analysis in R - Part 2</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2.html</link>
  3`
  [1] 4 7
  </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># find membership for each vertex</span></span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;">membership</span>(wtc)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 1 2 1 3 2 2 3 1 1 1</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># calculate modularity for walktrap clustering on this graph</span></span>
<span id="cb45-2"><span class="fu" style="color: #4758AB;">modularity</span>(wtc) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3305785</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># plot community</span></span>
<span id="cb47-2">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">layout_</span>(gr, <span class="fu" style="color: #4758AB;">nicely</span>())</span>
<span id="cb47-3"><span class="fu" style="color: #4758AB;">plot</span>(wtc, gr, <span class="at" style="color: #657422;">layout=</span>coords)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2_files/figure-html/community-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>To learn more about graph clustering:</p>
<ol type="1">
<li><p><a href="https://www.csc2.ncsu.edu/faculty/nfsamato/practical-graph-mining-with-R/slides/pdf/Graph_Cluster_Analysis.pdf">NCSU course slide Introduction to Graph Cluster Analysis</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=cxTmmasBiC8">MIT open course Finding Clusters in Graphs</a></p></li>
</ol>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>network</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2019-08-24_network_analysis_part2.html</guid>
  <pubDate>Sat, 24 Aug 2019 04:00:00 GMT</pubDate>
  <media:content url="https://learniningwithsckinta.netlify.app/_site/posts/2019-08-24_network_analysis_part2_files/figure-html/community-1.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Network Analysis in R - Part 1</title>
  <dc:creator>Chun Su</dc:creator>
  <link>https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1.html</link>
  <description><![CDATA[ 



<p>Network analysis, also called graph analysis, is to study the complexity of the inter-relationships between actors of all sorts and provides an architectural view of individual actor connections.</p>
<p>It has been applied to many fields, like social network and gene network, and useful for any systematic studies on individual relationship <sup>1</sup>.</p>
<p>I will create a three part series <sup>2</sup> of network analysis and visualization using R packages <code>{igraph}</code> and <code>{ggraph}</code>. In this post, I will focus on general introduction of the terminology and R objects used in network analysis.</p>
<section id="glossaries" class="level1">
<h1>Glossaries</h1>
<ul>
<li><p><strong>Vertex</strong>: is the node of network.</p></li>
<li><p><strong>Edge</strong>: the connection of notes, sometimes called “linked”. The edge can be <strong>directed</strong> or <strong>undirected</strong>, depending on whether the distinction between source and target is meaningful.</p></li>
<li><p><strong>Graph</strong>: constitute of vertex and edges, which represents the whole inter-relationship of nodes. The <strong>subgraph</strong>, from the other hand, represents the inter-relationship of a subset of nodes.</p></li>
<li><p><strong>Cliques</strong>: Fully connected sub-graphs of a graph in which the every vertex connects with every other vertex.</p></li>
<li><p><strong>Degree</strong> : the number of adjacent vertex.</p></li>
<li><p><strong>Order</strong> : how far away from one vertex to another. order 0 is always v itself, order 1 is v plus its immediate neighbors, order 2 is order 1 plus the immediate neighbors of the vertices in order 1, etc.</p></li>
<li><p><strong>Attribute</strong>: attributes are associated with either vertex or edge. By default, the <code>name</code> is the mandatory attribute for vertex and edge. If the edges have a magnitude attribute, the graph is considered <strong>weighted</strong>.</p></li>
<li><p><strong>Bipartite networks</strong>: two-mode networks, in which there are two types of vertex and connections are only allowed between different types of nodes. Thus, <code>type</code> is a mandatory vertex attribute for bipartite networks. There are two types of common used bipartite networks:</p>
<ol type="1">
<li><p>Two types of vertex are annotated either “<strong>individual</strong>” or “<strong>group</strong>” to which the individual belong to. This is also called “affiliation network”.</p></li>
<li><p>the network consistent of two “<strong>parallel</strong>” types of vertex, in which type 1 only interact with type 2 while no interactions happen within the same type.</p></li>
</ol></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(igraph)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(ggraph)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(gridExtra)</span></code></pre></div>
</details>
</div>
</section>
<section id="igraph-object" class="level1">
<h1>IGRAPH object</h1>
<p><strong>IGRAPH object</strong> is a R object defined in <code>igraph</code> package.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">make_graph</span>(letters[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>], <span class="at" style="color: #657422;">directed =</span> T)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH be34cdf DN-- 10 5 -- 
+ attr: name (v/c)
+ edges from be34cdf (vertex names):
[1] a-&gt;b c-&gt;d e-&gt;f g-&gt;h i-&gt;j</code></pre>
</div>
</div>
<p>The first line of IGRAPH <code>IGRAPH dca479d DN-- 10 5 --</code> means a graph with id <code>dca479d</code> is <em>directed</em> (<code>D</code>) and <em>named</em> (<code>N</code>) containing <code>10</code> <em>vertices</em> and <code>5</code> <em>edges</em>.</p>
<p>The second line <code>+ attr: name (v/c)</code> indicates the attributes associated with vertex (<code>v</code>) and/or edge (<code>e</code>). In our example, only vertex has attribute <code>name</code> which is a character variable (<code>c</code>).</p>
<p>The third and fourth line of IGRAPH literally print what edges are. In our case, since graph is directed, the arrow shows the direction of edge.</p>
<p>It is worth to mention that the name of edges can be listed by vertices name in a <code>from|to</code> format. In most cases, names are the default attributes for vertex and can be used just like index to extract information directly from <code>IGRAPH</code> object. We will discuss this in detail in “graph subset” session.</p>
</section>
<section id="igraph-object-manipulation" class="level1">
<h1>IGRAPH object manipulation</h1>
<section id="create-a-graph" class="level2">
<h2 class="anchored" data-anchor-id="create-a-graph">Create a graph</h2>
<p>There are many ways to create graph from scratch.</p>
<ul>
<li><p>Easy graph:<code>graph_from_literal</code>, <code>make_graph</code></p></li>
<li><p>Create from user data: <code>graph_from_edgelist</code>, <code>graph_from_adjacency_matrix</code>, <code>graph_from_data_frame</code></p></li>
<li><p>Random graphs: <code>sample_gnp</code>, <code>sample_gnm</code>, <code>sample_pa</code>, <code>sample_smallworld</code>, etc.</p></li>
</ul>
<p>The following are a few examples of ways frequently used by me to make graph .</p>
<section id="edge-list-matrix" class="level3">
<h3 class="anchored" data-anchor-id="edge-list-matrix">edge list matrix</h3>
<p>The example below generates a directed graph from a list of vertex pair (edge)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">edge_list <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb4-2">    <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">from =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>), <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">as.matrix</span>()</span>
<span id="cb4-4"></span>
<span id="cb4-5">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_edgelist</span>(edge_list,<span class="at" style="color: #657422;">directed =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7">g</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 59ad3e6 D--- 4 5 -- 
+ edges from 59ad3e6:
[1] 1-&gt;2 2-&gt;3 2-&gt;4 3-&gt;2 4-&gt;1</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="one-mode-graph-from-a-vector-of-edge" class="level3">
<h3 class="anchored" data-anchor-id="one-mode-graph-from-a-vector-of-edge">one-mode graph from a vector of edge</h3>
<p>If the edge is given in a single vector, the default <code>make_graph</code> will use the order of vector to make one-mode graph. It means that the 1st edge points from the 1st element to the 2nd element, the 2nd edge from the 3rd element to the 4th element, etc. If the length of vector is odd number, it will end with last element connecting back to the 1st element, and throw a warning.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">make_graph</span>(letters[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>], <span class="at" style="color: #657422;">directed =</span> T)</span>
<span id="cb7-2">g</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 12185c3 DN-- 10 5 -- 
+ attr: name (v/c)
+ edges from 12185c3 (vertex names):
[1] a-&gt;b c-&gt;d e-&gt;f g-&gt;h i-&gt;j</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="using-adjacent-matrix" class="level3">
<h3 class="anchored" data-anchor-id="using-adjacent-matrix">using adjacent matrix</h3>
<p>The example below generates a undirected graph from a binary matrix, in which nodes are matrix colname and rowname.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3">adj_matrix <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb10-4">    <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">prob =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.1</span>)), <span class="at" style="color: #657422;">nc =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="fu" style="color: #4758AB;">colnames</span>(adj_matrix) <span class="ot" style="color: #003B4F;">&lt;-</span> letters[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;">rownames</span>(adj_matrix) <span class="ot" style="color: #003B4F;">&lt;-</span> letters[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb10-9"></span>
<span id="cb10-10">adj_matrix</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>  a b c d e f g h i j
a 0 1 1 1 0 0 0 0 0 0
b 0 0 0 1 0 0 0 0 0 0
c 0 0 0 0 0 0 0 0 0 0
d 0 0 1 0 0 0 0 0 0 0
e 1 0 0 0 0 0 0 0 0 0
f 0 1 0 0 0 0 0 0 0 0
g 0 0 0 0 0 0 0 0 1 0
h 1 0 0 0 0 0 0 0 1 0
i 0 0 0 0 0 1 0 0 0 0
j 0 1 0 0 0 0 0 0 0 0</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">g <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb12-2">    <span class="fu" style="color: #4758AB;">graph_from_adjacency_matrix</span>(adj_matrix, <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"undirected"</span>, <span class="at" style="color: #657422;">weighted =</span> T)</span>
<span id="cb12-3"></span>
<span id="cb12-4">g</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 81fe3c0 UNW- 10 12 -- 
+ attr: name (v/c), weight (e/n)
+ edges from 81fe3c0 (vertex names):
 [1] a--b a--c a--d a--e a--h b--d b--f b--j c--d f--i g--i h--i</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">plot</span>(g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There are other modes <sup>3</sup> available with details.</p>
</section>
<section id="using-named-data.frame" class="level3">
<h3 class="anchored" data-anchor-id="using-named-data.frame">Using named data.frame</h3>
<p>This is my favorite. The graph generated from <code>data.frame</code> can add all attributes at once. The below example is from official website. The attributes for nodes (<code>actors</code>) are <code>age</code> and <code>gender</code>, and edge (<code>relationship</code>) attributes include <code>same.dept</code>, <code>friendship</code> and <code>advice</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">actors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb15-2">  <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb15-3">  <span class="at" style="color: #657422;">age=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">48</span>,<span class="dv" style="color: #AD0000;">33</span>,<span class="dv" style="color: #AD0000;">45</span>,<span class="dv" style="color: #AD0000;">34</span>,<span class="dv" style="color: #AD0000;">21</span>),</span>
<span id="cb15-4">  <span class="at" style="color: #657422;">gender=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>,<span class="st" style="color: #20794D;">"M"</span>,<span class="st" style="color: #20794D;">"F"</span>))</span>
<span id="cb15-5"></span>
<span id="cb15-6">relations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb15-7">  <span class="at" style="color: #657422;">from=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"Cecil"</span>, <span class="st" style="color: #20794D;">"David"</span>,<span class="st" style="color: #20794D;">"David"</span>, <span class="st" style="color: #20794D;">"Esmeralda"</span>),</span>
<span id="cb15-8">  <span class="at" style="color: #657422;">to=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Alice"</span>),</span>
<span id="cb15-9">  <span class="at" style="color: #657422;">same.dept=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">FALSE</span>,<span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb15-10">  <span class="at" style="color: #657422;">friendship=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb15-11">  <span class="at" style="color: #657422;">advice=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb15-12">  )</span>
<span id="cb15-13"></span>
<span id="cb15-14">actor_relation_g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_data_frame</span>(relations, <span class="at" style="color: #657422;">directed=</span><span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">vertices=</span>actors)</span>
<span id="cb15-15"></span>
<span id="cb15-16">actor_relation_g</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 05d16d7 DN-- 5 6 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 05d16d7 (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">plot</span>(actor_relation_g)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/graphDataFrame-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="create-random-graph" class="level3">
<h3 class="anchored" data-anchor-id="create-random-graph">Create random graph</h3>
<p>Random graph generation is useful when it comes to simulation.</p>
<ul>
<li><p><code>sample_gnp</code> and <code>sample_gnm</code> generate random graph by assuming the same constant probability for every possible edge.</p>
<ul>
<li>The required parameters for <em>gnp</em> include: 1) The number of vertices in the graph <code>n</code> and 2) The probability for drawing an edge between two arbitrary vertices <code>p</code></li>
</ul></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># sample 10 vertex, every possible edge is created with the same constant probability 0.3</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb18-3">gr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample_gnp</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="fl" style="color: #AD0000;">0.3</span>)</span>
<span id="cb18-4">gr</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH eaef67a U--- 10 11 -- Erdos-Renyi (gnp) graph
+ attr: name (g/c), type (g/c), loops (g/l), p (g/n)
+ edges from eaef67a:
 [1] 2-- 5 3-- 5 5-- 6 4-- 7 3-- 8 6-- 8 1-- 9 3-- 9 8-- 9 3--10 8--10</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">plot</span>(gr)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<pre><code>-  The required parameters for *gmp* include: 1) The number of vertices in the graph `n` and 2) The number of edges in the graph `m`.</code></pre>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># sample 10 vertex, create a 15-edge graph</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb22-3">gr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample_gnm</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb22-4">gr</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH a2ec496 U--- 10 15 -- Erdos-Renyi (gnm) graph
+ attr: name (g/c), type (g/c), loops (g/l), m (g/n)
+ edges from a2ec496:
 [1] 1-- 2 1-- 4 2-- 4 3-- 4 5-- 6 2-- 7 3-- 7 5-- 7 2-- 8 3-- 8 6-- 8 1-- 9
[13] 4-- 9 5--10 9--10</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">plot</span>(gr)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ul>
<li>Random scale free network, which means a network whose degree of nodes distribution follows a power law. <code>sample_pa</code> generates scale-free graphs according to the Barabasi-Albert model. We start with a single vertex and no edges in the first time step. Then we add one vertex in each time step and the new vertex initiates some edges to old vertices. The probability that an old vertex is chosen is given by <img src="https://latex.codecogs.com/png.latex?p(i)%20~%20k_i%20*%20power%20+%20zero.appeal"></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb25-2"></span>
<span id="cb25-3">gr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample_pa</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">power =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="fu" style="color: #4758AB;">plot</span>(g, <span class="at" style="color: #657422;">vertex.label=</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #657422;">edge.arrow.size=</span><span class="fl" style="color: #AD0000;">0.02</span>,<span class="at" style="color: #657422;">vertex.size =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">density</span>(<span class="fu" style="color: #4758AB;">degree_distribution</span>(gr)))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/unnamed-chunk-8-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There are many other random graphs using different models. To find more, try <code>?igraph::sample_[TAB]</code>.</p>
</section>
</section>
<section id="extract-vertexedge-and-their-attributes" class="level2">
<h2 class="anchored" data-anchor-id="extract-vertexedge-and-their-attributes">Extract vertex/edge and their attributes</h2>
<p>To get vertex list and their attributes from graph object, we use <code>V(graph)$"&lt;attribute_name&gt;"</code> to convert graph object to vector. Using IGRAPH <code>actor_relation_g</code> created in previous chunk as example, we will get actor node (<code>name</code>), <code>age</code> (attribute 1) and <code>gender</code> (attribute 2)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">V</span>(actor_relation_g)<span class="sc" style="color: #5E5E5E;">$</span>name</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice"     "Bob"       "Cecil"     "David"     "Esmeralda"</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">V</span>(actor_relation_g)<span class="sc" style="color: #5E5E5E;">$</span>age</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 48 33 45 34 21</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">V</span>(actor_relation_g)<span class="sc" style="color: #5E5E5E;">$</span>gender</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "F" "M" "F" "M" "F"</code></pre>
</div>
</div>
<p>We can also get all the vertex attributes to a data.frame using <code>igraph::as_data_frame()</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_data_frame</span>(actor_relation_g, <span class="at" style="color: #657422;">what =</span> <span class="st" style="color: #20794D;">"vertices"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>               name age gender
Alice         Alice  48      F
Bob             Bob  33      M
Cecil         Cecil  45      F
David         David  34      M
Esmeralda Esmeralda  21      F</code></pre>
</div>
</div>
<p>Similarly, to get edge list and their attributes from graph object, we use <code>E(graph)$"&lt;attribute_name&gt;"</code> to convert graph object to vector. OR using <code>igraph::as_data_frame()</code> to convert all edges to a data.frame</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># edge attributes</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;">E</span>(actor_relation_g)<span class="sc" style="color: #5E5E5E;">$</span>same.dept</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE  TRUE FALSE FALSE  TRUE</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">E</span>(actor_relation_g)<span class="sc" style="color: #5E5E5E;">$</span>friendship</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 5 5 2 1 1</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># edge data.frame</span></span>
<span id="cb39-2">igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_data_frame</span>(actor_relation_g, <span class="at" style="color: #657422;">what =</span> <span class="st" style="color: #20794D;">"edges"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>       from    to same.dept friendship advice
1       Bob Alice     FALSE          4      4
2     Cecil   Bob     FALSE          5      5
3     Cecil Alice      TRUE          5      5
4     David Alice     FALSE          2      4
5     David   Bob     FALSE          1      2
6 Esmeralda Alice      TRUE          1      3</code></pre>
</div>
</div>
</section>
<section id="add-vertex-and-edges" class="level2">
<h2 class="anchored" data-anchor-id="add-vertex-and-edges">Add vertex and edges</h2>
<p>Vertices and edges can be added to existing graph by <code>add_&lt;vertices|edges&gt;()</code> or <code>+ &lt;vertices|edges&gt;()</code>. Please be aware that vertices of added new edges must be from known vertices already in the graph.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># add vertices </span></span>
<span id="cb41-2">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-3">    <span class="fu" style="color: #4758AB;">add_vertices</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Lisa"</span>,<span class="st" style="color: #20794D;">"Zack"</span>)) <span class="co" style="color: #5E5E5E;"># the first argument is number of vertex</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 80dfeea DN-- 7 6 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 80dfeea (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">actor_relation_g <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">vertices</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Lisa"</span>,<span class="st" style="color: #20794D;">"Zack"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH de6630f DN-- 7 6 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from de6630f (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice</code></pre>
</div>
</div>
<p>To add new edge, the new edge must be between known vertices already in the graph.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># add connected edges (even number of vertices). </span></span>
<span id="cb45-2">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb45-3">    <span class="fu" style="color: #4758AB;">add_edges</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>,<span class="st" style="color: #20794D;">"Bob"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH d7c4121 DN-- 5 7 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from d7c4121 (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice Alice    -&gt;Bob  </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">actor_relation_g <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">edge</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>,<span class="st" style="color: #20794D;">"Bob"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH ad4c43b DN-- 5 7 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from ad4c43b (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice Alice    -&gt;Bob  </code></pre>
</div>
</div>
<p>The edges can be also be added by <code>+ path()</code>. The path is a <code>igraph.path</code> object that each element is connected to the next, but it is not a <code>IGRAPH</code> object.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># add paths. The vertices must be from known vertices already in the graph </span></span>
<span id="cb49-2">actor_relation_g <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">path</span>(<span class="st" style="color: #20794D;">"Alice"</span>,<span class="st" style="color: #20794D;">"Bob"</span>,<span class="st" style="color: #20794D;">"Cecil"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 48d4748 DN-- 5 8 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 48d4748 (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice Alice    -&gt;Bob   Bob      -&gt;Cecil</code></pre>
</div>
</div>
<p>If a new vertex needs to be added to current graph, using add graph method instead.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">actor_relation_g <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">make_graph</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>,<span class="st" style="color: #20794D;">"Bob"</span>,<span class="st" style="color: #20794D;">"Bob"</span>,<span class="st" style="color: #20794D;">"Melisa"</span>)) <span class="co" style="color: #5E5E5E;"># this create same path as above</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH def4db0 DN-- 6 8 -- 
+ attr: age (v/n), gender (v/c), name (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from def4db0 (vertex names):
[1] Esmeralda-&gt;Alice  David    -&gt;Bob    David    -&gt;Alice  Cecil    -&gt;Bob   
[5] Cecil    -&gt;Alice  Bob      -&gt;Melisa Bob      -&gt;Alice  Alice    -&gt;Bob   </code></pre>
</div>
</div>
</section>
<section id="delete-vertex-and-edges" class="level2">
<h2 class="anchored" data-anchor-id="delete-vertex-and-edges">Delete vertex and edges</h2>
<p>Delete can be done by <code>delete_&lt;vertices|edges&gt;()</code> using either index or name of vertices|edges.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">### remove the vertices whose age is younger than 30</span></span>
<span id="cb53-2">vertex_df <span class="ot" style="color: #003B4F;">=</span> actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-3">    igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_data_frame</span>(<span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"vertices"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-4">        dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-5">        dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">index=</span><span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-6">        dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb53-7"></span>
<span id="cb53-8"><span class="co" style="color: #5E5E5E;"># remove vertices by index number </span></span>
<span id="cb53-9">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">delete_vertices</span>(vertex_df<span class="sc" style="color: #5E5E5E;">$</span>index)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 82b2916 DN-- 4 5 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 82b2916 (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Bob   Cecil-&gt;Alice David-&gt;Alice David-&gt;Bob  </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># remove vertice by name </span></span>
<span id="cb55-2">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">delete_vertices</span>(vertex_df<span class="sc" style="color: #5E5E5E;">$</span>name)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 464f2cc DN-- 4 5 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 464f2cc (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Bob   Cecil-&gt;Alice David-&gt;Alice David-&gt;Bob  </code></pre>
</div>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">### remove the edges with friendship &lt;= 1 </span></span>
<span id="cb57-2">edge_df <span class="ot" style="color: #003B4F;">=</span> actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb57-3">    igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_data_frame</span>(<span class="at" style="color: #657422;">what=</span><span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb57-4">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb57-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">index=</span><span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb57-6">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">name=</span><span class="fu" style="color: #4758AB;">paste</span>(from,to,<span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"|"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb57-7">    <span class="fu" style="color: #4758AB;">filter</span>(friendship <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb57-8"></span>
<span id="cb57-9"><span class="co" style="color: #5E5E5E;"># remove vertice by index</span></span>
<span id="cb57-10">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">delete_edges</span>(edge_df<span class="sc" style="color: #5E5E5E;">$</span>index)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 8643b08 DN-- 5 4 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 8643b08 (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Bob   Cecil-&gt;Alice David-&gt;Alice</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># remove vertice by name </span></span>
<span id="cb59-2">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">delete_edges</span>(edge_df<span class="sc" style="color: #5E5E5E;">$</span>name)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 05c4850 DN-- 5 4 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 05c4850 (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Bob   Cecil-&gt;Alice David-&gt;Alice</code></pre>
</div>
</div>
</section>
<section id="setdelete-the-attributes-of-vertex-and-edges" class="level2">
<h2 class="anchored" data-anchor-id="setdelete-the-attributes-of-vertex-and-edges">Set/Delete the attributes of vertex and edges</h2>
<p>The attributes of vertices and edges can be added or deleted to existing graph by <code>set_vertex_attr()</code>/<code>set_edge_attr()</code> or <code>delete_vertex_attr()</code>/<code>delete_edge_attr()</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># add a new attr "relationship" for people in the same dept</span></span>
<span id="cb61-2">edge_df <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb61-3">    actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span> igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_data_frame</span>(<span class="at" style="color: #657422;">what =</span> <span class="st" style="color: #20794D;">"edges"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb61-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">relationship =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(same.dept, <span class="st" style="color: #20794D;">"collegue"</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb61-5"></span>
<span id="cb61-6">actor_relation_g <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb61-7">    <span class="fu" style="color: #4758AB;">set_edge_attr</span>(<span class="st" style="color: #20794D;">"relationship"</span>, <span class="fu" style="color: #4758AB;">which</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(edge_df<span class="sc" style="color: #5E5E5E;">$</span>relationship)), edge_df<span class="sc" style="color: #5E5E5E;">$</span>relationship[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(edge_df<span class="sc" style="color: #5E5E5E;">$</span>relationship)]</span>
<span id="cb61-8">                  )</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 05d16d7 DN-- 5 6 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n), relationship (e/c)
+ edges from 05d16d7 (vertex names):
[1] Bob      -&gt;Alice Cecil    -&gt;Bob   Cecil    -&gt;Alice David    -&gt;Alice
[5] David    -&gt;Bob   Esmeralda-&gt;Alice</code></pre>
</div>
</div>
</section>
<section id="merge-graph" class="level2">
<h2 class="anchored" data-anchor-id="merge-graph">Merge graph</h2>
<p>Graphs union/intersection is to merge two or more graphs into one graph using the shared the vertices.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># create new graph</span></span>
<span id="cb63-2">g2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">graph_from_literal</span>(<span class="st" style="color: #20794D;">"David"</span><span class="sc" style="color: #5E5E5E;">-+</span><span class="st" style="color: #20794D;">"Charlie"</span><span class="sc" style="color: #5E5E5E;">+-+</span><span class="st" style="color: #20794D;">"Lisa"</span>,</span>
<span id="cb63-3">                        <span class="st" style="color: #20794D;">"Lisa"</span><span class="sc" style="color: #5E5E5E;">+-+</span><span class="st" style="color: #20794D;">"David"</span><span class="sc" style="color: #5E5E5E;">+-</span><span class="st" style="color: #20794D;">"Jim"</span>,</span>
<span id="cb63-4">                        <span class="st" style="color: #20794D;">"Zack"</span><span class="sc" style="color: #5E5E5E;">+-</span><span class="st" style="color: #20794D;">"Esmeralda"</span><span class="sc" style="color: #5E5E5E;">-+</span><span class="st" style="color: #20794D;">"Bob"</span>,</span>
<span id="cb63-5">                        <span class="st" style="color: #20794D;">"Zack"</span><span class="sc" style="color: #5E5E5E;">+-</span><span class="st" style="color: #20794D;">"Charlie"</span>,</span>
<span id="cb63-6">                        <span class="st" style="color: #20794D;">"Lisa"</span><span class="sc" style="color: #5E5E5E;">+-</span><span class="st" style="color: #20794D;">"Lisa"</span>,</span>
<span id="cb63-7">                        <span class="st" style="color: #20794D;">"Bob"</span><span class="sc" style="color: #5E5E5E;">-+</span><span class="st" style="color: #20794D;">"Alice"</span><span class="sc" style="color: #5E5E5E;">+-</span><span class="st" style="color: #20794D;">"Esmeralda"</span></span>
<span id="cb63-8">                        )</span>
<span id="cb63-9"></span>
<span id="cb63-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">#### union graph</span></span>
<span id="cb63-11">g3 <span class="ot" style="color: #003B4F;">&lt;-</span> igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">union</span>(actor_relation_g,g2)</span>
<span id="cb63-12"></span>
<span id="cb63-13"><span class="do" style="color: #5E5E5E;
font-style: italic;">#### graph intersection</span></span>
<span id="cb63-14">g4 <span class="ot" style="color: #003B4F;">&lt;-</span> igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">intersection</span>(actor_relation_g,g2)</span>
<span id="cb63-15"></span>
<span id="cb63-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">### plot new graphs</span></span>
<span id="cb63-17"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>)) </span>
<span id="cb63-18"><span class="fu" style="color: #4758AB;">plot</span>(actor_relation_g, <span class="at" style="color: #657422;">edge.arrow.size=</span>.<span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb63-19"><span class="fu" style="color: #4758AB;">plot</span>(g2, <span class="at" style="color: #657422;">edge.arrow.size=</span>.<span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb63-20"><span class="fu" style="color: #4758AB;">plot</span>(g3, <span class="at" style="color: #657422;">edge.arrow.size=</span>.<span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb63-21"><span class="fu" style="color: #4758AB;">plot</span>(g4, <span class="at" style="color: #657422;">edge.arrow.size=</span>.<span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1_files/figure-html/merge-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="induce-subgraph" class="level2">
<h2 class="anchored" data-anchor-id="induce-subgraph">Induce subgraph</h2>
<p>The subgraph can be induced by either vertex or edge names/index. The edge names are in the form <code>from|to</code>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># induce a subgraph using a list of vertices</span></span>
<span id="cb64-2">igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">induced_subgraph</span>(actor_relation_g, <span class="at" style="color: #657422;">v=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>,<span class="st" style="color: #20794D;">"Bob"</span>,<span class="st" style="color: #20794D;">"Cecil"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 4f5b3fb DN-- 3 3 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 4f5b3fb (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Bob   Cecil-&gt;Alice</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># induce a subgraph using edges</span></span>
<span id="cb66-2">igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">subgraph.edges</span>(actor_relation_g, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Bob|Alice"</span>,<span class="st" style="color: #20794D;">"David|Bob"</span>,<span class="st" style="color: #20794D;">"Cecil|Alice"</span>), <span class="at" style="color: #657422;">delete.vertices =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH a710864 DN-- 4 3 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from a710864 (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Alice David-&gt;Bob  </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="co" style="color: #5E5E5E;"># induce a subgraph using edges attribute (friendship score stronger than 3)</span></span>
<span id="cb68-2">e1 <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">E</span>(actor_relation_g)[<span class="fu" style="color: #4758AB;">E</span>(actor_relation_g)<span class="sc" style="color: #5E5E5E;">$</span>friendship <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb68-3">igraph<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">subgraph.edges</span>(actor_relation_g, e1, <span class="at" style="color: #657422;">delete.vertices =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>IGRAPH 7e403b5 DN-- 3 3 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 7e403b5 (vertex names):
[1] Bob  -&gt;Alice Cecil-&gt;Bob   Cecil-&gt;Alice</code></pre>
</div>
</div>
</section>
</section>
<section id="relationship-between-known-nodes" class="level1">
<h1>Relationship between known nodes</h1>
<p>With a known graph, we sometimes want to know relationship between two known nodes. eg. are those two nodes adjacent? are those two nodes linked by a path? what are the path to connect them?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># check two nodes adjacent. return boolean</span></span>
<span id="cb70-2"><span class="fu" style="color: #4758AB;">are_adjacent</span>(g3,<span class="st" style="color: #20794D;">"Jim"</span>, <span class="st" style="color: #20794D;">"Zack"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="co" style="color: #5E5E5E;"># paths to connect </span></span>
<span id="cb72-2"><span class="fu" style="color: #4758AB;">all_shortest_paths</span>(g3, <span class="st" style="color: #20794D;">"Jim"</span>,<span class="st" style="color: #20794D;">"Zack"</span>)<span class="sc" style="color: #5E5E5E;">$</span>res[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="co" style="color: #5E5E5E;"># return a igraph.vs</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>+ 4/9 vertices, named, from 3eded49:
[1] Jim     David   Charlie Zack   </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;">all_simple_paths</span>(g3, <span class="st" style="color: #20794D;">"Jim"</span>, <span class="st" style="color: #20794D;">"Zack"</span>) <span class="co" style="color: #5E5E5E;"># return a list of igraph.vs</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
+ 4/9 vertices, named, from 3eded49:
[1] Jim     David   Charlie Zack   

[[2]]
+ 5/9 vertices, named, from 3eded49:
[1] Jim     David   Lisa    Charlie Zack   </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;">all_simple_paths</span>(g3, <span class="st" style="color: #20794D;">"Jim"</span>, <span class="st" style="color: #20794D;">"Zack"</span>, <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"all"</span>)  <span class="co" style="color: #5E5E5E;"># regardless of direction</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
+ 6/9 vertices, named, from 3eded49:
[1] Jim       David     Alice     Bob       Esmeralda Zack     

[[2]]
+ 7/9 vertices, named, from 3eded49:
[1] Jim       David     Alice     Cecil     Bob       Esmeralda Zack     

[[3]]
+ 5/9 vertices, named, from 3eded49:
[1] Jim       David     Alice     Esmeralda Zack     

[[4]]
+ 6/9 vertices, named, from 3eded49:
[1] Jim       David     Bob       Alice     Esmeralda Zack     

[[5]]
+ 7/9 vertices, named, from 3eded49:
[1] Jim       David     Bob       Cecil     Alice     Esmeralda Zack     

[[6]]
+ 5/9 vertices, named, from 3eded49:
[1] Jim       David     Bob       Esmeralda Zack     

[[7]]
+ 4/9 vertices, named, from 3eded49:
[1] Jim     David   Charlie Zack   

[[8]]
+ 5/9 vertices, named, from 3eded49:
[1] Jim     David   Lisa    Charlie Zack   </code></pre>
</div>
</div>
<p>In next post, I will discuss how to use <code>{igraph}</code> package to measure and cluster network and use the <code>IGRAPH</code> object to its fullest potential.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://en.wikipedia.org/wiki/Graph_theory↩︎</p></li>
<li id="fn2"><p>Here are <a href="https://learniningwithsckinta.netlify.com/post/network_analysis_part2-2/">part-2</a> and <a href="https://learniningwithsckinta.netlify.com/post/network_analysis_part3/">part-3</a>↩︎</p></li>
<li id="fn3"><p>https://igraph.org/r/doc/graph_from_adjacency_matrix.html↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>R</category>
  <category>network</category>
  <guid>https://learniningwithsckinta.netlify.app/posts/2019-07-11_network_analysis_part1.html</guid>
  <pubDate>Thu, 11 Jul 2019 04:00:00 GMT</pubDate>
  <media:content url="https://www.robcross.org/wp-content/uploads/2020/06/organizational-network-analysis.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
